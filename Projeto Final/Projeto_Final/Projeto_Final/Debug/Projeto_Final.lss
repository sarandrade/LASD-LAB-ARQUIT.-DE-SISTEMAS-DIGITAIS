
Projeto_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00001308  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000334  008001ec  008001ec  00001488  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000014f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b4  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac7  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a9  00000000  00000000  000046ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00005754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071c  00000000  00000000  00005b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013cb  00000000  00000000  000062ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00007677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 01 	jmp	0x256	; 0x256 <__ctors_end>
       4:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_1>
       8:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_2>
       c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_3>
      10:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      14:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      18:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      1c:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_7>
      20:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      24:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      28:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      2c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      30:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      34:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      38:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      3c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      40:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      44:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      48:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_18>
      4c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      50:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      54:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      58:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      5c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      60:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      64:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      68:	1b 06       	cpc	r1, r27
      6a:	22 06       	cpc	r2, r18
      6c:	27 06       	cpc	r2, r23
      6e:	2d 06       	cpc	r2, r29
      70:	31 06       	cpc	r3, r17
      72:	37 06       	cpc	r3, r23
      74:	3b 06       	cpc	r3, r27

00000076 <CHARSET>:
      76:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      86:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      96:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      a6:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      b6:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      c6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      d6:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      e6:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      f6:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     106:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     116:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     126:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     136:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     146:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     156:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     166:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     176:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     186:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     196:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1a6:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1b6:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1c6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1d6:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1e6:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1f6:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     206:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     216:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     226:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     236:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     246:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000256 <__ctors_end>:
     256:	11 24       	eor	r1, r1
     258:	1f be       	out	0x3f, r1	; 63
     25a:	cf ef       	ldi	r28, 0xFF	; 255
     25c:	d8 e0       	ldi	r29, 0x08	; 8
     25e:	de bf       	out	0x3e, r29	; 62
     260:	cd bf       	out	0x3d, r28	; 61

00000262 <__do_copy_data>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a0 e0       	ldi	r26, 0x00	; 0
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	e8 e0       	ldi	r30, 0x08	; 8
     26a:	f3 e1       	ldi	r31, 0x13	; 19
     26c:	02 c0       	rjmp	.+4      	; 0x272 <__do_copy_data+0x10>
     26e:	05 90       	lpm	r0, Z+
     270:	0d 92       	st	X+, r0
     272:	ac 3e       	cpi	r26, 0xEC	; 236
     274:	b1 07       	cpc	r27, r17
     276:	d9 f7       	brne	.-10     	; 0x26e <__do_copy_data+0xc>

00000278 <__do_clear_bss>:
     278:	25 e0       	ldi	r18, 0x05	; 5
     27a:	ac ee       	ldi	r26, 0xEC	; 236
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	01 c0       	rjmp	.+2      	; 0x282 <.do_clear_bss_start>

00000280 <.do_clear_bss_loop>:
     280:	1d 92       	st	X+, r1

00000282 <.do_clear_bss_start>:
     282:	a0 32       	cpi	r26, 0x20	; 32
     284:	b2 07       	cpc	r27, r18
     286:	e1 f7       	brne	.-8      	; 0x280 <.do_clear_bss_loop>
     288:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <main>
     28c:	0c 94 82 09 	jmp	0x1304	; 0x1304 <_exit>

00000290 <__bad_interrupt>:
     290:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000294 <define_porcentagem_PWM>:
// Função para recepção de um frame de 5 a 8 bits
unsigned char USART_Receive(void)
{
	while(!(UCSR0A & (1<<RXC0))); // Espera o dado ser recebido
	return UDR0; // Lê o dado recebido e retorna
}
     294:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <min>
     298:	89 31       	cpi	r24, 0x19	; 25
     29a:	89 f0       	breq	.+34     	; 0x2be <define_porcentagem_PWM+0x2a>
     29c:	2c f4       	brge	.+10     	; 0x2a8 <define_porcentagem_PWM+0x14>
     29e:	88 23       	and	r24, r24
     2a0:	41 f0       	breq	.+16     	; 0x2b2 <define_porcentagem_PWM+0x1e>
     2a2:	8d 30       	cpi	r24, 0x0D	; 13
     2a4:	49 f0       	breq	.+18     	; 0x2b8 <define_porcentagem_PWM+0x24>
     2a6:	08 95       	ret
     2a8:	85 32       	cpi	r24, 0x25	; 37
     2aa:	61 f0       	breq	.+24     	; 0x2c4 <define_porcentagem_PWM+0x30>
     2ac:	81 33       	cpi	r24, 0x31	; 49
     2ae:	69 f0       	breq	.+26     	; 0x2ca <define_porcentagem_PWM+0x36>
     2b0:	08 95       	ret
     2b2:	83 e3       	ldi	r24, 0x33	; 51
     2b4:	87 bd       	out	0x27, r24	; 39
     2b6:	08 95       	ret
     2b8:	86 e6       	ldi	r24, 0x66	; 102
     2ba:	87 bd       	out	0x27, r24	; 39
     2bc:	08 95       	ret
     2be:	89 e9       	ldi	r24, 0x99	; 153
     2c0:	87 bd       	out	0x27, r24	; 39
     2c2:	08 95       	ret
     2c4:	8c ec       	ldi	r24, 0xCC	; 204
     2c6:	87 bd       	out	0x27, r24	; 39
     2c8:	08 95       	ret
     2ca:	8a ef       	ldi	r24, 0xFA	; 250
     2cc:	87 bd       	out	0x27, r24	; 39
     2ce:	08 95       	ret

000002d0 <USART_Init>:
     2d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     2d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     2d8:	88 e9       	ldi	r24, 0x98	; 152
     2da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     2de:	8e e0       	ldi	r24, 0x0E	; 14
     2e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	87 b9       	out	0x07, r24	; 7
     2e8:	08 95       	ret

000002ea <USART_Transmit>:
     2ea:	e0 ec       	ldi	r30, 0xC0	; 192
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	90 81       	ld	r25, Z
     2f0:	95 ff       	sbrs	r25, 5
     2f2:	fd cf       	rjmp	.-6      	; 0x2ee <USART_Transmit+0x4>
     2f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     2f8:	08 95       	ret

000002fa <exibe_com_2digitos>:
	}
}

// Função que testa se tem um número tem casa decimal e concatena com "0" caso não tenha
void exibe_com_2digitos(int numero)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	00 d0       	rcall	.+0      	; 0x300 <exibe_com_2digitos+0x6>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
	if (numero < 10) // Caso o numero só tenha 1 dígito
     304:	8a 30       	cpi	r24, 0x0A	; 10
     306:	91 05       	cpc	r25, r1
     308:	ac f4       	brge	.+42     	; 0x334 <exibe_com_2digitos+0x3a>
	{
		char zero[] = "0"; // O "0" deve ser colocado na casa decimal
     30a:	20 e3       	ldi	r18, 0x30	; 48
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	3a 83       	std	Y+2, r19	; 0x02
     310:	29 83       	std	Y+1, r18	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     312:	4a e0       	ldi	r20, 0x0A	; 10
     314:	6d e1       	ldi	r22, 0x1D	; 29
     316:	75 e0       	ldi	r23, 0x05	; 5
     318:	0e 94 37 09 	call	0x126e	; 0x126e <__itoa_ncheck>
		itoa(numero, snum, 10); // Funçaõ que converte tarefas (int) em string
		strcat(zero, snum); // Concatenação de zero e snum
     31c:	6d e1       	ldi	r22, 0x1D	; 29
     31e:	75 e0       	ldi	r23, 0x05	; 5
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	0e 94 2c 09 	call	0x1258	; 0x1258 <strcat>
		nokia_lcd_write_string(zero, 1);
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
     332:	0a c0       	rjmp	.+20     	; 0x348 <exibe_com_2digitos+0x4e>
     334:	4a e0       	ldi	r20, 0x0A	; 10
     336:	6d e1       	ldi	r22, 0x1D	; 29
     338:	75 e0       	ldi	r23, 0x05	; 5
     33a:	0e 94 37 09 	call	0x126e	; 0x126e <__itoa_ncheck>
	}
	else
	{
		itoa(numero, snum, 10); // Funçaõ que converte tarefas (int) em string
		nokia_lcd_write_string(snum, 1);
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	8d e1       	ldi	r24, 0x1D	; 29
     342:	95 e0       	ldi	r25, 0x05	; 5
     344:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
	}
}
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <atualizaDisplay>:


// ** Funções para calcular e exibir ** //

// Função para atualização do display PCD8544-7
void atualizaDisplay(char entrada){
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	c8 2f       	mov	r28, r24
	
	if (entrada == 'l') // Mensagem: Ligando o programa
     366:	8c 36       	cpi	r24, 0x6C	; 108
     368:	29 f5       	brne	.+74     	; 0x3b4 <atualizaDisplay+0x62>
	{
		nokia_lcd_clear();
     36a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     378:	64 e1       	ldi	r22, 0x14	; 20
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("  Bem-vindo!!", 1);
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	8f e0       	ldi	r24, 0x0F	; 15
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     38a:	68 e2       	ldi	r22, 0x28	; 40
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     39c:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a0:	2f ef       	ldi	r18, 0xFF	; 255
     3a2:	83 ed       	ldi	r24, 0xD3	; 211
     3a4:	90 e3       	ldi	r25, 0x30	; 48
     3a6:	21 50       	subi	r18, 0x01	; 1
     3a8:	80 40       	sbci	r24, 0x00	; 0
     3aa:	90 40       	sbci	r25, 0x00	; 0
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <atualizaDisplay+0x54>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <atualizaDisplay+0x5e>
     3b0:	00 00       	nop
     3b2:	81 c1       	rjmp	.+770    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
		
		_delay_ms(1000);
	}
	else if (entrada == 'd') // Mensagem: Desligando o programa
     3b4:	84 36       	cpi	r24, 0x64	; 100
     3b6:	49 f5       	brne	.+82     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{
		nokia_lcd_clear();
     3b8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     3c6:	64 e1       	ldi	r22, 0x14	; 20
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(" Desligando...", 1);
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	8d e1       	ldi	r24, 0x1D	; 29
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     3d8:	68 e2       	ldi	r22, 0x28	; 40
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     3ea:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	83 ed       	ldi	r24, 0xD3	; 211
     3f2:	90 e3       	ldi	r25, 0x30	; 48
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	80 40       	sbci	r24, 0x00	; 0
     3f8:	90 40       	sbci	r25, 0x00	; 0
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <atualizaDisplay+0xa2>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <atualizaDisplay+0xac>
     3fe:	00 00       	nop
		
		_delay_ms(1000);
		
		nokia_lcd_clear();
     400:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_render();
     404:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
     408:	56 c1       	rjmp	.+684    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
		
	}
	else if (entrada == 'f') // Mensagem: Finalizando tarefa atual
     40a:	86 36       	cpi	r24, 0x66	; 102
     40c:	09 f0       	breq	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40e:	3f c0       	rjmp	.+126    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	{
		nokia_lcd_clear();
     410:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     41e:	6a e0       	ldi	r22, 0x0A	; 10
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("   Tarefa", 1);
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	8c e2       	ldi	r24, 0x2C	; 44
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(35, 20);
     430:	64 e1       	ldi	r22, 0x14	; 20
     432:	83 e2       	ldi	r24, 0x23	; 35
     434:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
     438:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tarefa_atual>
     43c:	4a e0       	ldi	r20, 0x0A	; 10
     43e:	6d e1       	ldi	r22, 0x1D	; 29
     440:	75 e0       	ldi	r23, 0x05	; 5
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 37 09 	call	0x126e	; 0x126e <__itoa_ncheck>
		itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefa_atual (int) em string (snum)
		nokia_lcd_write_string(snum, 1);
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	8d e1       	ldi	r24, 0x1D	; 29
     44c:	95 e0       	ldi	r25, 0x05	; 5
     44e:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     452:	6e e1       	ldi	r22, 0x1E	; 30
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("  Finalizada!", 1);
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	86 e3       	ldi	r24, 0x36	; 54
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     464:	68 e2       	ldi	r22, 0x28	; 40
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     476:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
     47a:	2f ef       	ldi	r18, 0xFF	; 255
     47c:	83 ed       	ldi	r24, 0xD3	; 211
     47e:	90 e3       	ldi	r25, 0x30	; 48
     480:	21 50       	subi	r18, 0x01	; 1
     482:	80 40       	sbci	r24, 0x00	; 0
     484:	90 40       	sbci	r25, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     48a:	00 00       	nop
     48c:	14 c1       	rjmp	.+552    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
		
		_delay_ms(1000);
	}
	else if (entrada == 't') // Mensagem: Deseja realizar novas tarefas?
     48e:	84 37       	cpi	r24, 0x74	; 116
     490:	71 f5       	brne	.+92     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
	{
		nokia_lcd_clear();
     492:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(25, 10);
     4a0:	6a e0       	ldi	r22, 0x0A	; 10
     4a2:	89 e1       	ldi	r24, 0x19	; 25
     4a4:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Deseja", 1);
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	84 e4       	ldi	r24, 0x44	; 68
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(5, 20);
     4b2:	64 e1       	ldi	r22, 0x14	; 20
     4b4:	85 e0       	ldi	r24, 0x05	; 5
     4b6:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("mais quantas", 1);
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	8b e4       	ldi	r24, 0x4B	; 75
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(22, 30);
     4c4:	6e e1       	ldi	r22, 0x1E	; 30
     4c6:	86 e1       	ldi	r24, 0x16	; 22
     4c8:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("tarefas?", 1);
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	88 e5       	ldi	r24, 0x58	; 88
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     4d6:	68 e2       	ldi	r22, 0x28	; 40
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     4e8:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
     4ec:	e4 c0       	rjmp	.+456    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
	}
	else if (entrada == 'p') // Mensagem: Pausando o programa
     4ee:	80 37       	cpi	r24, 0x70	; 112
     4f0:	e1 f4       	brne	.+56     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
	{
		nokia_lcd_clear();
     4f2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     500:	64 e1       	ldi	r22, 0x14	; 20
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Tarefa Pausada", 1);
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	81 e6       	ldi	r24, 0x61	; 97
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     512:	68 e2       	ldi	r22, 0x28	; 40
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     524:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
     528:	c6 c0       	rjmp	.+396    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
		
	}
	else if (entrada == 'x') // Mensagem: Dados coletados durante as atividades
     52a:	88 37       	cpi	r24, 0x78	; 120
     52c:	09 f0       	breq	.+2      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     52e:	8f c0       	rjmp	.+286    	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
	{
		nokia_lcd_clear();
     530:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("T | h:min | %", 1);
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	80 e7       	ldi	r24, 0x70	; 112
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     53e:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
		int leitura_hrs;
		int leitura_min;
		int leitura_porcentagem;
		
		// Ler informações da memória EEPROM
		for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     542:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     546:	08 2e       	mov	r0, r24
     548:	00 0c       	add	r0, r0
     54a:	99 0b       	sbc	r25, r25
     54c:	9c 01       	movw	r18, r24
     54e:	22 0f       	add	r18, r18
     550:	33 1f       	adc	r19, r19
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	99 23       	and	r25, r25
     558:	0c f4       	brge	.+2      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
     55a:	ad c0       	rjmp	.+346    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	ca e0       	ldi	r28, 0x0A	; 10
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	ee 24       	eor	r14, r14
     566:	e3 94       	inc	r14
     568:	f1 2c       	mov	r15, r1
			_EEGET(leitura_hrs, iendereco); // Lê o conteúdo do endereço indicado por iendereco para a variável leitura_hrs
     56a:	c8 01       	movw	r24, r16
     56c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <eeprom_read_byte>
     570:	b8 2e       	mov	r11, r24
			_EEGET(leitura_min, iendereco + 1); // Lê o conteúdo do endereço indicado por (iendereco + 1) para a variável leitura_min
     572:	c8 01       	movw	r24, r16
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <eeprom_read_byte>
     57a:	c8 2e       	mov	r12, r24
			_EEGET(leitura_porcentagem, iendereco + 2); // Lê o conteúdo do endereço indicado por (iendereco + 2) para a variável leitura_porcentagem
     57c:	c8 01       	movw	r24, r16
     57e:	02 96       	adiw	r24, 0x02	; 2
     580:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <eeprom_read_byte>
     584:	d8 2e       	mov	r13, r24
			
			nokia_lcd_set_cursor(0, cursor);
     586:	6c 2f       	mov	r22, r28
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
     58e:	4a e0       	ldi	r20, 0x0A	; 10
     590:	6d e1       	ldi	r22, 0x1D	; 29
     592:	75 e0       	ldi	r23, 0x05	; 5
     594:	c7 01       	movw	r24, r14
     596:	0e 94 37 09 	call	0x126e	; 0x126e <__itoa_ncheck>
			itoa(tarefa, snum, 10); // Funçaõ que converte tarefa (int) em string (snum)
			nokia_lcd_write_string(snum, 1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	8d e1       	ldi	r24, 0x1D	; 29
     59e:	95 e0       	ldi	r25, 0x05	; 5
     5a0:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(24, cursor);
     5a4:	6c 2f       	mov	r22, r28
     5a6:	88 e1       	ldi	r24, 0x18	; 24
     5a8:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
     5ac:	4a e0       	ldi	r20, 0x0A	; 10
     5ae:	6d e1       	ldi	r22, 0x1D	; 29
     5b0:	75 e0       	ldi	r23, 0x05	; 5
     5b2:	8b 2d       	mov	r24, r11
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 37 09 	call	0x126e	; 0x126e <__itoa_ncheck>
			itoa(leitura_hrs, snum, 10); // Funçaõ que converte leitura_hrs (int) em string (snum)
			nokia_lcd_write_string(snum, 1);
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	8d e1       	ldi	r24, 0x1D	; 29
     5be:	95 e0       	ldi	r25, 0x05	; 5
     5c0:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, cursor);
     5c4:	6c 2f       	mov	r22, r28
     5c6:	8e e1       	ldi	r24, 0x1E	; 30
     5c8:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(":", 1);
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	8e e7       	ldi	r24, 0x7E	; 126
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(36, cursor);
     5d6:	6c 2f       	mov	r22, r28
     5d8:	84 e2       	ldi	r24, 0x24	; 36
     5da:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
			exibe_com_2digitos(leitura_min); // Chamada da função para exibir leitura_min sempre com 2 dígitos
     5de:	8c 2d       	mov	r24, r12
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <exibe_com_2digitos>
			nokia_lcd_set_cursor(69, cursor);
     5e6:	6c 2f       	mov	r22, r28
     5e8:	85 e4       	ldi	r24, 0x45	; 69
     5ea:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
			exibe_com_2digitos(leitura_porcentagem); // Chamada da função para exibir leitura_porcentagem sempre com 2 dígitos
     5ee:	8d 2d       	mov	r24, r13
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <exibe_com_2digitos>
			nokia_lcd_render();
     5f6:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
			
			tarefa++;
     5fa:	2f ef       	ldi	r18, 0xFF	; 255
     5fc:	e2 1a       	sub	r14, r18
     5fe:	f2 0a       	sbc	r15, r18
			cursor += 10;
     600:	2a 96       	adiw	r28, 0x0a	; 10
			
			if (cursor == 50)
     602:	c2 33       	cpi	r28, 0x32	; 50
     604:	d1 05       	cpc	r29, r1
     606:	91 f4       	brne	.+36     	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
			{
				nokia_lcd_clear();
     608:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
				nokia_lcd_write_string("T | h:min | %", 1);
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	80 e7       	ldi	r24, 0x70	; 112
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	93 e2       	ldi	r25, 0x23	; 35
     61a:	24 ef       	ldi	r18, 0xF4	; 244
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	90 40       	sbci	r25, 0x00	; 0
     620:	20 40       	sbci	r18, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
     624:	00 c0       	rjmp	.+0      	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
     626:	00 00       	nop
				_delay_ms(5000);
				cursor = 10;
     628:	ca e0       	ldi	r28, 0x0A	; 10
     62a:	d0 e0       	ldi	r29, 0x00	; 0
		int leitura_hrs;
		int leitura_min;
		int leitura_porcentagem;
		
		// Ler informações da memória EEPROM
		for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     62c:	0d 5f       	subi	r16, 0xFD	; 253
     62e:	1f 4f       	sbci	r17, 0xFF	; 255
     630:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     634:	08 2e       	mov	r0, r24
     636:	00 0c       	add	r0, r0
     638:	99 0b       	sbc	r25, r25
     63a:	9c 01       	movw	r18, r24
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	82 0f       	add	r24, r18
     642:	93 1f       	adc	r25, r19
     644:	80 17       	cp	r24, r16
     646:	91 07       	cpc	r25, r17
     648:	0c f0       	brlt	.+2      	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
     64a:	8f cf       	rjmp	.-226    	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
     64c:	34 c0       	rjmp	.+104    	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
			}
		}
	}
	else // Mensagem: Atividade atual em andamento
	{
		nokia_lcd_clear();
     64e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     65c:	6a e0       	ldi	r22, 0x0A	; 10
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("   Tarefa", 1);
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	8c e2       	ldi	r24, 0x2C	; 44
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(35, 20);
     66e:	64 e1       	ldi	r22, 0x14	; 20
     670:	83 e2       	ldi	r24, 0x23	; 35
     672:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
     676:	4a e0       	ldi	r20, 0x0A	; 10
     678:	6d e1       	ldi	r22, 0x1D	; 29
     67a:	75 e0       	ldi	r23, 0x05	; 5
     67c:	8c 2f       	mov	r24, r28
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 37 09 	call	0x126e	; 0x126e <__itoa_ncheck>
		itoa(entrada, snum, 10); // Funçaõ que converte entrada (int) em string (snum)
		nokia_lcd_write_string(snum, 1);
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	8d e1       	ldi	r24, 0x1D	; 29
     688:	95 e0       	ldi	r25, 0x05	; 5
     68a:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     68e:	6e e1       	ldi	r22, 0x1E	; 30
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(" Em Andamento", 1);
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     6a0:	68 e2       	ldi	r22, 0x28	; 40
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     6b2:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
	}
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	bf 90       	pop	r11
     6c8:	08 95       	ret

000006ca <__vector_1>:

// ** Funções Interrupções ** //

// Interrupção externa 0, captura o Ligar/Desligar
ISR(INT0_vect)
{
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	2f 93       	push	r18
     6d6:	3f 93       	push	r19
     6d8:	4f 93       	push	r20
     6da:	5f 93       	push	r21
     6dc:	6f 93       	push	r22
     6de:	7f 93       	push	r23
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	ef 93       	push	r30
     6ea:	ff 93       	push	r31
	if (liga == 1)
     6ec:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <liga>
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	61 f5       	brne	.+88     	; 0x74c <__vector_1+0x82>
	{
		atualizaDisplay('l'); // Chamada de função - Mensagem: Ligando o programa
     6f4:	8c e6       	ldi	r24, 0x6C	; 108
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
		liga = 0; // Inicia o Timer
     6fc:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <liga>
		
		if(finaliza == 0 && pausa == 0)
     700:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <finaliza>
     704:	81 11       	cpse	r24, r1
     706:	0a c0       	rjmp	.+20     	; 0x71c <__vector_1+0x52>
     708:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <pausa>
     70c:	81 11       	cpse	r24, r1
     70e:	15 c0       	rjmp	.+42     	; 0x73a <__vector_1+0x70>
		{
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
     710:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tarefa_atual>
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
     71a:	1f c0       	rjmp	.+62     	; 0x75a <__vector_1+0x90>
		}
		else if (finaliza == 1)
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	69 f4       	brne	.+26     	; 0x73a <__vector_1+0x70>
		{
			finaliza = 0;
     720:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <finaliza>
			contador_tarefa++; // Incrementa contador_tarefa
     724:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     728:	8f 5f       	subi	r24, 0xFF	; 255
     72a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
     72e:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tarefa_atual>
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
     738:	10 c0       	rjmp	.+32     	; 0x75a <__vector_1+0x90>
		}
		else if (pausa == 1)
     73a:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <pausa>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	61 f4       	brne	.+24     	; 0x75a <__vector_1+0x90>
		{
			atualizaDisplay('p'); // Chamada de função - Mensagem: Pausando o programa
     742:	80 e7       	ldi	r24, 0x70	; 112
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
     74a:	07 c0       	rjmp	.+14     	; 0x75a <__vector_1+0x90>
		}
	}
	else
	{
		atualizaDisplay('d'); // Chamada de função - Mensagem: Desligando o programa
     74c:	84 e6       	ldi	r24, 0x64	; 100
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
		liga = 1; // Pausa o Timer
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <liga>
	}
}
     75a:	ff 91       	pop	r31
     75c:	ef 91       	pop	r30
     75e:	bf 91       	pop	r27
     760:	af 91       	pop	r26
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	7f 91       	pop	r23
     768:	6f 91       	pop	r22
     76a:	5f 91       	pop	r21
     76c:	4f 91       	pop	r20
     76e:	3f 91       	pop	r19
     770:	2f 91       	pop	r18
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <__vector_2>:

// Interrupção externa 1, captura o Play/Pause
ISR(INT1_vect)
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
	if (finaliza == 0 && liga == 0)
     79e:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <finaliza>
     7a2:	81 11       	cpse	r24, r1
     7a4:	18 c0       	rjmp	.+48     	; 0x7d6 <__vector_2+0x5a>
     7a6:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <liga>
     7aa:	81 11       	cpse	r24, r1
     7ac:	1d c0       	rjmp	.+58     	; 0x7e8 <__vector_2+0x6c>
	{
		if(pausa == 1)
     7ae:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <pausa>
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	41 f4       	brne	.+16     	; 0x7c6 <__vector_2+0x4a>
		{
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
     7b6:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tarefa_atual>
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
			pausa = 0; // Dá play no Timer
     7c0:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <pausa>
     7c4:	11 c0       	rjmp	.+34     	; 0x7e8 <__vector_2+0x6c>
		}
		else
		{
			atualizaDisplay('p'); // Chamada de função - Mensagem: Pausando o programa
     7c6:	80 e7       	ldi	r24, 0x70	; 112
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
			pausa = 1; // Pausa o Timer
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <pausa>
     7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <__vector_2+0x6c>
		}
	}
	else if (finaliza == 1)
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	39 f4       	brne	.+14     	; 0x7e8 <__vector_2+0x6c>
	{		
		atualizaDisplay('t'); // Chamada de função - Mensagem: Deseja realizar novas tarefas?
     7da:	84 e7       	ldi	r24, 0x74	; 116
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
		liga = 1;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <liga>
	}
}
     7e8:	ff 91       	pop	r31
     7ea:	ef 91       	pop	r30
     7ec:	bf 91       	pop	r27
     7ee:	af 91       	pop	r26
     7f0:	9f 91       	pop	r25
     7f2:	8f 91       	pop	r24
     7f4:	7f 91       	pop	r23
     7f6:	6f 91       	pop	r22
     7f8:	5f 91       	pop	r21
     7fa:	4f 91       	pop	r20
     7fc:	3f 91       	pop	r19
     7fe:	2f 91       	pop	r18
     800:	0f 90       	pop	r0
     802:	0f be       	out	0x3f, r0	; 63
     804:	0f 90       	pop	r0
     806:	1f 90       	pop	r1
     808:	18 95       	reti

0000080a <__vector_18>:
	}
}

// Função de tratamento de interrupção  Recepção USART
ISR(USART_RX_vect)
{
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	2f 93       	push	r18
     816:	3f 93       	push	r19
     818:	4f 93       	push	r20
     81a:	5f 93       	push	r21
     81c:	6f 93       	push	r22
     81e:	7f 93       	push	r23
     820:	8f 93       	push	r24
     822:	9f 93       	push	r25
     824:	af 93       	push	r26
     826:	bf 93       	push	r27
     828:	ef 93       	push	r30
     82a:	ff 93       	push	r31
	tarefas = UDR0 - 48; // UDR0 contém o dado recebido via USART
     82c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     830:	80 53       	subi	r24, 0x30	; 48
     832:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <tarefas>
	tarefa_atual = 1; // Inicializa as atividades pela tarefa 1
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <tarefa_atual>
	
	if (tarefas == 0)
     83c:	81 11       	cpse	r24, r1
     83e:	05 c0       	rjmp	.+10     	; 0x84a <__vector_18+0x40>
	{
		atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
     840:	88 e7       	ldi	r24, 0x78	; 120
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
     848:	72 c0       	rjmp	.+228    	; 0x92e <__stack+0x2f>
	}
	else if (tarefas <= 9)
     84a:	8a 30       	cpi	r24, 0x0A	; 10
     84c:	d8 f5       	brcc	.+118    	; 0x8c4 <__vector_18+0xba>
	{
		nokia_lcd_clear();
     84e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     85c:	6a e0       	ldi	r22, 0x0A	; 10
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("   Total de", 1);
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	8e e8       	ldi	r24, 0x8E	; 142
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
     86e:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <tarefas>
     872:	4a e0       	ldi	r20, 0x0A	; 10
     874:	6d e1       	ldi	r22, 0x1D	; 29
     876:	75 e0       	ldi	r23, 0x05	; 5
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 37 09 	call	0x126e	; 0x126e <__itoa_ncheck>
		itoa(tarefas, snum, 10); // Funçaõ que converte tarefas (int) em string
		nokia_lcd_set_cursor(35, 20);
     87e:	64 e1       	ldi	r22, 0x14	; 20
     880:	83 e2       	ldi	r24, 0x23	; 35
     882:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(snum, 1);
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	8d e1       	ldi	r24, 0x1D	; 29
     88a:	95 e0       	ldi	r25, 0x05	; 5
     88c:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     890:	6e e1       	ldi	r22, 0x1E	; 30
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("   Tarefas", 1);
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	8a e9       	ldi	r24, 0x9A	; 154
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     8a2:	68 e2       	ldi	r22, 0x28	; 40
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     8b4:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
		
		USART_Transmit(tarefas); // Chamada para função de envio de um frame de 5 a 8 bits
     8b8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <tarefas>
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_Transmit>
     8c2:	35 c0       	rjmp	.+106    	; 0x92e <__stack+0x2f>
	}
	else 
	{
		nokia_lcd_clear();
     8c4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(14, 10);
     8d2:	6a e0       	ldi	r22, 0x0A	; 10
     8d4:	8e e0       	ldi	r24, 0x0E	; 14
     8d6:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Invalido!!", 1);
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	85 ea       	ldi	r24, 0xA5	; 165
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
     8e4:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <tarefas>
     8e8:	4a e0       	ldi	r20, 0x0A	; 10
     8ea:	6d e1       	ldi	r22, 0x1D	; 29
     8ec:	75 e0       	ldi	r23, 0x05	; 5
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 37 09 	call	0x126e	; 0x126e <__itoa_ncheck>
		itoa(tarefas, snum, 10); // Funçaõ que converte tarefas (int) em string
		nokia_lcd_set_cursor(21, 20);
     8f4:	64 e1       	ldi	r22, 0x14	; 20
     8f6:	85 e1       	ldi	r24, 0x15	; 21
     8f8:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Digite", 1);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	80 eb       	ldi	r24, 0xB0	; 176
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(7, 30);
     906:	6e e1       	ldi	r22, 0x1E	; 30
     908:	87 e0       	ldi	r24, 0x07	; 7
     90a:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("novamente...", 1);
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	87 eb       	ldi	r24, 0xB7	; 183
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     918:	68 e2       	ldi	r22, 0x28	; 40
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
		nokia_lcd_render();
     92a:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
	}
}
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	bf 91       	pop	r27
     934:	af 91       	pop	r26
     936:	9f 91       	pop	r25
     938:	8f 91       	pop	r24
     93a:	7f 91       	pop	r23
     93c:	6f 91       	pop	r22
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <calcula_porcentagem>:
}

// Função para calcular a porcentagem do tempo total gasto em cada tarefa
void calcula_porcentagem()
{
	int total_minutos = (vetor_hrs[contador_tarefa] * 60) + vetor_min[contador_tarefa]; // Total de minutos utilizados para realizar a tarefa atual
     950:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     954:	08 2e       	mov	r0, r24
     956:	00 0c       	add	r0, r0
     958:	99 0b       	sbc	r25, r25
	vetor_porcentagem[contador_tarefa] = (total_minutos * 100) / 360; // Regra de 3 para definir a porcentagem de tempo gasto em cada tarefa, tendo que 6h = 100%
     95a:	fc 01       	movw	r30, r24
     95c:	ed 5a       	subi	r30, 0xAD	; 173
     95e:	fb 4f       	sbci	r31, 0xFB	; 251
}

// Função para calcular a porcentagem do tempo total gasto em cada tarefa
void calcula_porcentagem()
{
	int total_minutos = (vetor_hrs[contador_tarefa] * 60) + vetor_min[contador_tarefa]; // Total de minutos utilizados para realizar a tarefa atual
     960:	dc 01       	movw	r26, r24
     962:	a1 51       	subi	r26, 0x11	; 17
     964:	bc 4f       	sbci	r27, 0xFC	; 252
	vetor_porcentagem[contador_tarefa] = (total_minutos * 100) / 360; // Regra de 3 para definir a porcentagem de tempo gasto em cada tarefa, tendo que 6h = 100%
     966:	4c 91       	ld	r20, X
}

// Função para calcular a porcentagem do tempo total gasto em cada tarefa
void calcula_porcentagem()
{
	int total_minutos = (vetor_hrs[contador_tarefa] * 60) + vetor_min[contador_tarefa]; // Total de minutos utilizados para realizar a tarefa atual
     968:	dc 01       	movw	r26, r24
     96a:	a7 54       	subi	r26, 0x47	; 71
     96c:	bb 4f       	sbci	r27, 0xFB	; 251
	vetor_porcentagem[contador_tarefa] = (total_minutos * 100) / 360; // Regra de 3 para definir a porcentagem de tempo gasto em cada tarefa, tendo que 6h = 100%
     96e:	2c 91       	ld	r18, X
     970:	02 2e       	mov	r0, r18
     972:	00 0c       	add	r0, r0
     974:	33 0b       	sbc	r19, r19
     976:	8c e3       	ldi	r24, 0x3C	; 60
     978:	48 02       	muls	r20, r24
     97a:	20 0d       	add	r18, r0
     97c:	31 1d       	adc	r19, r1
     97e:	11 24       	eor	r1, r1
     980:	44 e6       	ldi	r20, 0x64	; 100
     982:	42 9f       	mul	r20, r18
     984:	c0 01       	movw	r24, r0
     986:	43 9f       	mul	r20, r19
     988:	90 0d       	add	r25, r0
     98a:	11 24       	eor	r1, r1
     98c:	68 e6       	ldi	r22, 0x68	; 104
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	0e 94 ef 08 	call	0x11de	; 0x11de <__divmodhi4>
     994:	60 83       	st	Z, r22
     996:	08 95       	ret

00000998 <calcula_tempo_da_tarefa>:
}

// Função que calcula o tempo em que cada tarefa foi realizada
void calcula_tempo_da_tarefa()
{
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
	int teste = hrs - vetor_hrs[contador_tarefa - 1]; // Variável para testar se a atividade anterior e a atual ocorreram na mesma hora
     99e:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <hrs>
     9a2:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <__data_end>
     9a6:	0e 2e       	mov	r0, r30
     9a8:	00 0c       	add	r0, r0
     9aa:	ff 0b       	sbc	r31, r31
     9ac:	bf 01       	movw	r22, r30
     9ae:	61 50       	subi	r22, 0x01	; 1
     9b0:	71 09       	sbc	r23, r1
     9b2:	db 01       	movw	r26, r22
     9b4:	a1 51       	subi	r26, 0x11	; 17
     9b6:	bc 4f       	sbci	r27, 0xFC	; 252
     9b8:	2c 91       	ld	r18, X
	if (teste == 0)
     9ba:	42 13       	cpse	r20, r18
     9bc:	0f c0       	rjmp	.+30     	; 0x9dc <calcula_tempo_da_tarefa+0x44>
	{
		// Faz as subtrações dos valores de hrs e min atuais pelo valores referentes ao fim da última tarefa
		vetor_hrs[contador_tarefa] = hrs - vetor_hrs[contador_tarefa - 1];
     9be:	df 01       	movw	r26, r30
     9c0:	a1 51       	subi	r26, 0x11	; 17
     9c2:	bc 4f       	sbci	r27, 0xFC	; 252
     9c4:	1c 92       	st	X, r1
		vetor_min[contador_tarefa] = min - vetor_min[contador_tarefa - 1];
     9c6:	e7 54       	subi	r30, 0x47	; 71
     9c8:	fb 4f       	sbci	r31, 0xFB	; 251
     9ca:	db 01       	movw	r26, r22
     9cc:	a7 54       	subi	r26, 0x47	; 71
     9ce:	bb 4f       	sbci	r27, 0xFB	; 251
     9d0:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <min>
     9d4:	9c 91       	ld	r25, X
     9d6:	89 1b       	sub	r24, r25
     9d8:	80 83       	st	Z, r24
     9da:	32 c0       	rjmp	.+100    	; 0xa40 <calcula_tempo_da_tarefa+0xa8>
	}
	else
	{
		uint16_t min_abs_totais = (hrs * 60) + min; // Total de minutos desde o início do Timer
		uint16_t min_abs_tarefa_anterior = (vetor_hrs[contador_tarefa - 1] * 60) + vetor_min[contador_tarefa - 1]; // Minutos absolutos da última tarefa
		uint16_t min_abs_tarefa_atual = min_abs_totais - min_abs_tarefa_anterior; // Minutos absolutos da tarefa atual
     9dc:	1c e3       	ldi	r17, 0x3C	; 60
     9de:	41 03       	mulsu	r20, r17
     9e0:	a0 01       	movw	r20, r0
     9e2:	11 24       	eor	r1, r1
     9e4:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <min>
     9e8:	48 0f       	add	r20, r24
     9ea:	51 1d       	adc	r21, r1
     9ec:	87 fd       	sbrc	r24, 7
     9ee:	5a 95       	dec	r21
     9f0:	21 03       	mulsu	r18, r17
     9f2:	c0 01       	movw	r24, r0
     9f4:	11 24       	eor	r1, r1
		vetor_min[contador_tarefa] = min - vetor_min[contador_tarefa - 1];
	}
	else
	{
		uint16_t min_abs_totais = (hrs * 60) + min; // Total de minutos desde o início do Timer
		uint16_t min_abs_tarefa_anterior = (vetor_hrs[contador_tarefa - 1] * 60) + vetor_min[contador_tarefa - 1]; // Minutos absolutos da última tarefa
     9f6:	db 01       	movw	r26, r22
     9f8:	a7 54       	subi	r26, 0x47	; 71
     9fa:	bb 4f       	sbci	r27, 0xFB	; 251
		uint16_t min_abs_tarefa_atual = min_abs_totais - min_abs_tarefa_anterior; // Minutos absolutos da tarefa atual
     9fc:	2c 91       	ld	r18, X
     9fe:	82 0f       	add	r24, r18
     a00:	91 1d       	adc	r25, r1
     a02:	27 fd       	sbrc	r18, 7
     a04:	9a 95       	dec	r25
     a06:	48 1b       	sub	r20, r24
     a08:	59 0b       	sbc	r21, r25
		
		// Salvar hrs e min da tarefa atual nos arrays vetor_hrs[] e vetor_min[]
		vetor_hrs[contador_tarefa] = min_abs_tarefa_atual / 60;
     a0a:	ef 01       	movw	r28, r30
     a0c:	c1 51       	subi	r28, 0x11	; 17
     a0e:	dc 4f       	sbci	r29, 0xFC	; 252
     a10:	9a 01       	movw	r18, r20
     a12:	a9 e8       	ldi	r26, 0x89	; 137
     a14:	b8 e8       	ldi	r27, 0x88	; 136
     a16:	0e 94 09 09 	call	0x1212	; 0x1212 <__umulhisi3>
     a1a:	96 95       	lsr	r25
     a1c:	87 95       	ror	r24
     a1e:	92 95       	swap	r25
     a20:	82 95       	swap	r24
     a22:	8f 70       	andi	r24, 0x0F	; 15
     a24:	89 27       	eor	r24, r25
     a26:	9f 70       	andi	r25, 0x0F	; 15
     a28:	89 27       	eor	r24, r25
     a2a:	88 83       	st	Y, r24
		vetor_min[contador_tarefa] = min_abs_tarefa_atual % 60;
     a2c:	e7 54       	subi	r30, 0x47	; 71
     a2e:	fb 4f       	sbci	r31, 0xFB	; 251
     a30:	18 9f       	mul	r17, r24
     a32:	90 01       	movw	r18, r0
     a34:	19 9f       	mul	r17, r25
     a36:	30 0d       	add	r19, r0
     a38:	11 24       	eor	r1, r1
     a3a:	42 1b       	sub	r20, r18
     a3c:	53 0b       	sbc	r21, r19
     a3e:	40 83       	st	Z, r20
	}
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	08 95       	ret

00000a48 <__vector_3>:
	}
}

// Interrupção 0 por mudança de pino, captura o Finalizar Tarefa
ISR(PCINT0_vect)
{
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
	if (pcint0_int == 0 && pausa == 0 && liga == 0)
     a7a:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <pcint0_int>
     a7e:	81 11       	cpse	r24, r1
     a80:	a5 c0       	rjmp	.+330    	; 0xbcc <__vector_3+0x184>
     a82:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <pausa>
     a86:	81 11       	cpse	r24, r1
     a88:	a5 c0       	rjmp	.+330    	; 0xbd4 <__vector_3+0x18c>
     a8a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <liga>
     a8e:	81 11       	cpse	r24, r1
     a90:	a1 c0       	rjmp	.+322    	; 0xbd4 <__vector_3+0x18c>
	{
		pcint0_int ++;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <pcint0_int>
		
		if (tarefa_atual == tarefas) // Não há mais tarefas para realizar
     a98:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tarefa_atual>
     a9c:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <tarefas>
     aa0:	89 13       	cpse	r24, r25
     aa2:	4e c0       	rjmp	.+156    	; 0xb40 <__vector_3+0xf8>
		{	
			atualizaDisplay('f'); // Chamada de função - Mensagem: Finalizando tarefa atual	
     aa4:	86 e6       	ldi	r24, 0x66	; 102
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
				
			calcula_tempo_da_tarefa(); // Chamada da função que calcula o tempo em que cada tarefa foi realizada
     aac:	0e 94 cc 04 	call	0x998	; 0x998 <calcula_tempo_da_tarefa>
			calcula_porcentagem(); // Chamada da função que calcula a porcentagem do tempo total gasto em cada tarefa
     ab0:	0e 94 a8 04 	call	0x950	; 0x950 <calcula_porcentagem>
			
			int contador = 0; // Contador dos vetores vetor_hrs[] e vetor_min[]
		
			// Salvar os arrays vetor_hrs[], vetor_min[] e vetor_porcentagem[] na EEPROM
			for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     ab4:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     ab8:	08 2e       	mov	r0, r24
     aba:	00 0c       	add	r0, r0
     abc:	99 0b       	sbc	r25, r25
     abe:	9c 01       	movw	r18, r24
     ac0:	22 0f       	add	r18, r18
     ac2:	33 1f       	adc	r19, r19
     ac4:	82 0f       	add	r24, r18
     ac6:	93 1f       	adc	r25, r19
     ac8:	99 23       	and	r25, r25
     aca:	94 f1       	brlt	.+100    	; 0xb30 <__vector_3+0xe8>
     acc:	0f 2e       	mov	r0, r31
     ace:	ff ee       	ldi	r31, 0xEF	; 239
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f3 e0       	ldi	r31, 0x03	; 3
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	0f 2e       	mov	r0, r31
     ada:	f9 eb       	ldi	r31, 0xB9	; 185
     adc:	ef 2e       	mov	r14, r31
     ade:	f4 e0       	ldi	r31, 0x04	; 4
     ae0:	ff 2e       	mov	r15, r31
     ae2:	f0 2d       	mov	r31, r0
     ae4:	03 e5       	ldi	r16, 0x53	; 83
     ae6:	14 e0       	ldi	r17, 0x04	; 4
     ae8:	c0 e0       	ldi	r28, 0x00	; 0
     aea:	d0 e0       	ldi	r29, 0x00	; 0
				_EEPUT(iendereco, vetor_hrs[contador]); // Gravando o conteúdo de vetor_hrs[contador] no endereço iendereco da EEPROM
     aec:	f6 01       	movw	r30, r12
     aee:	61 91       	ld	r22, Z+
     af0:	6f 01       	movw	r12, r30
     af2:	ce 01       	movw	r24, r28
     af4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <eeprom_write_byte>
				_EEPUT(iendereco + 1, vetor_min[contador]); // Gravando o conteúdo de vetor_min[contador] no endereço (iendereco + 1) da EEPROM
     af8:	f7 01       	movw	r30, r14
     afa:	61 91       	ld	r22, Z+
     afc:	7f 01       	movw	r14, r30
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	0e 94 74 09 	call	0x12e8	; 0x12e8 <eeprom_write_byte>
				_EEPUT(iendereco + 2, vetor_porcentagem[contador]); // Gravando o conteúdo de vetor_porcentagem[contador] no endereço (iendereco + 2) da EEPROM
     b06:	f8 01       	movw	r30, r16
     b08:	61 91       	ld	r22, Z+
     b0a:	8f 01       	movw	r16, r30
     b0c:	ce 01       	movw	r24, r28
     b0e:	02 96       	adiw	r24, 0x02	; 2
     b10:	0e 94 74 09 	call	0x12e8	; 0x12e8 <eeprom_write_byte>
			calcula_porcentagem(); // Chamada da função que calcula a porcentagem do tempo total gasto em cada tarefa
			
			int contador = 0; // Contador dos vetores vetor_hrs[] e vetor_min[]
		
			// Salvar os arrays vetor_hrs[], vetor_min[] e vetor_porcentagem[] na EEPROM
			for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     b14:	23 96       	adiw	r28, 0x03	; 3
     b16:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     b1a:	08 2e       	mov	r0, r24
     b1c:	00 0c       	add	r0, r0
     b1e:	99 0b       	sbc	r25, r25
     b20:	9c 01       	movw	r18, r24
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	8c 17       	cp	r24, r28
     b2c:	9d 07       	cpc	r25, r29
     b2e:	f4 f6       	brge	.-68     	; 0xaec <__vector_3+0xa4>
				_EEPUT(iendereco + 1, vetor_min[contador]); // Gravando o conteúdo de vetor_min[contador] no endereço (iendereco + 1) da EEPROM
				_EEPUT(iendereco + 2, vetor_porcentagem[contador]); // Gravando o conteúdo de vetor_porcentagem[contador] no endereço (iendereco + 2) da EEPROM
				contador++; // Incrementa o contador
			}
	
			atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
     b30:	88 e7       	ldi	r24, 0x78	; 120
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
			finaliza = 1; // Finaliza contagem do Timer
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <finaliza>
     b3e:	4a c0       	rjmp	.+148    	; 0xbd4 <__vector_3+0x18c>
		}
		else
		{
			// Salvar hrs e min da tarefa atual nos arrays vetor_hrs[] e vetor_min[]
			if (tarefa_atual == 1)
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	91 f4       	brne	.+36     	; 0xb68 <__vector_3+0x120>
			{
				vetor_hrs[contador_tarefa] = hrs;
     b44:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     b48:	08 2e       	mov	r0, r24
     b4a:	00 0c       	add	r0, r0
     b4c:	99 0b       	sbc	r25, r25
     b4e:	fc 01       	movw	r30, r24
     b50:	e1 51       	subi	r30, 0x11	; 17
     b52:	fc 4f       	sbci	r31, 0xFC	; 252
     b54:	20 91 ec 03 	lds	r18, 0x03EC	; 0x8003ec <hrs>
     b58:	20 83       	st	Z, r18
				vetor_min[contador_tarefa] = min;
     b5a:	fc 01       	movw	r30, r24
     b5c:	e7 54       	subi	r30, 0x47	; 71
     b5e:	fb 4f       	sbci	r31, 0xFB	; 251
     b60:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <min>
     b64:	20 83       	st	Z, r18
     b66:	1e c0       	rjmp	.+60     	; 0xba4 <__vector_3+0x15c>
			}
			else
			{
				vetor_hrs[contador_tarefa] = hrs - vetor_hrs[contador_tarefa - 1];
     b68:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     b6c:	08 2e       	mov	r0, r24
     b6e:	00 0c       	add	r0, r0
     b70:	99 0b       	sbc	r25, r25
     b72:	9c 01       	movw	r18, r24
     b74:	21 50       	subi	r18, 0x01	; 1
     b76:	31 09       	sbc	r19, r1
     b78:	fc 01       	movw	r30, r24
     b7a:	e1 51       	subi	r30, 0x11	; 17
     b7c:	fc 4f       	sbci	r31, 0xFC	; 252
     b7e:	d9 01       	movw	r26, r18
     b80:	a1 51       	subi	r26, 0x11	; 17
     b82:	bc 4f       	sbci	r27, 0xFC	; 252
     b84:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <hrs>
     b88:	5c 91       	ld	r21, X
     b8a:	45 1b       	sub	r20, r21
     b8c:	40 83       	st	Z, r20
				vetor_min[contador_tarefa] = min - vetor_min[contador_tarefa - 1];
     b8e:	fc 01       	movw	r30, r24
     b90:	e7 54       	subi	r30, 0x47	; 71
     b92:	fb 4f       	sbci	r31, 0xFB	; 251
     b94:	d9 01       	movw	r26, r18
     b96:	a7 54       	subi	r26, 0x47	; 71
     b98:	bb 4f       	sbci	r27, 0xFB	; 251
     b9a:	40 91 b7 04 	lds	r20, 0x04B7	; 0x8004b7 <min>
     b9e:	2c 91       	ld	r18, X
     ba0:	42 1b       	sub	r20, r18
     ba2:	40 83       	st	Z, r20
			}	
			calcula_porcentagem();	
     ba4:	0e 94 a8 04 	call	0x950	; 0x950 <calcula_porcentagem>
			contador_tarefa++;
     ba8:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
						
			atualizaDisplay('f'); // Chamada de função - Mensagem: Finalizando tarefa atual
     bb2:	86 e6       	ldi	r24, 0x66	; 102
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
			tarefa_atual++; // Passa para a próxima tarefa
     bba:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tarefa_atual>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <tarefa_atual>
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__vector_3+0x18c>
		}
	}
	else if (pcint0_int == 1)
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	11 f4       	brne	.+4      	; 0xbd4 <__vector_3+0x18c>
	{
		pcint0_int = 0;
     bd0:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <pcint0_int>
	}
}
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <seleciona_saida_demux>:

// ** Funções LED ** //

// Função que seleciona a saída do DEMUX
void seleciona_saida_demux()
{
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
	switch(hrs)
     c16:	e0 91 ec 03 	lds	r30, 0x03EC	; 0x8003ec <hrs>
     c1a:	8e 2f       	mov	r24, r30
     c1c:	ee 0f       	add	r30, r30
     c1e:	99 0b       	sbc	r25, r25
     c20:	aa 0b       	sbc	r26, r26
     c22:	bb 0b       	sbc	r27, r27
     c24:	87 30       	cpi	r24, 0x07	; 7
     c26:	91 05       	cpc	r25, r1
     c28:	08 f0       	brcs	.+2      	; 0xc2c <seleciona_saida_demux+0x26>
     c2a:	74 c0       	rjmp	.+232    	; 0xd14 <seleciona_saida_demux+0x10e>
     c2c:	fc 01       	movw	r30, r24
     c2e:	ec 5c       	subi	r30, 0xCC	; 204
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__tablejump2__>
	{
		case 0:
			// Seleciona a saída do DEMUX: 00
			PORTC &= 0b0111111; // S0 = PC6 = 0
     c36:	88 b1       	in	r24, 0x08	; 8
     c38:	8f 73       	andi	r24, 0x3F	; 63
     c3a:	88 b9       	out	0x08, r24	; 8
			PORTD &= 0b11111100; // S1 = PD0 = 0 | S2 = PD1 = 0
     c3c:	8b b1       	in	r24, 0x0b	; 11
     c3e:	8c 7f       	andi	r24, 0xFC	; 252
     c40:	8b b9       	out	0x0b, r24	; 11
			break;
     c42:	68 c0       	rjmp	.+208    	; 0xd14 <seleciona_saida_demux+0x10e>
		case 1:
			// Seleciona a saída do DEMUX: 01
			PORTC |= 0b1000000; // S0 = PC6 = 1
     c44:	46 9a       	sbi	0x08, 6	; 8
			PORTD &= 0b11111100; // S1 = PD0 = 0 | S2 = PD1 = 0
     c46:	8b b1       	in	r24, 0x0b	; 11
     c48:	8c 7f       	andi	r24, 0xFC	; 252
     c4a:	8b b9       	out	0x0b, r24	; 11
			break;
     c4c:	63 c0       	rjmp	.+198    	; 0xd14 <seleciona_saida_demux+0x10e>
		case 2:
			// Seleciona a saída do DEMUX: 02
			PORTC &= 0b0111111; // S0 = PC6 = 0
     c4e:	88 b1       	in	r24, 0x08	; 8
     c50:	8f 73       	andi	r24, 0x3F	; 63
     c52:	88 b9       	out	0x08, r24	; 8
			PORTD |= 0b00000001;  // S1 = PD0 = 1
     c54:	58 9a       	sbi	0x0b, 0	; 11
			PORTD &= 0b11111101; // S2 = PD1 = 0
     c56:	59 98       	cbi	0x0b, 1	; 11
			break;
     c58:	5d c0       	rjmp	.+186    	; 0xd14 <seleciona_saida_demux+0x10e>
		case 3:
			// Seleciona a saída do DEMUX: 03
			PORTC |= 0b1000000; // S0 = PC6 = 1
     c5a:	46 9a       	sbi	0x08, 6	; 8
			PORTD |= 0b00000001; // S1 = PD0 = 1
     c5c:	58 9a       	sbi	0x0b, 0	; 11
			PORTD &= 0b11111101; // S2 = PD1 = 0
     c5e:	59 98       	cbi	0x0b, 1	; 11
			break;
     c60:	59 c0       	rjmp	.+178    	; 0xd14 <seleciona_saida_demux+0x10e>
		case 4:
			// Seleciona a saída do DEMUX: 04
			PORTC &= 0b0111111; // S0 = PC6 = 0
     c62:	88 b1       	in	r24, 0x08	; 8
     c64:	8f 73       	andi	r24, 0x3F	; 63
     c66:	88 b9       	out	0x08, r24	; 8
			PORTD &= 0b11111110; // S1 = PD0 = 0
     c68:	58 98       	cbi	0x0b, 0	; 11
			PORTD |= 0b00000010; // S2 = PD1 = 1
     c6a:	59 9a       	sbi	0x0b, 1	; 11
			break;
     c6c:	53 c0       	rjmp	.+166    	; 0xd14 <seleciona_saida_demux+0x10e>
		case 5:
			// Seleciona a saída do DEMUX: 05
			PORTC |= 0b1000000; // S0 = PC6 = 1
     c6e:	46 9a       	sbi	0x08, 6	; 8
			PORTD &= 0b11111110; // S1 = PD0 = 0
     c70:	58 98       	cbi	0x0b, 0	; 11
			PORTD |= 0b00000010; // S2 = PD1 = 1
     c72:	59 9a       	sbi	0x0b, 1	; 11
			break;
     c74:	4f c0       	rjmp	.+158    	; 0xd14 <seleciona_saida_demux+0x10e>
		case 6:
			// Seleciona a saída do DEMUX: 06
			PORTC &= 0b0111111; // S0 = PC6 = 0
     c76:	88 b1       	in	r24, 0x08	; 8
     c78:	8f 73       	andi	r24, 0x3F	; 63
     c7a:	88 b9       	out	0x08, r24	; 8
			PORTD |= 0b00000011; // S1 = PD0 = 1 | S2 = PD1 = 1
     c7c:	8b b1       	in	r24, 0x0b	; 11
     c7e:	83 60       	ori	r24, 0x03	; 3
     c80:	8b b9       	out	0x0b, r24	; 11
			
			calcula_tempo_da_tarefa(); // Chamada da função que calcula o tempo em que cada tarefa foi realizada
     c82:	0e 94 cc 04 	call	0x998	; 0x998 <calcula_tempo_da_tarefa>
			calcula_porcentagem(); // Chamada da função que calcula a porcentagem do tempo total gasto em cada tarefa
     c86:	0e 94 a8 04 	call	0x950	; 0x950 <calcula_porcentagem>
			
			int contador = 0; // Contador dos vetores vetor_hrs[] e vetor_min[]
			
			// Salvar os arrays vetor_hrs[], vetor_min[] e vetor_porcentagem[] na EEPROM
			for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     c8a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     c8e:	08 2e       	mov	r0, r24
     c90:	00 0c       	add	r0, r0
     c92:	99 0b       	sbc	r25, r25
     c94:	9c 01       	movw	r18, r24
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	82 0f       	add	r24, r18
     c9c:	93 1f       	adc	r25, r19
     c9e:	99 23       	and	r25, r25
     ca0:	94 f1       	brlt	.+100    	; 0xd06 <seleciona_saida_demux+0x100>
     ca2:	0f 2e       	mov	r0, r31
     ca4:	ff ee       	ldi	r31, 0xEF	; 239
     ca6:	cf 2e       	mov	r12, r31
     ca8:	f3 e0       	ldi	r31, 0x03	; 3
     caa:	df 2e       	mov	r13, r31
     cac:	f0 2d       	mov	r31, r0
     cae:	0f 2e       	mov	r0, r31
     cb0:	f9 eb       	ldi	r31, 0xB9	; 185
     cb2:	ef 2e       	mov	r14, r31
     cb4:	f4 e0       	ldi	r31, 0x04	; 4
     cb6:	ff 2e       	mov	r15, r31
     cb8:	f0 2d       	mov	r31, r0
     cba:	03 e5       	ldi	r16, 0x53	; 83
     cbc:	14 e0       	ldi	r17, 0x04	; 4
     cbe:	c0 e0       	ldi	r28, 0x00	; 0
     cc0:	d0 e0       	ldi	r29, 0x00	; 0
				_EEPUT(iendereco, vetor_hrs[contador]); // Gravando o conteúdo de vetor_hrs[contador] no endereço iendereco da EEPROM
     cc2:	f6 01       	movw	r30, r12
     cc4:	61 91       	ld	r22, Z+
     cc6:	6f 01       	movw	r12, r30
     cc8:	ce 01       	movw	r24, r28
     cca:	0e 94 74 09 	call	0x12e8	; 0x12e8 <eeprom_write_byte>
				_EEPUT(iendereco + 1, vetor_min[contador]); // Gravando o conteúdo de vetor_min[contador] no endereço (iendereco + 1) da EEPROM
     cce:	f7 01       	movw	r30, r14
     cd0:	61 91       	ld	r22, Z+
     cd2:	7f 01       	movw	r14, r30
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <eeprom_write_byte>
				_EEPUT(iendereco + 2, vetor_porcentagem[contador]); // Gravando o conteúdo de vetor_porcentagem[contador] no endereço (iendereco + 2) da EEPROM
     cdc:	f8 01       	movw	r30, r16
     cde:	61 91       	ld	r22, Z+
     ce0:	8f 01       	movw	r16, r30
     ce2:	ce 01       	movw	r24, r28
     ce4:	02 96       	adiw	r24, 0x02	; 2
     ce6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <eeprom_write_byte>
			calcula_porcentagem(); // Chamada da função que calcula a porcentagem do tempo total gasto em cada tarefa
			
			int contador = 0; // Contador dos vetores vetor_hrs[] e vetor_min[]
			
			// Salvar os arrays vetor_hrs[], vetor_min[] e vetor_porcentagem[] na EEPROM
			for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     cea:	23 96       	adiw	r28, 0x03	; 3
     cec:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     cf0:	08 2e       	mov	r0, r24
     cf2:	00 0c       	add	r0, r0
     cf4:	99 0b       	sbc	r25, r25
     cf6:	9c 01       	movw	r18, r24
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	82 0f       	add	r24, r18
     cfe:	93 1f       	adc	r25, r19
     d00:	8c 17       	cp	r24, r28
     d02:	9d 07       	cpc	r25, r29
     d04:	f4 f6       	brge	.-68     	; 0xcc2 <seleciona_saida_demux+0xbc>
				_EEPUT(iendereco + 1, vetor_min[contador]); // Gravando o conteúdo de vetor_min[contador] no endereço (iendereco + 1) da EEPROM
				_EEPUT(iendereco + 2, vetor_porcentagem[contador]); // Gravando o conteúdo de vetor_porcentagem[contador] no endereço (iendereco + 2) da EEPROM
				contador++; // Incrementa o contador
			}
			
			finaliza = 1; // Finaliza contagem do Timer
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <finaliza>
			atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
     d0c:	88 e7       	ldi	r24, 0x78	; 120
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 a9 01 	call	0x352	; 0x352 <atualizaDisplay>
			break;
		default:
			break;
	}
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	08 95       	ret

00000d26 <__vector_7>:
	}
}

// Interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
ISR(TIMER2_COMPA_vect)
{
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
	if (pausa != 1 && finaliza != 1 && liga != 1) // Incrementa o timer se as flags: pausa = 0; finaliza = 0; e liga = 0;
     d48:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <pausa>
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <__vector_7+0x2c>
     d50:	41 c0       	rjmp	.+130    	; 0xdd4 <__vector_7+0xae>
     d52:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <finaliza>
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	e9 f1       	breq	.+122    	; 0xdd4 <__vector_7+0xae>
     d5a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <liga>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	c9 f1       	breq	.+114    	; 0xdd4 <__vector_7+0xae>
	{
		mili += 100; // Incrementa os milissegundos
     d62:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <mili>
     d66:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <mili+0x1>
     d6a:	8c 59       	subi	r24, 0x9C	; 156
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
		
		if (mili >= 1000)
     d6e:	88 3e       	cpi	r24, 0xE8	; 232
     d70:	23 e0       	ldi	r18, 0x03	; 3
     d72:	92 07       	cpc	r25, r18
     d74:	2c f4       	brge	.+10     	; 0xd80 <__vector_7+0x5a>
// Interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
ISR(TIMER2_COMPA_vect)
{
	if (pausa != 1 && finaliza != 1 && liga != 1) // Incrementa o timer se as flags: pausa = 0; finaliza = 0; e liga = 0;
	{
		mili += 100; // Incrementa os milissegundos
     d76:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <mili+0x1>
     d7a:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <mili>
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <__vector_7+0x6c>
		
		if (mili >= 1000)
		{
			mili = 0;
     d80:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <mili+0x1>
     d84:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <mili>
			seg++; // Incrementa os segundos
     d88:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <seg>
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <seg>
		}
		if (seg >= 60)
     d92:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <seg>
     d96:	8c 33       	cpi	r24, 0x3C	; 60
     d98:	4c f0       	brlt	.+18     	; 0xdac <__vector_7+0x86>
		{
			seg = 0;
     d9a:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <seg>
			min++; // Incrementa os minutos
     d9e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <min>
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <min>
			define_porcentagem_PWM(); // Chamada para função que define a porcentagem do sinal PWM
     da8:	0e 94 4a 01 	call	0x294	; 0x294 <define_porcentagem_PWM>
		}		
		if (min >= 60)
     dac:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <min>
     db0:	8c 33       	cpi	r24, 0x3C	; 60
     db2:	84 f0       	brlt	.+32     	; 0xdd4 <__vector_7+0xae>
		{
			min = 0;
     db4:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <min>
			hrs++; // Incrementa as horas
     db8:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <hrs>
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <hrs>
			
			OCR0A = 0; // Reseta PWM
     dc2:	17 bc       	out	0x27, r1	; 39
     dc4:	8f e3       	ldi	r24, 0x3F	; 63
     dc6:	9c e9       	ldi	r25, 0x9C	; 156
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <__vector_7+0xa2>
     dcc:	00 c0       	rjmp	.+0      	; 0xdce <__vector_7+0xa8>
     dce:	00 00       	nop
			_delay_ms(10);
			seleciona_saida_demux(); // Chamada para função que seleciona a saída do DEMUX
     dd0:	0e 94 03 06 	call	0xc06	; 0xc06 <seleciona_saida_demux>
		}
	}
}
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <main>:
}


int main(void)
{
	DDRB = 0b11111110; // Define todos os pinos da porta B como saída (exceto B0)
     df6:	8e ef       	ldi	r24, 0xFE	; 254
     df8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001; // Habilita pull-up do pino PB0
     dfa:	c1 e0       	ldi	r28, 0x01	; 1
     dfc:	c5 b9       	out	0x05, r28	; 5
	DDRD = 0b11110011; // Define os pinos da porta D: D0-D3 como entradas; D4-D7 como saída
     dfe:	83 ef       	ldi	r24, 0xF3	; 243
     e00:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00001100; // Habilita pull-ups dos pinos PD2 e PD3
     e02:	8c e0       	ldi	r24, 0x0C	; 12
     e04:	8b b9       	out	0x0b, r24	; 11
	
	// Variáveis inicializadas
	mili = 0;
     e06:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <mili+0x1>
     e0a:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <mili>
	seg = 0;
     e0e:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <seg>
	min = 0;
     e12:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <min>
	hrs = 0;
     e16:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <hrs>
	liga = 1;
     e1a:	c0 93 ed 03 	sts	0x03ED, r28	; 0x8003ed <liga>
	pausa = 0;
     e1e:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <pausa>
	finaliza = 0;
     e22:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <finaliza>
	seleciona_saida_demux(); // Chamada para função que seleciona a saída do DEMUX
     e26:	0e 94 03 06 	call	0xc06	; 0xc06 <seleciona_saida_demux>
	
	USART_Init(MYUBRR); // Chamada para função que inicializa a USART
     e2a:	87 e6       	ldi	r24, 0x67	; 103
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <USART_Init>
	
	// Fast PWM, TOP = 0xFF, OC0A habilitado
	TCCR0A = 0b10000011; // PWM não invertido no pino OC0A
     e32:	83 e8       	ldi	r24, 0x83	; 131
     e34:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101; // Liga TC0, prescaler = 1024, fpwm = f0sc/(256*prescaler) = 16MHz/(256*1024) = 61Hz
     e36:	85 e0       	ldi	r24, 0x05	; 5
     e38:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0; // Controle do ciclo ativo do PWM 0C0A
     e3a:	17 bc       	out	0x27, r1	; 39
	
	// Configuração das Interrupções Externas
	EICRA = 0b00001010;// Interrupções externas INT0 e INT1 na borda de descida
     e3c:	8a e0       	ldi	r24, 0x0A	; 10
     e3e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011;// Habilita as interrupções externas INT0 e INT1
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	9d bb       	out	0x1d, r25	; 29
	
	// Configuração da Interrupção 0 por mudança de pino
	PCICR = 0b00000001; // Enable pin change interrupt 0
     e46:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = 0b00000001; // Pin change enable mask 0
     e4a:	c0 93 6b 00 	sts	0x006B, r28	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
	// Configuração dos Timers
	TCCR2A = 0b00000010; // Habilita modo CTC do TC2
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000011; // Liga TC2 com prescaler = 64
     e54:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 249;		 // Ajusta o comparador para o TC2 contar até 249
     e58:	99 ef       	ldi	r25, 0xF9	; 249
     e5a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = 0b00000010; // Habilita a interrupção na igualdade de comparação com OCR2A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
     e5e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	sei(); // Habilita interrupções globais, ativando o bit I do SREG
     e62:	78 94       	sei
	
	nokia_lcd_init(); // Inicializa o LCD
     e64:	0e 94 84 07 	call	0xf08	; 0xf08 <nokia_lcd_init>
	nokia_lcd_clear();  // Limpa o display
     e68:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nokia_lcd_clear>
	nokia_lcd_write_string("--------------", 1);  // Informação que será exibida no display e tamanho da fonte
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 10); // Move o cursor
     e76:	6a e0       	ldi	r22, 0x0A	; 10
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Digite quantas", 1);
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	84 ec       	ldi	r24, 0xC4	; 196
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 20);
     e88:	64 e1       	ldi	r22, 0x14	; 20
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(" tarefas vai", 1);
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	83 ed       	ldi	r24, 0xD3	; 211
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 30);
     e9a:	6e e1       	ldi	r22, 0x1E	; 30
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("   realizar", 1);
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	80 ee       	ldi	r24, 0xE0	; 224
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 40);
     eac:	68 e2       	ldi	r22, 0x28	; 40
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	0e 94 c4 08 	call	0x1188	; 0x1188 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("--------------", 1);
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	0e 94 b1 08 	call	0x1162	; 0x1162 <nokia_lcd_write_string>
	nokia_lcd_render(); // Exibe as informações apresentadas acima no display
     ebe:	0e 94 c9 08 	call	0x1192	; 0x1192 <nokia_lcd_render>
     ec2:	ff cf       	rjmp	.-2      	; 0xec2 <main+0xcc>

00000ec4 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     ec4:	29 98       	cbi	0x05, 1	; 5
     ec6:	66 23       	and	r22, r22
     ec8:	11 f0       	breq	.+4      	; 0xece <write+0xa>
     eca:	2b 9a       	sbi	0x05, 3	; 5
     ecc:	15 c0       	rjmp	.+42     	; 0xef8 <write+0x34>
     ece:	2b 98       	cbi	0x05, 3	; 5
     ed0:	13 c0       	rjmp	.+38     	; 0xef8 <write+0x34>
     ed2:	ac 01       	movw	r20, r24
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <write+0x18>
     ed8:	55 95       	asr	r21
     eda:	47 95       	ror	r20
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <write+0x14>
     ee0:	40 ff       	sbrs	r20, 0
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <write+0x24>
     ee4:	2c 9a       	sbi	0x05, 4	; 5
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <write+0x26>
     ee8:	2c 98       	cbi	0x05, 4	; 5
     eea:	2d 9a       	sbi	0x05, 5	; 5
     eec:	2d 98       	cbi	0x05, 5	; 5
     eee:	21 50       	subi	r18, 0x01	; 1
     ef0:	31 09       	sbc	r19, r1
     ef2:	78 f7       	brcc	.-34     	; 0xed2 <write+0xe>
     ef4:	29 9a       	sbi	0x05, 1	; 5
     ef6:	08 95       	ret
     ef8:	27 e0       	ldi	r18, 0x07	; 7
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	e9 cf       	rjmp	.-46     	; 0xed2 <write+0xe>

00000f00 <write_cmd>:
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	0e 94 62 07 	call	0xec4	; 0xec4 <write>
     f06:	08 95       	ret

00000f08 <nokia_lcd_init>:
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	21 9a       	sbi	0x04, 1	; 4
     f0e:	22 9a       	sbi	0x04, 2	; 4
     f10:	23 9a       	sbi	0x04, 3	; 4
     f12:	24 9a       	sbi	0x04, 4	; 4
     f14:	25 9a       	sbi	0x04, 5	; 4
     f16:	2a 9a       	sbi	0x05, 2	; 5
     f18:	29 9a       	sbi	0x05, 1	; 5
     f1a:	83 ec       	ldi	r24, 0xC3	; 195
     f1c:	99 e0       	ldi	r25, 0x09	; 9
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <nokia_lcd_init+0x16>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <nokia_lcd_init+0x1c>
     f24:	00 00       	nop
     f26:	2a 98       	cbi	0x05, 2	; 5
     f28:	8b e5       	ldi	r24, 0x5B	; 91
     f2a:	94 e4       	ldi	r25, 0x44	; 68
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <nokia_lcd_init+0x24>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <nokia_lcd_init+0x2a>
     f32:	00 00       	nop
     f34:	2a 9a       	sbi	0x05, 2	; 5
     f36:	29 98       	cbi	0x05, 1	; 5
     f38:	81 e2       	ldi	r24, 0x21	; 33
     f3a:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f3e:	83 e1       	ldi	r24, 0x13	; 19
     f40:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f44:	86 e0       	ldi	r24, 0x06	; 6
     f46:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f4a:	82 ec       	ldi	r24, 0xC2	; 194
     f4c:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f50:	80 e2       	ldi	r24, 0x20	; 32
     f52:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f56:	89 e0       	ldi	r24, 0x09	; 9
     f58:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f5c:	80 e8       	ldi	r24, 0x80	; 128
     f5e:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f62:	80 e4       	ldi	r24, 0x40	; 64
     f64:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f68:	c8 ef       	ldi	r28, 0xF8	; 248
     f6a:	d1 e0       	ldi	r29, 0x01	; 1
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	0e 94 62 07 	call	0xec4	; 0xec4 <write>
     f74:	21 97       	sbiw	r28, 0x01	; 1
     f76:	d1 f7       	brne	.-12     	; 0xf6c <nokia_lcd_init+0x64>
     f78:	88 e0       	ldi	r24, 0x08	; 8
     f7a:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f7e:	8c e0       	ldi	r24, 0x0C	; 12
     f80:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <nokia_lcd_clear>:
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f90:	80 e4       	ldi	r24, 0x40	; 64
     f92:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
     f96:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <nokia_lcd+0x1f8>
     f9a:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <nokia_lcd+0x1f9>
     f9e:	ee ee       	ldi	r30, 0xEE	; 238
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	86 ee       	ldi	r24, 0xE6	; 230
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	11 92       	st	Z+, r1
     fa8:	e8 17       	cp	r30, r24
     faa:	f9 07       	cpc	r31, r25
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <nokia_lcd_clear+0x1c>
     fae:	08 95       	ret

00000fb0 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     fb0:	26 2f       	mov	r18, r22
     fb2:	26 95       	lsr	r18
     fb4:	26 95       	lsr	r18
     fb6:	26 95       	lsr	r18
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	34 e5       	ldi	r19, 0x54	; 84
     fbc:	23 9f       	mul	r18, r19
     fbe:	80 0d       	add	r24, r0
     fc0:	91 1d       	adc	r25, r1
     fc2:	11 24       	eor	r1, r1
	if (value)
     fc4:	44 23       	and	r20, r20
     fc6:	79 f0       	breq	.+30     	; 0xfe6 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     fc8:	fc 01       	movw	r30, r24
     fca:	e2 51       	subi	r30, 0x12	; 18
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	67 70       	andi	r22, 0x07	; 7
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <nokia_lcd_set_pixel+0x2a>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	6a 95       	dec	r22
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <nokia_lcd_set_pixel+0x26>
     fde:	90 81       	ld	r25, Z
     fe0:	89 2b       	or	r24, r25
     fe2:	80 83       	st	Z, r24
     fe4:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     fe6:	fc 01       	movw	r30, r24
     fe8:	e2 51       	subi	r30, 0x12	; 18
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	67 70       	andi	r22, 0x07	; 7
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <nokia_lcd_set_pixel+0x48>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	6a 95       	dec	r22
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <nokia_lcd_set_pixel+0x44>
     ffc:	80 95       	com	r24
     ffe:	90 81       	ld	r25, Z
    1000:	89 23       	and	r24, r25
    1002:	80 83       	st	Z, r24
    1004:	08 95       	ret

00001006 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1006:	5f 92       	push	r5
    1008:	6f 92       	push	r6
    100a:	7f 92       	push	r7
    100c:	8f 92       	push	r8
    100e:	9f 92       	push	r9
    1010:	af 92       	push	r10
    1012:	bf 92       	push	r11
    1014:	cf 92       	push	r12
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1026:	26 2f       	mov	r18, r22
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	49 01       	movw	r8, r18
    102c:	88 0c       	add	r8, r8
    102e:	99 1c       	adc	r9, r9
    1030:	88 0c       	add	r8, r8
    1032:	99 1c       	adc	r9, r9
    1034:	82 0e       	add	r8, r18
    1036:	93 1e       	adc	r9, r19
    1038:	18 14       	cp	r1, r8
    103a:	19 04       	cpc	r1, r9
    103c:	0c f0       	brlt	.+2      	; 0x1040 <nokia_lcd_write_char+0x3a>
    103e:	5d c0       	rjmp	.+186    	; 0x10fa <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
    1040:	89 01       	movw	r16, r18
    1042:	00 0f       	add	r16, r16
    1044:	11 1f       	adc	r17, r17
    1046:	00 0f       	add	r16, r16
    1048:	11 1f       	adc	r17, r17
    104a:	00 0f       	add	r16, r16
    104c:	11 1f       	adc	r17, r17
    104e:	02 1b       	sub	r16, r18
    1050:	13 0b       	sbc	r17, r19
    1052:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1054:	a8 2e       	mov	r10, r24
    1056:	b1 2c       	mov	r11, r1
    1058:	c5 01       	movw	r24, r10
    105a:	80 97       	sbiw	r24, 0x20	; 32
    105c:	5c 01       	movw	r10, r24
    105e:	aa 0c       	add	r10, r10
    1060:	bb 1c       	adc	r11, r11
    1062:	aa 0c       	add	r10, r10
    1064:	bb 1c       	adc	r11, r11
    1066:	a8 0e       	add	r10, r24
    1068:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    106a:	0f 2e       	mov	r0, r31
    106c:	f7 ee       	ldi	r31, 0xE7	; 231
    106e:	cf 2e       	mov	r12, r31
    1070:	f3 e0       	ldi	r31, 0x03	; 3
    1072:	df 2e       	mov	r13, r31
    1074:	f0 2d       	mov	r31, r0
    1076:	0f 2e       	mov	r0, r31
    1078:	f6 ee       	ldi	r31, 0xE6	; 230
    107a:	ef 2e       	mov	r14, r31
    107c:	f3 e0       	ldi	r31, 0x03	; 3
    107e:	ff 2e       	mov	r15, r31
    1080:	f0 2d       	mov	r31, r0
    1082:	2d c0       	rjmp	.+90     	; 0x10de <nokia_lcd_write_char+0xd8>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1084:	fe 01       	movw	r30, r28
    1086:	24 91       	lpm	r18, Z
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	87 2d       	mov	r24, r7
    108c:	65 2d       	mov	r22, r5
    108e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__udivmodqi4>
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <nokia_lcd_write_char+0x92>
    1094:	35 95       	asr	r19
    1096:	27 95       	ror	r18
    1098:	8a 95       	dec	r24
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <nokia_lcd_write_char+0x8e>
    109c:	20 ff       	sbrs	r18, 0
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <nokia_lcd_write_char+0xae>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    10a0:	f6 01       	movw	r30, r12
    10a2:	60 81       	ld	r22, Z
    10a4:	67 0d       	add	r22, r7
    10a6:	f7 01       	movw	r30, r14
    10a8:	80 81       	ld	r24, Z
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	86 0d       	add	r24, r6
    10ae:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <nokia_lcd_set_pixel>
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <nokia_lcd_write_char+0xc0>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    10b4:	f6 01       	movw	r30, r12
    10b6:	60 81       	ld	r22, Z
    10b8:	67 0d       	add	r22, r7
    10ba:	f7 01       	movw	r30, r14
    10bc:	80 81       	ld	r24, Z
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	86 0d       	add	r24, r6
    10c2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    10c6:	73 94       	inc	r7
    10c8:	87 2d       	mov	r24, r7
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	80 17       	cp	r24, r16
    10ce:	91 07       	cpc	r25, r17
    10d0:	cc f2       	brlt	.-78     	; 0x1084 <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    10d2:	63 94       	inc	r6
    10d4:	86 2d       	mov	r24, r6
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	88 15       	cp	r24, r8
    10da:	99 05       	cpc	r25, r9
    10dc:	74 f4       	brge	.+28     	; 0x10fa <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
    10de:	10 16       	cp	r1, r16
    10e0:	11 06       	cpc	r1, r17
    10e2:	bc f7       	brge	.-18     	; 0x10d2 <nokia_lcd_write_char+0xcc>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    10e4:	86 2d       	mov	r24, r6
    10e6:	65 2d       	mov	r22, r5
    10e8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__udivmodqi4>
    10ec:	e5 01       	movw	r28, r10
    10ee:	c8 0f       	add	r28, r24
    10f0:	d1 1d       	adc	r29, r1
    10f2:	ca 58       	subi	r28, 0x8A	; 138
    10f4:	df 4f       	sbci	r29, 0xFF	; 255
    10f6:	71 2c       	mov	r7, r1
    10f8:	c5 cf       	rjmp	.-118    	; 0x1084 <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    10fa:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <nokia_lcd+0x1f8>
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	98 0f       	add	r25, r24
    1102:	85 2d       	mov	r24, r5
    1104:	88 0f       	add	r24, r24
    1106:	88 0f       	add	r24, r24
    1108:	85 0d       	add	r24, r5
    110a:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
    110c:	84 35       	cpi	r24, 0x54	; 84
    110e:	18 f4       	brcc	.+6      	; 0x1116 <nokia_lcd_write_char+0x110>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1110:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <nokia_lcd+0x1f8>
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <nokia_lcd_write_char+0x12c>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
    1116:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    111a:	e7 ee       	ldi	r30, 0xE7	; 231
    111c:	f3 e0       	ldi	r31, 0x03	; 3
    111e:	80 81       	ld	r24, Z
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	98 0f       	add	r25, r24
    1124:	85 2d       	mov	r24, r5
    1126:	88 0f       	add	r24, r24
    1128:	88 0f       	add	r24, r24
    112a:	88 0f       	add	r24, r24
    112c:	85 19       	sub	r24, r5
    112e:	89 0f       	add	r24, r25
    1130:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    1132:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <nokia_lcd+0x1f9>
    1136:	80 33       	cpi	r24, 0x30	; 48
    1138:	20 f0       	brcs	.+8      	; 0x1142 <nokia_lcd_write_char+0x13c>
		nokia_lcd.cursor_x = 0;
    113a:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    113e:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <nokia_lcd+0x1f9>
	}
}
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	bf 90       	pop	r11
    1154:	af 90       	pop	r10
    1156:	9f 90       	pop	r9
    1158:	8f 90       	pop	r8
    115a:	7f 90       	pop	r7
    115c:	6f 90       	pop	r6
    115e:	5f 90       	pop	r5
    1160:	08 95       	ret

00001162 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	ec 01       	movw	r28, r24
	while(*str)
    116a:	88 81       	ld	r24, Y
    116c:	88 23       	and	r24, r24
    116e:	41 f0       	breq	.+16     	; 0x1180 <nokia_lcd_write_string+0x1e>
    1170:	16 2f       	mov	r17, r22
    1172:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
    1174:	61 2f       	mov	r22, r17
    1176:	0e 94 03 08 	call	0x1006	; 0x1006 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    117a:	89 91       	ld	r24, Y+
    117c:	81 11       	cpse	r24, r1
    117e:	fa cf       	rjmp	.-12     	; 0x1174 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	08 95       	ret

00001188 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1188:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    118c:	60 93 e7 03 	sts	0x03E7, r22	; 0x8003e7 <nokia_lcd+0x1f9>
    1190:	08 95       	ret

00001192 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    119a:	80 e8       	ldi	r24, 0x80	; 128
    119c:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
	write_cmd(0x40);
    11a0:	80 e4       	ldi	r24, 0x40	; 64
    11a2:	0e 94 80 07 	call	0xf00	; 0xf00 <write_cmd>
    11a6:	ce ee       	ldi	r28, 0xEE	; 238
    11a8:	d1 e0       	ldi	r29, 0x01	; 1
    11aa:	06 ee       	ldi	r16, 0xE6	; 230
    11ac:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	89 91       	ld	r24, Y+
    11b2:	0e 94 62 07 	call	0xec4	; 0xec4 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    11b6:	c0 17       	cp	r28, r16
    11b8:	d1 07       	cpc	r29, r17
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <nokia_lcd_render+0x1c>
		write_data(nokia_lcd.screen[i]);
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <__udivmodqi4>:
    11c6:	99 1b       	sub	r25, r25
    11c8:	79 e0       	ldi	r23, 0x09	; 9
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <__udivmodqi4_ep>

000011cc <__udivmodqi4_loop>:
    11cc:	99 1f       	adc	r25, r25
    11ce:	96 17       	cp	r25, r22
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <__udivmodqi4_ep>
    11d2:	96 1b       	sub	r25, r22

000011d4 <__udivmodqi4_ep>:
    11d4:	88 1f       	adc	r24, r24
    11d6:	7a 95       	dec	r23
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <__udivmodqi4_loop>
    11da:	80 95       	com	r24
    11dc:	08 95       	ret

000011de <__divmodhi4>:
    11de:	97 fb       	bst	r25, 7
    11e0:	07 2e       	mov	r0, r23
    11e2:	16 f4       	brtc	.+4      	; 0x11e8 <__divmodhi4+0xa>
    11e4:	00 94       	com	r0
    11e6:	07 d0       	rcall	.+14     	; 0x11f6 <__divmodhi4_neg1>
    11e8:	77 fd       	sbrc	r23, 7
    11ea:	09 d0       	rcall	.+18     	; 0x11fe <__divmodhi4_neg2>
    11ec:	0e 94 18 09 	call	0x1230	; 0x1230 <__udivmodhi4>
    11f0:	07 fc       	sbrc	r0, 7
    11f2:	05 d0       	rcall	.+10     	; 0x11fe <__divmodhi4_neg2>
    11f4:	3e f4       	brtc	.+14     	; 0x1204 <__divmodhi4_exit>

000011f6 <__divmodhi4_neg1>:
    11f6:	90 95       	com	r25
    11f8:	81 95       	neg	r24
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	08 95       	ret

000011fe <__divmodhi4_neg2>:
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255

00001204 <__divmodhi4_exit>:
    1204:	08 95       	ret

00001206 <__tablejump2__>:
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	05 90       	lpm	r0, Z+
    120c:	f4 91       	lpm	r31, Z
    120e:	e0 2d       	mov	r30, r0
    1210:	09 94       	ijmp

00001212 <__umulhisi3>:
    1212:	a2 9f       	mul	r26, r18
    1214:	b0 01       	movw	r22, r0
    1216:	b3 9f       	mul	r27, r19
    1218:	c0 01       	movw	r24, r0
    121a:	a3 9f       	mul	r26, r19
    121c:	70 0d       	add	r23, r0
    121e:	81 1d       	adc	r24, r1
    1220:	11 24       	eor	r1, r1
    1222:	91 1d       	adc	r25, r1
    1224:	b2 9f       	mul	r27, r18
    1226:	70 0d       	add	r23, r0
    1228:	81 1d       	adc	r24, r1
    122a:	11 24       	eor	r1, r1
    122c:	91 1d       	adc	r25, r1
    122e:	08 95       	ret

00001230 <__udivmodhi4>:
    1230:	aa 1b       	sub	r26, r26
    1232:	bb 1b       	sub	r27, r27
    1234:	51 e1       	ldi	r21, 0x11	; 17
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <__udivmodhi4_ep>

00001238 <__udivmodhi4_loop>:
    1238:	aa 1f       	adc	r26, r26
    123a:	bb 1f       	adc	r27, r27
    123c:	a6 17       	cp	r26, r22
    123e:	b7 07       	cpc	r27, r23
    1240:	10 f0       	brcs	.+4      	; 0x1246 <__udivmodhi4_ep>
    1242:	a6 1b       	sub	r26, r22
    1244:	b7 0b       	sbc	r27, r23

00001246 <__udivmodhi4_ep>:
    1246:	88 1f       	adc	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	5a 95       	dec	r21
    124c:	a9 f7       	brne	.-22     	; 0x1238 <__udivmodhi4_loop>
    124e:	80 95       	com	r24
    1250:	90 95       	com	r25
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	08 95       	ret

00001258 <strcat>:
    1258:	fb 01       	movw	r30, r22
    125a:	dc 01       	movw	r26, r24
    125c:	0d 90       	ld	r0, X+
    125e:	00 20       	and	r0, r0
    1260:	e9 f7       	brne	.-6      	; 0x125c <strcat+0x4>
    1262:	11 97       	sbiw	r26, 0x01	; 1
    1264:	01 90       	ld	r0, Z+
    1266:	0d 92       	st	X+, r0
    1268:	00 20       	and	r0, r0
    126a:	e1 f7       	brne	.-8      	; 0x1264 <strcat+0xc>
    126c:	08 95       	ret

0000126e <__itoa_ncheck>:
    126e:	bb 27       	eor	r27, r27
    1270:	4a 30       	cpi	r20, 0x0A	; 10
    1272:	31 f4       	brne	.+12     	; 0x1280 <__itoa_ncheck+0x12>
    1274:	99 23       	and	r25, r25
    1276:	22 f4       	brpl	.+8      	; 0x1280 <__itoa_ncheck+0x12>
    1278:	bd e2       	ldi	r27, 0x2D	; 45
    127a:	90 95       	com	r25
    127c:	81 95       	neg	r24
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__utoa_common>

00001284 <__utoa_ncheck>:
    1284:	bb 27       	eor	r27, r27

00001286 <__utoa_common>:
    1286:	fb 01       	movw	r30, r22
    1288:	55 27       	eor	r21, r21
    128a:	aa 27       	eor	r26, r26
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	aa 1f       	adc	r26, r26
    1292:	a4 17       	cp	r26, r20
    1294:	10 f0       	brcs	.+4      	; 0x129a <__utoa_common+0x14>
    1296:	a4 1b       	sub	r26, r20
    1298:	83 95       	inc	r24
    129a:	50 51       	subi	r21, 0x10	; 16
    129c:	b9 f7       	brne	.-18     	; 0x128c <__utoa_common+0x6>
    129e:	a0 5d       	subi	r26, 0xD0	; 208
    12a0:	aa 33       	cpi	r26, 0x3A	; 58
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <__utoa_common+0x20>
    12a4:	a9 5d       	subi	r26, 0xD9	; 217
    12a6:	a1 93       	st	Z+, r26
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	79 f7       	brne	.-34     	; 0x128a <__utoa_common+0x4>
    12ac:	b1 11       	cpse	r27, r1
    12ae:	b1 93       	st	Z+, r27
    12b0:	11 92       	st	Z+, r1
    12b2:	cb 01       	movw	r24, r22
    12b4:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <strrev>

000012b8 <strrev>:
    12b8:	dc 01       	movw	r26, r24
    12ba:	fc 01       	movw	r30, r24
    12bc:	67 2f       	mov	r22, r23
    12be:	71 91       	ld	r23, Z+
    12c0:	77 23       	and	r23, r23
    12c2:	e1 f7       	brne	.-8      	; 0x12bc <strrev+0x4>
    12c4:	32 97       	sbiw	r30, 0x02	; 2
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <strrev+0x18>
    12c8:	7c 91       	ld	r23, X
    12ca:	6d 93       	st	X+, r22
    12cc:	70 83       	st	Z, r23
    12ce:	62 91       	ld	r22, -Z
    12d0:	ae 17       	cp	r26, r30
    12d2:	bf 07       	cpc	r27, r31
    12d4:	c8 f3       	brcs	.-14     	; 0x12c8 <strrev+0x10>
    12d6:	08 95       	ret

000012d8 <eeprom_read_byte>:
    12d8:	f9 99       	sbic	0x1f, 1	; 31
    12da:	fe cf       	rjmp	.-4      	; 0x12d8 <eeprom_read_byte>
    12dc:	92 bd       	out	0x22, r25	; 34
    12de:	81 bd       	out	0x21, r24	; 33
    12e0:	f8 9a       	sbi	0x1f, 0	; 31
    12e2:	99 27       	eor	r25, r25
    12e4:	80 b5       	in	r24, 0x20	; 32
    12e6:	08 95       	ret

000012e8 <eeprom_write_byte>:
    12e8:	26 2f       	mov	r18, r22

000012ea <eeprom_write_r18>:
    12ea:	f9 99       	sbic	0x1f, 1	; 31
    12ec:	fe cf       	rjmp	.-4      	; 0x12ea <eeprom_write_r18>
    12ee:	1f ba       	out	0x1f, r1	; 31
    12f0:	92 bd       	out	0x22, r25	; 34
    12f2:	81 bd       	out	0x21, r24	; 33
    12f4:	20 bd       	out	0x20, r18	; 32
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	fa 9a       	sbi	0x1f, 2	; 31
    12fc:	f9 9a       	sbi	0x1f, 1	; 31
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	08 95       	ret

00001304 <_exit>:
    1304:	f8 94       	cli

00001306 <__stop_program>:
    1306:	ff cf       	rjmp	.-2      	; 0x1306 <__stop_program>
