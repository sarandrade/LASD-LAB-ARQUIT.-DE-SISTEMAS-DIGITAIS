
Projeto_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00000e90  00000f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000208  008001b0  008001b0  00000fd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dd8  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b4  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf0  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  000045a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fb  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c76  00000000  00000000  00004f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005b99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 01 	jmp	0x256	; 0x256 <__ctors_end>
   4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_1>
   8:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_2>
   c:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_3>
  10:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  14:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  18:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  1c:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_7>
  20:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  24:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  28:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  2c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  30:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  34:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  38:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  3c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  40:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  44:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  48:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_18>
  4c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  50:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  54:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  58:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  5c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  60:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  64:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
  68:	77 04       	cpc	r7, r7
  6a:	7e 04       	cpc	r7, r14
  6c:	83 04       	cpc	r8, r3
  6e:	89 04       	cpc	r8, r9
  70:	8d 04       	cpc	r8, r13
  72:	93 04       	cpc	r9, r3
  74:	97 04       	cpc	r9, r7

00000076 <CHARSET>:
  76:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  86:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  96:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  a6:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  b6:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  c6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  d6:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  e6:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  f6:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 106:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 116:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 126:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 136:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 146:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 156:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 166:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 176:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 186:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 196:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1a6:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1b6:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1c6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1d6:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1e6:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1f6:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 206:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 216:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 226:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 236:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 246:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000256 <__ctors_end>:
 256:	11 24       	eor	r1, r1
 258:	1f be       	out	0x3f, r1	; 63
 25a:	cf ef       	ldi	r28, 0xFF	; 255
 25c:	d8 e0       	ldi	r29, 0x08	; 8
 25e:	de bf       	out	0x3e, r29	; 62
 260:	cd bf       	out	0x3d, r28	; 61

00000262 <__do_copy_data>:
 262:	11 e0       	ldi	r17, 0x01	; 1
 264:	a0 e0       	ldi	r26, 0x00	; 0
 266:	b1 e0       	ldi	r27, 0x01	; 1
 268:	e0 e9       	ldi	r30, 0x90	; 144
 26a:	fe e0       	ldi	r31, 0x0E	; 14
 26c:	02 c0       	rjmp	.+4      	; 0x272 <__do_copy_data+0x10>
 26e:	05 90       	lpm	r0, Z+
 270:	0d 92       	st	X+, r0
 272:	a0 3b       	cpi	r26, 0xB0	; 176
 274:	b1 07       	cpc	r27, r17
 276:	d9 f7       	brne	.-10     	; 0x26e <__do_copy_data+0xc>

00000278 <__do_clear_bss>:
 278:	23 e0       	ldi	r18, 0x03	; 3
 27a:	a0 eb       	ldi	r26, 0xB0	; 176
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	01 c0       	rjmp	.+2      	; 0x282 <.do_clear_bss_start>

00000280 <.do_clear_bss_loop>:
 280:	1d 92       	st	X+, r1

00000282 <.do_clear_bss_start>:
 282:	a8 3b       	cpi	r26, 0xB8	; 184
 284:	b2 07       	cpc	r27, r18
 286:	e1 f7       	brne	.-8      	; 0x280 <.do_clear_bss_loop>
 288:	0e 94 0c 05 	call	0xa18	; 0xa18 <main>
 28c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <_exit>

00000290 <__bad_interrupt>:
 290:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000294 <define_porcentagem_PWM>:
// Função para recepção de um frame de 5 a 8 bits
unsigned char USART_Receive(void)
{
	while(!(UCSR0A & (1<<RXC0))); // Espera o dado ser recebido
	return UDR0; // Lê o dado recebido e retorna
}
 294:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <min>
 298:	89 31       	cpi	r24, 0x19	; 25
 29a:	89 f0       	breq	.+34     	; 0x2be <define_porcentagem_PWM+0x2a>
 29c:	2c f4       	brge	.+10     	; 0x2a8 <define_porcentagem_PWM+0x14>
 29e:	88 23       	and	r24, r24
 2a0:	41 f0       	breq	.+16     	; 0x2b2 <define_porcentagem_PWM+0x1e>
 2a2:	8d 30       	cpi	r24, 0x0D	; 13
 2a4:	49 f0       	breq	.+18     	; 0x2b8 <define_porcentagem_PWM+0x24>
 2a6:	08 95       	ret
 2a8:	85 32       	cpi	r24, 0x25	; 37
 2aa:	61 f0       	breq	.+24     	; 0x2c4 <define_porcentagem_PWM+0x30>
 2ac:	81 33       	cpi	r24, 0x31	; 49
 2ae:	69 f0       	breq	.+26     	; 0x2ca <define_porcentagem_PWM+0x36>
 2b0:	08 95       	ret
 2b2:	83 e3       	ldi	r24, 0x33	; 51
 2b4:	87 bd       	out	0x27, r24	; 39
 2b6:	08 95       	ret
 2b8:	86 e6       	ldi	r24, 0x66	; 102
 2ba:	87 bd       	out	0x27, r24	; 39
 2bc:	08 95       	ret
 2be:	89 e9       	ldi	r24, 0x99	; 153
 2c0:	87 bd       	out	0x27, r24	; 39
 2c2:	08 95       	ret
 2c4:	8c ec       	ldi	r24, 0xCC	; 204
 2c6:	87 bd       	out	0x27, r24	; 39
 2c8:	08 95       	ret
 2ca:	8a ef       	ldi	r24, 0xFA	; 250
 2cc:	87 bd       	out	0x27, r24	; 39
 2ce:	08 95       	ret

000002d0 <USART_Init>:
 2d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2d8:	88 e9       	ldi	r24, 0x98	; 152
 2da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2de:	8e e0       	ldi	r24, 0x0E	; 14
 2e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	87 b9       	out	0x07, r24	; 7
 2e8:	08 95       	ret

000002ea <USART_Transmit>:
 2ea:	e0 ec       	ldi	r30, 0xC0	; 192
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	90 81       	ld	r25, Z
 2f0:	95 ff       	sbrs	r25, 5
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <USART_Transmit+0x4>
 2f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2f8:	08 95       	ret

000002fa <__vector_18>:
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
 31c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 320:	80 53       	subi	r24, 0x30	; 48
 322:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <tarefas>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <tarefa_atual>
 32c:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
 33a:	6a e0       	ldi	r22, 0x0A	; 10
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	8f e0       	ldi	r24, 0x0F	; 15
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
 34c:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <tarefas>
 350:	4a e0       	ldi	r20, 0x0A	; 10
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	65 eb       	ldi	r22, 0xB5	; 181
 356:	73 e0       	ldi	r23, 0x03	; 3
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
 35e:	64 e1       	ldi	r22, 0x14	; 20
 360:	83 e2       	ldi	r24, 0x23	; 35
 362:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	85 eb       	ldi	r24, 0xB5	; 181
 36a:	93 e0       	ldi	r25, 0x03	; 3
 36c:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
 370:	6e e1       	ldi	r22, 0x1E	; 30
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	8b e1       	ldi	r24, 0x1B	; 27
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
 382:	68 e2       	ldi	r22, 0x28	; 40
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
 394:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 398:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <tarefas>
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_Transmit>
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <atualizaDisplay>:
	{
	}
}

// Função para atualização do display PCD8544-7
void atualizaDisplay(char entrada){
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
	
	if (entrada == 'l') // Mensagem: Ligando o programa
 3c8:	8c 36       	cpi	r24, 0x6C	; 108
 3ca:	29 f5       	brne	.+74     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		nokia_lcd_clear();
 3cc:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
 3da:	64 e1       	ldi	r22, 0x14	; 20
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("  Bem-vindo!!", 1);
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	86 e2       	ldi	r24, 0x26	; 38
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
 3ec:	68 e2       	ldi	r22, 0x28	; 40
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_render();
 3fe:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 402:	2f ef       	ldi	r18, 0xFF	; 255
 404:	83 ed       	ldi	r24, 0xD3	; 211
 406:	90 e3       	ldi	r25, 0x30	; 48
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	cd c0       	rjmp	.+410    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
		
		_delay_ms(1000);
	}
	else if (entrada == 'd') // Mensagem: Desligando o programa
 416:	84 36       	cpi	r24, 0x64	; 100
 418:	49 f5       	brne	.+82     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	{
		nokia_lcd_clear();
 41a:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
 428:	64 e1       	ldi	r22, 0x14	; 20
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string(" Desligando...", 1);
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	84 e3       	ldi	r24, 0x34	; 52
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
 43a:	68 e2       	ldi	r22, 0x28	; 40
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_render();
 44c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 450:	2f ef       	ldi	r18, 0xFF	; 255
 452:	83 ed       	ldi	r24, 0xD3	; 211
 454:	90 e3       	ldi	r25, 0x30	; 48
 456:	21 50       	subi	r18, 0x01	; 1
 458:	80 40       	sbci	r24, 0x00	; 0
 45a:	90 40       	sbci	r25, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 460:	00 00       	nop
		
		_delay_ms(1000);
		
		nokia_lcd_clear();
 462:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
		nokia_lcd_render();
 466:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 46a:	a2 c0       	rjmp	.+324    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
		
	}
	else if (entrada == 'f') // Mensagem: Finalizando tarefa atual
 46c:	86 36       	cpi	r24, 0x66	; 102
 46e:	09 f0       	breq	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 470:	40 c0       	rjmp	.+128    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
	{
		nokia_lcd_clear();
 472:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
 480:	6a e0       	ldi	r22, 0x0A	; 10
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("   Tarefa", 1);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	83 e4       	ldi	r24, 0x43	; 67
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(35, 20);
 492:	64 e1       	ldi	r22, 0x14	; 20
 494:	83 e2       	ldi	r24, 0x23	; 35
 496:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefa_atual (int) em string (snum)
 49a:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <tarefa_atual>
 49e:	4a e0       	ldi	r20, 0x0A	; 10
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	65 eb       	ldi	r22, 0xB5	; 181
 4a4:	73 e0       	ldi	r23, 0x03	; 3
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
		nokia_lcd_write_string(snum, 1);
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	85 eb       	ldi	r24, 0xB5	; 181
 4b0:	93 e0       	ldi	r25, 0x03	; 3
 4b2:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
 4b6:	6e e1       	ldi	r22, 0x1E	; 30
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("  Finalizada!", 1);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	8d e4       	ldi	r24, 0x4D	; 77
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
 4c8:	68 e2       	ldi	r22, 0x28	; 40
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_render();
 4da:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	83 ed       	ldi	r24, 0xD3	; 211
 4e2:	90 e3       	ldi	r25, 0x30	; 48
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4ee:	00 00       	nop
 4f0:	5f c0       	rjmp	.+190    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
		
		_delay_ms(1000);
	}
	else if (entrada == 'p') // Mensagem: Pausando o programa
 4f2:	80 37       	cpi	r24, 0x70	; 112
 4f4:	e1 f4       	brne	.+56     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
	{
		nokia_lcd_clear();
 4f6:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
 504:	64 e1       	ldi	r22, 0x14	; 20
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Tarefa Pausada", 1);
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	8b e5       	ldi	r24, 0x5B	; 91
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
 516:	68 e2       	ldi	r22, 0x28	; 40
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_render();
 528:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 52c:	41 c0       	rjmp	.+130    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
		
	}
	else if (entrada == 'x') // Mensagem: Dados coletados durante as atividades
 52e:	88 37       	cpi	r24, 0x78	; 120
 530:	51 f4       	brne	.+20     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
	{
		nokia_lcd_clear();
 532:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
		nokia_lcd_write_string(" T | hrs | min", 1);
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	8a e6       	ldi	r24, 0x6A	; 106
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_render();
 540:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 544:	35 c0       	rjmp	.+106    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
			//}
		//}
	}
	else // Mensagem: Atividade atual em andamento
	{
		nokia_lcd_clear();
 546:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
 554:	6a e0       	ldi	r22, 0x0A	; 10
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("   Tarefa", 1);
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	83 e4       	ldi	r24, 0x43	; 67
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(35, 20);
 566:	64 e1       	ldi	r22, 0x14	; 20
 568:	83 e2       	ldi	r24, 0x23	; 35
 56a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		itoa(entrada, snum, 10); // Funçaõ que converte entrada (int) em string (snum)
 56e:	4a e0       	ldi	r20, 0x0A	; 10
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	65 eb       	ldi	r22, 0xB5	; 181
 574:	73 e0       	ldi	r23, 0x03	; 3
 576:	8c 2f       	mov	r24, r28
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
		nokia_lcd_write_string(snum, 1);
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	85 eb       	ldi	r24, 0xB5	; 181
 582:	93 e0       	ldi	r25, 0x03	; 3
 584:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
 588:	6e e1       	ldi	r22, 0x1E	; 30
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string(" Em Andamento", 1);
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	89 e7       	ldi	r24, 0x79	; 121
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
 59a:	68 e2       	ldi	r22, 0x28	; 40
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
		nokia_lcd_render();
 5ac:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
	}
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <__vector_1>:
	//return valor;
//}

// Interrupção externa 0, captura o Ligar/Desligar
ISR(INT0_vect)
{
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	2f 93       	push	r18
 5c0:	3f 93       	push	r19
 5c2:	4f 93       	push	r20
 5c4:	5f 93       	push	r21
 5c6:	6f 93       	push	r22
 5c8:	7f 93       	push	r23
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	af 93       	push	r26
 5d0:	bf 93       	push	r27
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
	if (liga == 1)
 5d6:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <liga>
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	21 f5       	brne	.+72     	; 0x626 <__vector_1+0x72>
	{
		atualizaDisplay('l'); // Chamada de função - Mensagem: Ligando o programa
 5de:	8c e6       	ldi	r24, 0x6C	; 108
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
		liga = 0; // Inicia o Timer
 5e6:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <liga>
		
		if(finaliza == 0 && pausa == 0)
 5ea:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <finaliza>
 5ee:	81 11       	cpse	r24, r1
 5f0:	0a c0       	rjmp	.+20     	; 0x606 <__vector_1+0x52>
 5f2:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <pausa>
 5f6:	81 11       	cpse	r24, r1
 5f8:	0d c0       	rjmp	.+26     	; 0x614 <__vector_1+0x60>
		{
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
 5fa:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <tarefa_atual>
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
 604:	17 c0       	rjmp	.+46     	; 0x634 <__vector_1+0x80>
		}
		else if (finaliza == 1)
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	29 f4       	brne	.+10     	; 0x614 <__vector_1+0x60>
		{
			atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
 60a:	88 e7       	ldi	r24, 0x78	; 120
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
 612:	10 c0       	rjmp	.+32     	; 0x634 <__vector_1+0x80>
		}
		else if (pausa == 1)
 614:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <pausa>
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	61 f4       	brne	.+24     	; 0x634 <__vector_1+0x80>
		{
			atualizaDisplay('p'); // Chamada de função - Mensagem: Pausando o programa
 61c:	80 e7       	ldi	r24, 0x70	; 112
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
 624:	07 c0       	rjmp	.+14     	; 0x634 <__vector_1+0x80>
		}
	}
	else
	{
		atualizaDisplay('d'); // Chamada de função - Mensagem: Desligando o programa
 626:	84 e6       	ldi	r24, 0x64	; 100
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
		liga = 1; // Pausa o Timer
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <liga>
	}
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	4f 91       	pop	r20
 648:	3f 91       	pop	r19
 64a:	2f 91       	pop	r18
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <__vector_2>:

// Interrupção externa 1, captura o Play/Pause
ISR(INT1_vect)
{
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	4f 93       	push	r20
 666:	5f 93       	push	r21
 668:	6f 93       	push	r22
 66a:	7f 93       	push	r23
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	bf 93       	push	r27
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
	if (finaliza == 0 && liga == 0)
 678:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <finaliza>
 67c:	81 11       	cpse	r24, r1
 67e:	17 c0       	rjmp	.+46     	; 0x6ae <__vector_2+0x58>
 680:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <liga>
 684:	81 11       	cpse	r24, r1
 686:	13 c0       	rjmp	.+38     	; 0x6ae <__vector_2+0x58>
	{
		if(pausa == 1)
 688:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <pausa>
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	41 f4       	brne	.+16     	; 0x6a0 <__vector_2+0x4a>
		{
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
 690:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <tarefa_atual>
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
			pausa = 0; // Dá play no Timer
 69a:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <pausa>
 69e:	07 c0       	rjmp	.+14     	; 0x6ae <__vector_2+0x58>
		}
		else
		{
			atualizaDisplay('p'); // Chamada de função - Mensagem: Pausando o programa
 6a0:	80 e7       	ldi	r24, 0x70	; 112
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
			pausa = 1; // Pausa o Timer
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <pausa>
		}
	}
}
 6ae:	ff 91       	pop	r31
 6b0:	ef 91       	pop	r30
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	7f 91       	pop	r23
 6bc:	6f 91       	pop	r22
 6be:	5f 91       	pop	r21
 6c0:	4f 91       	pop	r20
 6c2:	3f 91       	pop	r19
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <__vector_3>:

// Interrupção 0 por mudança de pino, captura o Finalizar Tarefa
ISR(PCINT0_vect)
{
 6d0:	1f 92       	push	r1
 6d2:	0f 92       	push	r0
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	0f 92       	push	r0
 6d8:	11 24       	eor	r1, r1
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	2f 93       	push	r18
 6e0:	3f 93       	push	r19
 6e2:	4f 93       	push	r20
 6e4:	5f 93       	push	r21
 6e6:	6f 93       	push	r22
 6e8:	7f 93       	push	r23
 6ea:	8f 93       	push	r24
 6ec:	9f 93       	push	r25
 6ee:	af 93       	push	r26
 6f0:	bf 93       	push	r27
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31
	if (pcint0_int == 0 && pausa == 0 && liga == 0)
 6fa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
 6fe:	81 11       	cpse	r24, r1
 700:	ce c0       	rjmp	.+412    	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 702:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <pausa>
 706:	81 11       	cpse	r24, r1
 708:	ce c0       	rjmp	.+412    	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 70a:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <liga>
 70e:	81 11       	cpse	r24, r1
 710:	ca c0       	rjmp	.+404    	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
	{
		pcint0_int ++;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>
		
		if (tarefa_atual == tarefas) // Não há mais tarefas para realizar
 718:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <tarefa_atual>
 71c:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <tarefas>
 720:	89 13       	cpse	r24, r25
 722:	0c c0       	rjmp	.+24     	; 0x73c <__vector_3+0x6c>
			// String horas = to_string(hrs);
			// String minutos = to_string(min);
			// writeStringToEEPROM (horas);
			// writeStringToEEPROM (minutos);
			
			atualizaDisplay('f'); // Chamada de função - Mensagem: Finalizando tarefa atual
 724:	86 e6       	ldi	r24, 0x66	; 102
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
			atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
 72c:	88 e7       	ldi	r24, 0x78	; 120
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
			finaliza = 1; // Finaliza contagem do Timer
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <finaliza>
 73a:	b5 c0       	rjmp	.+362    	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
		}
		else
		{
			if (tarefa_atual == 1)
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	09 f0       	breq	.+2      	; 0x742 <__vector_3+0x72>
 740:	4e c0       	rjmp	.+156    	; 0x7de <__vector_3+0x10e>
			{
				int t1_hrs = hrs;
 742:	00 91 af 03 	lds	r16, 0x03AF	; 0x8003af <hrs>
 746:	00 2e       	mov	r0, r16
 748:	00 0c       	add	r0, r0
 74a:	11 0b       	sbc	r17, r17
				int t1_min = min;
 74c:	c0 91 b3 03 	lds	r28, 0x03B3	; 0x8003b3 <min>
 750:	0c 2e       	mov	r0, r28
 752:	00 0c       	add	r0, r0
 754:	dd 0b       	sbc	r29, r29
				
				nokia_lcd_clear();
 756:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
				nokia_lcd_write_string(" T | hrs | min", 1);
 75a:	61 e0       	ldi	r22, 0x01	; 1
 75c:	8a e6       	ldi	r24, 0x6A	; 106
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(0, 10);
 764:	6a e0       	ldi	r22, 0x0A	; 10
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
				itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefas (int) em string
 76c:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <tarefa_atual>
 770:	4a e0       	ldi	r20, 0x0A	; 10
 772:	50 e0       	ldi	r21, 0x00	; 0
 774:	65 eb       	ldi	r22, 0xB5	; 181
 776:	73 e0       	ldi	r23, 0x03	; 3
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
				nokia_lcd_write_string(snum, 1);
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	85 eb       	ldi	r24, 0xB5	; 181
 782:	93 e0       	ldi	r25, 0x03	; 3
 784:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(25, 10);
 788:	6a e0       	ldi	r22, 0x0A	; 10
 78a:	89 e1       	ldi	r24, 0x19	; 25
 78c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
				itoa(t1_hrs, snum, 10); // Funçaõ que converte tarefas (int) em string
 790:	4a e0       	ldi	r20, 0x0A	; 10
 792:	50 e0       	ldi	r21, 0x00	; 0
 794:	65 eb       	ldi	r22, 0xB5	; 181
 796:	73 e0       	ldi	r23, 0x03	; 3
 798:	c8 01       	movw	r24, r16
 79a:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
				nokia_lcd_write_string(snum, 1);
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	85 eb       	ldi	r24, 0xB5	; 181
 7a2:	93 e0       	ldi	r25, 0x03	; 3
 7a4:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(35, 10);
 7a8:	6a e0       	ldi	r22, 0x0A	; 10
 7aa:	83 e2       	ldi	r24, 0x23	; 35
 7ac:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
				itoa(t1_min, snum, 10); // Funçaõ que converte tarefas (int) em string
 7b0:	4a e0       	ldi	r20, 0x0A	; 10
 7b2:	50 e0       	ldi	r21, 0x00	; 0
 7b4:	65 eb       	ldi	r22, 0xB5	; 181
 7b6:	73 e0       	ldi	r23, 0x03	; 3
 7b8:	ce 01       	movw	r24, r28
 7ba:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
				nokia_lcd_write_string(snum, 1);
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	85 eb       	ldi	r24, 0xB5	; 181
 7c2:	93 e0       	ldi	r25, 0x03	; 3
 7c4:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
				nokia_lcd_render();
 7c8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 7cc:	2f ef       	ldi	r18, 0xFF	; 255
 7ce:	83 e2       	ldi	r24, 0x23	; 35
 7d0:	94 ef       	ldi	r25, 0xF4	; 244
 7d2:	21 50       	subi	r18, 0x01	; 1
 7d4:	80 40       	sbci	r24, 0x00	; 0
 7d6:	90 40       	sbci	r25, 0x00	; 0
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <__vector_3+0x102>
 7da:	00 c0       	rjmp	.+0      	; 0x7dc <__vector_3+0x10c>
 7dc:	00 00       	nop
				_delay_ms(5000);
								
			}
			if (tarefa_atual == 2)
 7de:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <tarefa_atual>
 7e2:	82 30       	cpi	r24, 0x02	; 2
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <__vector_3+0x118>
 7e6:	4e c0       	rjmp	.+156    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
			{
				int t2_hrs = hrs;
 7e8:	00 91 af 03 	lds	r16, 0x03AF	; 0x8003af <hrs>
 7ec:	00 2e       	mov	r0, r16
 7ee:	00 0c       	add	r0, r0
 7f0:	11 0b       	sbc	r17, r17
				int t2_min = min;
 7f2:	c0 91 b3 03 	lds	r28, 0x03B3	; 0x8003b3 <min>
 7f6:	0c 2e       	mov	r0, r28
 7f8:	00 0c       	add	r0, r0
 7fa:	dd 0b       	sbc	r29, r29
				
				nokia_lcd_clear();
 7fc:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
				nokia_lcd_write_string(" T | hrs | min", 1);
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	8a e6       	ldi	r24, 0x6A	; 106
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(0, 10);
 80a:	6a e0       	ldi	r22, 0x0A	; 10
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
				itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefas (int) em string
 812:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <tarefa_atual>
 816:	4a e0       	ldi	r20, 0x0A	; 10
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	65 eb       	ldi	r22, 0xB5	; 181
 81c:	73 e0       	ldi	r23, 0x03	; 3
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
				nokia_lcd_write_string(snum, 1);
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	85 eb       	ldi	r24, 0xB5	; 181
 828:	93 e0       	ldi	r25, 0x03	; 3
 82a:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(25, 10);
 82e:	6a e0       	ldi	r22, 0x0A	; 10
 830:	89 e1       	ldi	r24, 0x19	; 25
 832:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
				itoa(t2_hrs, snum, 10); // Funçaõ que converte tarefas (int) em string
 836:	4a e0       	ldi	r20, 0x0A	; 10
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	65 eb       	ldi	r22, 0xB5	; 181
 83c:	73 e0       	ldi	r23, 0x03	; 3
 83e:	c8 01       	movw	r24, r16
 840:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
				nokia_lcd_write_string(snum, 1);
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	85 eb       	ldi	r24, 0xB5	; 181
 848:	93 e0       	ldi	r25, 0x03	; 3
 84a:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(35, 10);
 84e:	6a e0       	ldi	r22, 0x0A	; 10
 850:	83 e2       	ldi	r24, 0x23	; 35
 852:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
				itoa(t2_min, snum, 10); // Funçaõ que converte tarefas (int) em string
 856:	4a e0       	ldi	r20, 0x0A	; 10
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	65 eb       	ldi	r22, 0xB5	; 181
 85c:	73 e0       	ldi	r23, 0x03	; 3
 85e:	ce 01       	movw	r24, r28
 860:	0e 94 06 07 	call	0xe0c	; 0xe0c <itoa>
				nokia_lcd_write_string(snum, 1);
 864:	61 e0       	ldi	r22, 0x01	; 1
 866:	85 eb       	ldi	r24, 0xB5	; 181
 868:	93 e0       	ldi	r25, 0x03	; 3
 86a:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
				nokia_lcd_render();
 86e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 872:	2f ef       	ldi	r18, 0xFF	; 255
 874:	83 e2       	ldi	r24, 0x23	; 35
 876:	94 ef       	ldi	r25, 0xF4	; 244
 878:	21 50       	subi	r18, 0x01	; 1
 87a:	80 40       	sbci	r24, 0x00	; 0
 87c:	90 40       	sbci	r25, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 880:	00 c0       	rjmp	.+0      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 882:	00 00       	nop
			// String horas = to_string(hrs);
			// String minutos = to_string(min);
			// writeStringToEEPROM (horas);
			// writeStringToEEPROM (minutos);
			
			atualizaDisplay('f'); // Chamada de função - Mensagem: Finalizando tarefa atual
 884:	86 e6       	ldi	r24, 0x66	; 102
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
			tarefa_atual ++; // Passa para a próxima tarefa
 88c:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <tarefa_atual>
 890:	8f 5f       	subi	r24, 0xFF	; 255
 892:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <tarefa_atual>
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
		}
	}
	else if (pcint0_int == 1)
 89e:	81 30       	cpi	r24, 0x01	; 1
 8a0:	11 f4       	brne	.+4      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
	{
		pcint0_int = 0;
 8a2:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <__data_end>
	}
}
 8a6:	ff 91       	pop	r31
 8a8:	ef 91       	pop	r30
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	bf 91       	pop	r27
 8b0:	af 91       	pop	r26
 8b2:	9f 91       	pop	r25
 8b4:	8f 91       	pop	r24
 8b6:	7f 91       	pop	r23
 8b8:	6f 91       	pop	r22
 8ba:	5f 91       	pop	r21
 8bc:	4f 91       	pop	r20
 8be:	3f 91       	pop	r19
 8c0:	2f 91       	pop	r18
 8c2:	1f 91       	pop	r17
 8c4:	0f 91       	pop	r16
 8c6:	0f 90       	pop	r0
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	0f 90       	pop	r0
 8cc:	1f 90       	pop	r1
 8ce:	18 95       	reti

000008d0 <seleciona_saida_demux>:
}

// Função que seleciona a saída do DEMUX
void seleciona_saida_demux()
{
	switch(hrs)
 8d0:	e0 91 af 03 	lds	r30, 0x03AF	; 0x8003af <hrs>
 8d4:	8e 2f       	mov	r24, r30
 8d6:	ee 0f       	add	r30, r30
 8d8:	99 0b       	sbc	r25, r25
 8da:	aa 0b       	sbc	r26, r26
 8dc:	bb 0b       	sbc	r27, r27
 8de:	87 30       	cpi	r24, 0x07	; 7
 8e0:	91 05       	cpc	r25, r1
 8e2:	90 f5       	brcc	.+100    	; 0x948 <__stack+0x49>
 8e4:	fc 01       	movw	r30, r24
 8e6:	ec 5c       	subi	r30, 0xCC	; 204
 8e8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ea:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__tablejump2__>
	{
		case 0:
			// Seleciona a saída do DEMUX: 00
			PORTC &= 0b0111111; // S0 = PC6 = 0
 8ee:	88 b1       	in	r24, 0x08	; 8
 8f0:	8f 73       	andi	r24, 0x3F	; 63
 8f2:	88 b9       	out	0x08, r24	; 8
			PORTD &= 0b11111100; // S1 = PD0 = 0 | S2 = PD1 = 0
 8f4:	8b b1       	in	r24, 0x0b	; 11
 8f6:	8c 7f       	andi	r24, 0xFC	; 252
 8f8:	8b b9       	out	0x0b, r24	; 11
			break;
 8fa:	08 95       	ret
		case 1:
			// Seleciona a saída do DEMUX: 01
			PORTC |= 0b1000000; // S0 = PC6 = 1
 8fc:	46 9a       	sbi	0x08, 6	; 8
			PORTD &= 0b11111100; // S1 = PD0 = 0 | S2 = PD1 = 0
 8fe:	8b b1       	in	r24, 0x0b	; 11
 900:	8c 7f       	andi	r24, 0xFC	; 252
 902:	8b b9       	out	0x0b, r24	; 11
		
			// PORTC |= 0b0000001; // Aciona o primeiro LED (PC0)
			break;
 904:	08 95       	ret
		case 2:
			// Seleciona a saída do DEMUX: 02
			PORTC &= 0b0111111; // S0 = PC6 = 0
 906:	88 b1       	in	r24, 0x08	; 8
 908:	8f 73       	andi	r24, 0x3F	; 63
 90a:	88 b9       	out	0x08, r24	; 8
			PORTD |= 0b00000001;  // S1 = PD0 = 1
 90c:	58 9a       	sbi	0x0b, 0	; 11
			PORTD &= 0b11111101; // S2 = PD1 = 0
 90e:	59 98       	cbi	0x0b, 1	; 11
		
			// PORTC |= 0b0000010; // Aciona o segundo LED (PC1)
			break;
 910:	08 95       	ret
		case 3:
			// Seleciona a saída do DEMUX: 03
			PORTC |= 0b1000000; // S0 = PC6 = 1
 912:	46 9a       	sbi	0x08, 6	; 8
			PORTD |= 0b00000001; // S1 = PD0 = 1
 914:	58 9a       	sbi	0x0b, 0	; 11
			PORTD &= 0b11111101; // S2 = PD1 = 0
 916:	59 98       	cbi	0x0b, 1	; 11
		
			// PORTC |= 0b0000100; // Aciona o terceiro LED (PC2)
			break;
 918:	08 95       	ret
		case 4:
			// Seleciona a saída do DEMUX: 04
			PORTC &= 0b0111111; // S0 = PC6 = 0
 91a:	88 b1       	in	r24, 0x08	; 8
 91c:	8f 73       	andi	r24, 0x3F	; 63
 91e:	88 b9       	out	0x08, r24	; 8
			PORTD &= 0b11111110; // S1 = PD0 = 0
 920:	58 98       	cbi	0x0b, 0	; 11
			PORTD |= 0b00000010; // S2 = PD1 = 1
 922:	59 9a       	sbi	0x0b, 1	; 11
		
			// PORTC |= 0b0001000; // Aciona o quarto LED (PC3)
			break;
 924:	08 95       	ret
		case 5:
			// Seleciona a saída do DEMUX: 05
			PORTC |= 0b1000000; // S0 = PC6 = 1
 926:	46 9a       	sbi	0x08, 6	; 8
			PORTD &= 0b11111110; // S1 = PD0 = 0
 928:	58 98       	cbi	0x0b, 0	; 11
			PORTD |= 0b00000010; // S2 = PD1 = 1
 92a:	59 9a       	sbi	0x0b, 1	; 11
		
			// PORTC |= 0b0010000; // Aciona o quinto LED (PC4)
			break;
 92c:	08 95       	ret
		case 6:
			// Seleciona a saída do DEMUX: 06
			PORTC &= 0b0111111; // S0 = PC6 = 0
 92e:	88 b1       	in	r24, 0x08	; 8
 930:	8f 73       	andi	r24, 0x3F	; 63
 932:	88 b9       	out	0x08, r24	; 8
			PORTD |= 0b00000011; // S1 = PD0 = 1 | S2 = PD1 = 1
 934:	8b b1       	in	r24, 0x0b	; 11
 936:	83 60       	ori	r24, 0x03	; 3
 938:	8b b9       	out	0x0b, r24	; 11
		
			// PORTC |= 0b0100000; // Aciona o sexto LED (PC5)
		
			finaliza = 1; // Finaliza contagem do Timer
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <finaliza>
			atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
 940:	88 e7       	ldi	r24, 0x78	; 120
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <atualizaDisplay>
 948:	08 95       	ret

0000094a <__vector_7>:
	}
}

// Interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
ISR(TIMER2_COMPA_vect)
{
 94a:	1f 92       	push	r1
 94c:	0f 92       	push	r0
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	0f 92       	push	r0
 952:	11 24       	eor	r1, r1
 954:	2f 93       	push	r18
 956:	3f 93       	push	r19
 958:	4f 93       	push	r20
 95a:	5f 93       	push	r21
 95c:	6f 93       	push	r22
 95e:	7f 93       	push	r23
 960:	8f 93       	push	r24
 962:	9f 93       	push	r25
 964:	af 93       	push	r26
 966:	bf 93       	push	r27
 968:	ef 93       	push	r30
 96a:	ff 93       	push	r31
	if (pausa != 1 && finaliza != 1 && liga != 1) // Incrementa o timer se as flags: pausa = 0; finaliza = 0; e liga = 0;
 96c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <pausa>
 970:	81 30       	cpi	r24, 0x01	; 1
 972:	09 f4       	brne	.+2      	; 0x976 <__vector_7+0x2c>
 974:	40 c0       	rjmp	.+128    	; 0x9f6 <__vector_7+0xac>
 976:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <finaliza>
 97a:	81 30       	cpi	r24, 0x01	; 1
 97c:	e1 f1       	breq	.+120    	; 0x9f6 <__vector_7+0xac>
 97e:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <liga>
 982:	81 30       	cpi	r24, 0x01	; 1
 984:	c1 f1       	breq	.+112    	; 0x9f6 <__vector_7+0xac>
	{
		mili++; // Incrementa os milissegundos
 986:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <mili>
 98a:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <mili+0x1>
 98e:	01 96       	adiw	r24, 0x01	; 1
		
		if (mili >= 1000)
 990:	88 3e       	cpi	r24, 0xE8	; 232
 992:	23 e0       	ldi	r18, 0x03	; 3
 994:	92 07       	cpc	r25, r18
 996:	2c f4       	brge	.+10     	; 0x9a2 <__vector_7+0x58>
// Interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
ISR(TIMER2_COMPA_vect)
{
	if (pausa != 1 && finaliza != 1 && liga != 1) // Incrementa o timer se as flags: pausa = 0; finaliza = 0; e liga = 0;
	{
		mili++; // Incrementa os milissegundos
 998:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <mili+0x1>
 99c:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <mili>
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <__vector_7+0x6a>
		
		if (mili >= 1000)
		{
			mili = 0;
 9a2:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <mili+0x1>
 9a6:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <mili>
			seg++; // Incrementa os segundos
 9aa:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <seg>
 9ae:	8f 5f       	subi	r24, 0xFF	; 255
 9b0:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <seg>
		}
		if (seg >= 60)
 9b4:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <seg>
 9b8:	8c 33       	cpi	r24, 0x3C	; 60
 9ba:	4c f0       	brlt	.+18     	; 0x9ce <__vector_7+0x84>
		{
			seg = 0;
 9bc:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <seg>
			min++; // Incrementa os minutos
 9c0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <min>
 9c4:	8f 5f       	subi	r24, 0xFF	; 255
 9c6:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <min>
			define_porcentagem_PWM(); // Chamada para função que define a porcentagem do sinal PWM
 9ca:	0e 94 4a 01 	call	0x294	; 0x294 <define_porcentagem_PWM>
		}		
		if (min >= 60)
 9ce:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <min>
 9d2:	8c 33       	cpi	r24, 0x3C	; 60
 9d4:	84 f0       	brlt	.+32     	; 0x9f6 <__vector_7+0xac>
		{
			min = 0;
 9d6:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <min>
			hrs++; // Incrementa as horas
 9da:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <hrs>
 9de:	8f 5f       	subi	r24, 0xFF	; 255
 9e0:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <hrs>
			
			OCR0A = 0; // Reseta PWM
 9e4:	17 bc       	out	0x27, r1	; 39
 9e6:	8f e3       	ldi	r24, 0x3F	; 63
 9e8:	9c e9       	ldi	r25, 0x9C	; 156
 9ea:	01 97       	sbiw	r24, 0x01	; 1
 9ec:	f1 f7       	brne	.-4      	; 0x9ea <__vector_7+0xa0>
 9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <__vector_7+0xa6>
 9f0:	00 00       	nop
			_delay_ms(10);
			seleciona_saida_demux(); // Chamada para função que seleciona a saída do DEMUX
 9f2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <seleciona_saida_demux>
		}
	}
}
 9f6:	ff 91       	pop	r31
 9f8:	ef 91       	pop	r30
 9fa:	bf 91       	pop	r27
 9fc:	af 91       	pop	r26
 9fe:	9f 91       	pop	r25
 a00:	8f 91       	pop	r24
 a02:	7f 91       	pop	r23
 a04:	6f 91       	pop	r22
 a06:	5f 91       	pop	r21
 a08:	4f 91       	pop	r20
 a0a:	3f 91       	pop	r19
 a0c:	2f 91       	pop	r18
 a0e:	0f 90       	pop	r0
 a10:	0f be       	out	0x3f, r0	; 63
 a12:	0f 90       	pop	r0
 a14:	1f 90       	pop	r1
 a16:	18 95       	reti

00000a18 <main>:
	return UDR0; // Lê o dado recebido e retorna
}

int main(void)
{
	DDRB = 0b11111110; // Define todos os pinos da porta B como saída (exceto B0)
 a18:	8e ef       	ldi	r24, 0xFE	; 254
 a1a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001; // Habilita pull-up do pino PB0
 a1c:	c1 e0       	ldi	r28, 0x01	; 1
 a1e:	c5 b9       	out	0x05, r28	; 5
	DDRD = 0b11110011; // Define os pinos da porta D: D0-D3 como entradas; D4-D7 como saída
 a20:	83 ef       	ldi	r24, 0xF3	; 243
 a22:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00001100; // Habilita pull-ups dos pinos PD2 e PD3
 a24:	8c e0       	ldi	r24, 0x0C	; 12
 a26:	8b b9       	out	0x0b, r24	; 11
	
	// Variáveis inicializadas
	mili = 0;
 a28:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <mili+0x1>
 a2c:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <mili>
	seg = 0;
 a30:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <seg>
	min = 0;
 a34:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <min>
	hrs = 0;
 a38:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <hrs>
	liga = 1;
 a3c:	c0 93 b0 03 	sts	0x03B0, r28	; 0x8003b0 <liga>
	pausa = 0;
 a40:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <pausa>
	finaliza = 0;
 a44:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <finaliza>
	seleciona_saida_demux(); // Chamada para função que seleciona a saída do DEMUX
 a48:	0e 94 68 04 	call	0x8d0	; 0x8d0 <seleciona_saida_demux>
	
	USART_Init(MYUBRR); // Chamada para função que inicializa a USART
 a4c:	87 e6       	ldi	r24, 0x67	; 103
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 68 01 	call	0x2d0	; 0x2d0 <USART_Init>
	
	// Fast PWM, TOP = 0xFF, OC0A habilitado
	TCCR0A = 0b10000011; // PWM não invertido no pino OC0A
 a54:	83 e8       	ldi	r24, 0x83	; 131
 a56:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101; // Liga TC0, prescaler = 1024, fpwm = f0sc/(256*prescaler) = 16MHz/(256*1024) = 61Hz
 a58:	85 e0       	ldi	r24, 0x05	; 5
 a5a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0; // Controle do ciclo ativo do PWM 0C0A
 a5c:	17 bc       	out	0x27, r1	; 39
	
	// Configuração das Interrupções Externas
	EICRA = 0b00001010;// Interrupções externas INT0 e INT1 na borda de descida
 a5e:	8a e0       	ldi	r24, 0x0A	; 10
 a60:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011;// Habilita as interrupções externas INT0 e INT1
 a64:	93 e0       	ldi	r25, 0x03	; 3
 a66:	9d bb       	out	0x1d, r25	; 29
	
	// Configuração da Interrupção 0 por mudança de pino
	PCICR = 0b00000001; // Enable pin change interrupt 0
 a68:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = 0b00000001; // Pin change enable mask 0
 a6c:	c0 93 6b 00 	sts	0x006B, r28	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
	// ** Conferir comentários do Timer **
	// Configuração dos Timers
	TCCR2A = 0b00000010; // Habilita modo CTC do TC0
 a70:	82 e0       	ldi	r24, 0x02	; 2
 a72:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000011; // Liga TC0 com prescaler = 64
 a76:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 249;		 // Ajusta o comparador para o TC0 contar até 249
 a7a:	99 ef       	ldi	r25, 0xF9	; 249
 a7c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = 0b00000010; // Habilita a interrupção na igualdade de comparação com OCR0A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
 a80:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	sei(); // Habilita interrupções globais, ativando o bit I do SREG
 a84:	78 94       	sei
	
	nokia_lcd_init(); // Inicializa o LCD
 a86:	0e 94 95 05 	call	0xb2a	; 0xb2a <nokia_lcd_init>
	nokia_lcd_clear();  // Limpa o display
 a8a:	0e 94 d6 05 	call	0xbac	; 0xbac <nokia_lcd_clear>
	nokia_lcd_write_string("--------------", 1);  // Informação que será exibida no display e tamanho da fonte
 a8e:	61 e0       	ldi	r22, 0x01	; 1
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	91 e0       	ldi	r25, 0x01	; 1
 a94:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 10); // Move o cursor
 a98:	6a e0       	ldi	r22, 0x0A	; 10
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Digite quantas", 1);
 aa0:	61 e0       	ldi	r22, 0x01	; 1
 aa2:	87 e8       	ldi	r24, 0x87	; 135
 aa4:	91 e0       	ldi	r25, 0x01	; 1
 aa6:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 20);
 aaa:	64 e1       	ldi	r22, 0x14	; 20
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
	nokia_lcd_write_string(" tarefas vai", 1);
 ab2:	61 e0       	ldi	r22, 0x01	; 1
 ab4:	86 e9       	ldi	r24, 0x96	; 150
 ab6:	91 e0       	ldi	r25, 0x01	; 1
 ab8:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 30);
 abc:	6e e1       	ldi	r22, 0x1E	; 30
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
	nokia_lcd_write_string("   realizar", 1);
 ac4:	61 e0       	ldi	r22, 0x01	; 1
 ac6:	83 ea       	ldi	r24, 0xA3	; 163
 ac8:	91 e0       	ldi	r25, 0x01	; 1
 aca:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 40);
 ace:	68 e2       	ldi	r22, 0x28	; 40
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <nokia_lcd_set_cursor>
	nokia_lcd_write_string("--------------", 1);
 ad6:	61 e0       	ldi	r22, 0x01	; 1
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	91 e0       	ldi	r25, 0x01	; 1
 adc:	0e 94 c2 06 	call	0xd84	; 0xd84 <nokia_lcd_write_string>
	nokia_lcd_render(); // Exibe as informações apresentadas acima no display
 ae0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nokia_lcd_render>
 ae4:	ff cf       	rjmp	.-2      	; 0xae4 <main+0xcc>

00000ae6 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 ae6:	29 98       	cbi	0x05, 1	; 5
 ae8:	66 23       	and	r22, r22
 aea:	11 f0       	breq	.+4      	; 0xaf0 <write+0xa>
 aec:	2b 9a       	sbi	0x05, 3	; 5
 aee:	15 c0       	rjmp	.+42     	; 0xb1a <write+0x34>
 af0:	2b 98       	cbi	0x05, 3	; 5
 af2:	13 c0       	rjmp	.+38     	; 0xb1a <write+0x34>
 af4:	ac 01       	movw	r20, r24
 af6:	02 2e       	mov	r0, r18
 af8:	02 c0       	rjmp	.+4      	; 0xafe <write+0x18>
 afa:	55 95       	asr	r21
 afc:	47 95       	ror	r20
 afe:	0a 94       	dec	r0
 b00:	e2 f7       	brpl	.-8      	; 0xafa <write+0x14>
 b02:	40 ff       	sbrs	r20, 0
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <write+0x24>
 b06:	2c 9a       	sbi	0x05, 4	; 5
 b08:	01 c0       	rjmp	.+2      	; 0xb0c <write+0x26>
 b0a:	2c 98       	cbi	0x05, 4	; 5
 b0c:	2d 9a       	sbi	0x05, 5	; 5
 b0e:	2d 98       	cbi	0x05, 5	; 5
 b10:	21 50       	subi	r18, 0x01	; 1
 b12:	31 09       	sbc	r19, r1
 b14:	78 f7       	brcc	.-34     	; 0xaf4 <write+0xe>
 b16:	29 9a       	sbi	0x05, 1	; 5
 b18:	08 95       	ret
 b1a:	27 e0       	ldi	r18, 0x07	; 7
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	e9 cf       	rjmp	.-46     	; 0xaf4 <write+0xe>

00000b22 <write_cmd>:
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	0e 94 73 05 	call	0xae6	; 0xae6 <write>
 b28:	08 95       	ret

00000b2a <nokia_lcd_init>:
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	21 9a       	sbi	0x04, 1	; 4
 b30:	22 9a       	sbi	0x04, 2	; 4
 b32:	23 9a       	sbi	0x04, 3	; 4
 b34:	24 9a       	sbi	0x04, 4	; 4
 b36:	25 9a       	sbi	0x04, 5	; 4
 b38:	2a 9a       	sbi	0x05, 2	; 5
 b3a:	29 9a       	sbi	0x05, 1	; 5
 b3c:	83 ec       	ldi	r24, 0xC3	; 195
 b3e:	99 e0       	ldi	r25, 0x09	; 9
 b40:	01 97       	sbiw	r24, 0x01	; 1
 b42:	f1 f7       	brne	.-4      	; 0xb40 <nokia_lcd_init+0x16>
 b44:	00 c0       	rjmp	.+0      	; 0xb46 <nokia_lcd_init+0x1c>
 b46:	00 00       	nop
 b48:	2a 98       	cbi	0x05, 2	; 5
 b4a:	8b e5       	ldi	r24, 0x5B	; 91
 b4c:	94 e4       	ldi	r25, 0x44	; 68
 b4e:	01 97       	sbiw	r24, 0x01	; 1
 b50:	f1 f7       	brne	.-4      	; 0xb4e <nokia_lcd_init+0x24>
 b52:	00 c0       	rjmp	.+0      	; 0xb54 <nokia_lcd_init+0x2a>
 b54:	00 00       	nop
 b56:	2a 9a       	sbi	0x05, 2	; 5
 b58:	29 98       	cbi	0x05, 1	; 5
 b5a:	81 e2       	ldi	r24, 0x21	; 33
 b5c:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 b60:	83 e1       	ldi	r24, 0x13	; 19
 b62:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 b66:	86 e0       	ldi	r24, 0x06	; 6
 b68:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 b6c:	82 ec       	ldi	r24, 0xC2	; 194
 b6e:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 b72:	80 e2       	ldi	r24, 0x20	; 32
 b74:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 b78:	89 e0       	ldi	r24, 0x09	; 9
 b7a:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 b7e:	80 e8       	ldi	r24, 0x80	; 128
 b80:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 b84:	80 e4       	ldi	r24, 0x40	; 64
 b86:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 b8a:	c8 ef       	ldi	r28, 0xF8	; 248
 b8c:	d1 e0       	ldi	r29, 0x01	; 1
 b8e:	61 e0       	ldi	r22, 0x01	; 1
 b90:	80 e0       	ldi	r24, 0x00	; 0
 b92:	0e 94 73 05 	call	0xae6	; 0xae6 <write>
 b96:	21 97       	sbiw	r28, 0x01	; 1
 b98:	d1 f7       	brne	.-12     	; 0xb8e <nokia_lcd_init+0x64>
 b9a:	88 e0       	ldi	r24, 0x08	; 8
 b9c:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 ba0:	8c e0       	ldi	r24, 0x0C	; 12
 ba2:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	08 95       	ret

00000bac <nokia_lcd_clear>:
 bac:	80 e8       	ldi	r24, 0x80	; 128
 bae:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 bb2:	80 e4       	ldi	r24, 0x40	; 64
 bb4:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 bb8:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <nokia_lcd+0x1f8>
 bbc:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <nokia_lcd+0x1f9>
 bc0:	e1 eb       	ldi	r30, 0xB1	; 177
 bc2:	f1 e0       	ldi	r31, 0x01	; 1
 bc4:	89 ea       	ldi	r24, 0xA9	; 169
 bc6:	93 e0       	ldi	r25, 0x03	; 3
 bc8:	11 92       	st	Z+, r1
 bca:	e8 17       	cp	r30, r24
 bcc:	f9 07       	cpc	r31, r25
 bce:	e1 f7       	brne	.-8      	; 0xbc8 <nokia_lcd_clear+0x1c>
 bd0:	08 95       	ret

00000bd2 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 bd2:	26 2f       	mov	r18, r22
 bd4:	26 95       	lsr	r18
 bd6:	26 95       	lsr	r18
 bd8:	26 95       	lsr	r18
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	34 e5       	ldi	r19, 0x54	; 84
 bde:	23 9f       	mul	r18, r19
 be0:	80 0d       	add	r24, r0
 be2:	91 1d       	adc	r25, r1
 be4:	11 24       	eor	r1, r1
	if (value)
 be6:	44 23       	and	r20, r20
 be8:	79 f0       	breq	.+30     	; 0xc08 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
 bea:	fc 01       	movw	r30, r24
 bec:	ef 54       	subi	r30, 0x4F	; 79
 bee:	fe 4f       	sbci	r31, 0xFE	; 254
 bf0:	67 70       	andi	r22, 0x07	; 7
 bf2:	81 e0       	ldi	r24, 0x01	; 1
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <nokia_lcd_set_pixel+0x2a>
 bf8:	88 0f       	add	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	6a 95       	dec	r22
 bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <nokia_lcd_set_pixel+0x26>
 c00:	90 81       	ld	r25, Z
 c02:	89 2b       	or	r24, r25
 c04:	80 83       	st	Z, r24
 c06:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 c08:	fc 01       	movw	r30, r24
 c0a:	ef 54       	subi	r30, 0x4F	; 79
 c0c:	fe 4f       	sbci	r31, 0xFE	; 254
 c0e:	67 70       	andi	r22, 0x07	; 7
 c10:	81 e0       	ldi	r24, 0x01	; 1
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	02 c0       	rjmp	.+4      	; 0xc1a <nokia_lcd_set_pixel+0x48>
 c16:	88 0f       	add	r24, r24
 c18:	99 1f       	adc	r25, r25
 c1a:	6a 95       	dec	r22
 c1c:	e2 f7       	brpl	.-8      	; 0xc16 <nokia_lcd_set_pixel+0x44>
 c1e:	80 95       	com	r24
 c20:	90 81       	ld	r25, Z
 c22:	89 23       	and	r24, r25
 c24:	80 83       	st	Z, r24
 c26:	08 95       	ret

00000c28 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 c28:	5f 92       	push	r5
 c2a:	6f 92       	push	r6
 c2c:	7f 92       	push	r7
 c2e:	8f 92       	push	r8
 c30:	9f 92       	push	r9
 c32:	af 92       	push	r10
 c34:	bf 92       	push	r11
 c36:	cf 92       	push	r12
 c38:	df 92       	push	r13
 c3a:	ef 92       	push	r14
 c3c:	ff 92       	push	r15
 c3e:	0f 93       	push	r16
 c40:	1f 93       	push	r17
 c42:	cf 93       	push	r28
 c44:	df 93       	push	r29
 c46:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 c48:	26 2f       	mov	r18, r22
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	49 01       	movw	r8, r18
 c4e:	88 0c       	add	r8, r8
 c50:	99 1c       	adc	r9, r9
 c52:	88 0c       	add	r8, r8
 c54:	99 1c       	adc	r9, r9
 c56:	82 0e       	add	r8, r18
 c58:	93 1e       	adc	r9, r19
 c5a:	18 14       	cp	r1, r8
 c5c:	19 04       	cpc	r1, r9
 c5e:	0c f0       	brlt	.+2      	; 0xc62 <nokia_lcd_write_char+0x3a>
 c60:	5d c0       	rjmp	.+186    	; 0xd1c <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
 c62:	89 01       	movw	r16, r18
 c64:	00 0f       	add	r16, r16
 c66:	11 1f       	adc	r17, r17
 c68:	00 0f       	add	r16, r16
 c6a:	11 1f       	adc	r17, r17
 c6c:	00 0f       	add	r16, r16
 c6e:	11 1f       	adc	r17, r17
 c70:	02 1b       	sub	r16, r18
 c72:	13 0b       	sbc	r17, r19
 c74:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 c76:	a8 2e       	mov	r10, r24
 c78:	b1 2c       	mov	r11, r1
 c7a:	c5 01       	movw	r24, r10
 c7c:	80 97       	sbiw	r24, 0x20	; 32
 c7e:	5c 01       	movw	r10, r24
 c80:	aa 0c       	add	r10, r10
 c82:	bb 1c       	adc	r11, r11
 c84:	aa 0c       	add	r10, r10
 c86:	bb 1c       	adc	r11, r11
 c88:	a8 0e       	add	r10, r24
 c8a:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 c8c:	0f 2e       	mov	r0, r31
 c8e:	fa ea       	ldi	r31, 0xAA	; 170
 c90:	cf 2e       	mov	r12, r31
 c92:	f3 e0       	ldi	r31, 0x03	; 3
 c94:	df 2e       	mov	r13, r31
 c96:	f0 2d       	mov	r31, r0
 c98:	0f 2e       	mov	r0, r31
 c9a:	f9 ea       	ldi	r31, 0xA9	; 169
 c9c:	ef 2e       	mov	r14, r31
 c9e:	f3 e0       	ldi	r31, 0x03	; 3
 ca0:	ff 2e       	mov	r15, r31
 ca2:	f0 2d       	mov	r31, r0
 ca4:	2d c0       	rjmp	.+90     	; 0xd00 <nokia_lcd_write_char+0xd8>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 ca6:	fe 01       	movw	r30, r28
 ca8:	24 91       	lpm	r18, Z
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	87 2d       	mov	r24, r7
 cae:	65 2d       	mov	r22, r5
 cb0:	0e 94 f4 06 	call	0xde8	; 0xde8 <__udivmodqi4>
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <nokia_lcd_write_char+0x92>
 cb6:	35 95       	asr	r19
 cb8:	27 95       	ror	r18
 cba:	8a 95       	dec	r24
 cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <nokia_lcd_write_char+0x8e>
 cbe:	20 ff       	sbrs	r18, 0
 cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <nokia_lcd_write_char+0xae>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 cc2:	f6 01       	movw	r30, r12
 cc4:	60 81       	ld	r22, Z
 cc6:	67 0d       	add	r22, r7
 cc8:	f7 01       	movw	r30, r14
 cca:	80 81       	ld	r24, Z
 ccc:	41 e0       	ldi	r20, 0x01	; 1
 cce:	86 0d       	add	r24, r6
 cd0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <nokia_lcd_set_pixel>
 cd4:	09 c0       	rjmp	.+18     	; 0xce8 <nokia_lcd_write_char+0xc0>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 cd6:	f6 01       	movw	r30, r12
 cd8:	60 81       	ld	r22, Z
 cda:	67 0d       	add	r22, r7
 cdc:	f7 01       	movw	r30, r14
 cde:	80 81       	ld	r24, Z
 ce0:	40 e0       	ldi	r20, 0x00	; 0
 ce2:	86 0d       	add	r24, r6
 ce4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 ce8:	73 94       	inc	r7
 cea:	87 2d       	mov	r24, r7
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	80 17       	cp	r24, r16
 cf0:	91 07       	cpc	r25, r17
 cf2:	cc f2       	brlt	.-78     	; 0xca6 <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 cf4:	63 94       	inc	r6
 cf6:	86 2d       	mov	r24, r6
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	88 15       	cp	r24, r8
 cfc:	99 05       	cpc	r25, r9
 cfe:	74 f4       	brge	.+28     	; 0xd1c <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
 d00:	10 16       	cp	r1, r16
 d02:	11 06       	cpc	r1, r17
 d04:	bc f7       	brge	.-18     	; 0xcf4 <nokia_lcd_write_char+0xcc>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 d06:	86 2d       	mov	r24, r6
 d08:	65 2d       	mov	r22, r5
 d0a:	0e 94 f4 06 	call	0xde8	; 0xde8 <__udivmodqi4>
 d0e:	e5 01       	movw	r28, r10
 d10:	c8 0f       	add	r28, r24
 d12:	d1 1d       	adc	r29, r1
 d14:	ca 58       	subi	r28, 0x8A	; 138
 d16:	df 4f       	sbci	r29, 0xFF	; 255
 d18:	71 2c       	mov	r7, r1
 d1a:	c5 cf       	rjmp	.-118    	; 0xca6 <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 d1c:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <nokia_lcd+0x1f8>
 d20:	91 e0       	ldi	r25, 0x01	; 1
 d22:	98 0f       	add	r25, r24
 d24:	85 2d       	mov	r24, r5
 d26:	88 0f       	add	r24, r24
 d28:	88 0f       	add	r24, r24
 d2a:	85 0d       	add	r24, r5
 d2c:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
 d2e:	84 35       	cpi	r24, 0x54	; 84
 d30:	18 f4       	brcc	.+6      	; 0xd38 <nokia_lcd_write_char+0x110>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 d32:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <nokia_lcd+0x1f8>
 d36:	0e c0       	rjmp	.+28     	; 0xd54 <nokia_lcd_write_char+0x12c>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
 d38:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
 d3c:	ea ea       	ldi	r30, 0xAA	; 170
 d3e:	f3 e0       	ldi	r31, 0x03	; 3
 d40:	80 81       	ld	r24, Z
 d42:	91 e0       	ldi	r25, 0x01	; 1
 d44:	98 0f       	add	r25, r24
 d46:	85 2d       	mov	r24, r5
 d48:	88 0f       	add	r24, r24
 d4a:	88 0f       	add	r24, r24
 d4c:	88 0f       	add	r24, r24
 d4e:	85 19       	sub	r24, r5
 d50:	89 0f       	add	r24, r25
 d52:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 d54:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <nokia_lcd+0x1f9>
 d58:	80 33       	cpi	r24, 0x30	; 48
 d5a:	20 f0       	brcs	.+8      	; 0xd64 <nokia_lcd_write_char+0x13c>
		nokia_lcd.cursor_x = 0;
 d5c:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
 d60:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <nokia_lcd+0x1f9>
	}
}
 d64:	df 91       	pop	r29
 d66:	cf 91       	pop	r28
 d68:	1f 91       	pop	r17
 d6a:	0f 91       	pop	r16
 d6c:	ff 90       	pop	r15
 d6e:	ef 90       	pop	r14
 d70:	df 90       	pop	r13
 d72:	cf 90       	pop	r12
 d74:	bf 90       	pop	r11
 d76:	af 90       	pop	r10
 d78:	9f 90       	pop	r9
 d7a:	8f 90       	pop	r8
 d7c:	7f 90       	pop	r7
 d7e:	6f 90       	pop	r6
 d80:	5f 90       	pop	r5
 d82:	08 95       	ret

00000d84 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 d84:	1f 93       	push	r17
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
 d8a:	ec 01       	movw	r28, r24
	while(*str)
 d8c:	88 81       	ld	r24, Y
 d8e:	88 23       	and	r24, r24
 d90:	41 f0       	breq	.+16     	; 0xda2 <nokia_lcd_write_string+0x1e>
 d92:	16 2f       	mov	r17, r22
 d94:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
 d96:	61 2f       	mov	r22, r17
 d98:	0e 94 14 06 	call	0xc28	; 0xc28 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 d9c:	89 91       	ld	r24, Y+
 d9e:	81 11       	cpse	r24, r1
 da0:	fa cf       	rjmp	.-12     	; 0xd96 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
 da2:	df 91       	pop	r29
 da4:	cf 91       	pop	r28
 da6:	1f 91       	pop	r17
 da8:	08 95       	ret

00000daa <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 daa:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
 dae:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <nokia_lcd+0x1f9>
 db2:	08 95       	ret

00000db4 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 db4:	0f 93       	push	r16
 db6:	1f 93       	push	r17
 db8:	cf 93       	push	r28
 dba:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 dbc:	80 e8       	ldi	r24, 0x80	; 128
 dbe:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
	write_cmd(0x40);
 dc2:	80 e4       	ldi	r24, 0x40	; 64
 dc4:	0e 94 91 05 	call	0xb22	; 0xb22 <write_cmd>
 dc8:	c1 eb       	ldi	r28, 0xB1	; 177
 dca:	d1 e0       	ldi	r29, 0x01	; 1
 dcc:	09 ea       	ldi	r16, 0xA9	; 169
 dce:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 dd0:	61 e0       	ldi	r22, 0x01	; 1
 dd2:	89 91       	ld	r24, Y+
 dd4:	0e 94 73 05 	call	0xae6	; 0xae6 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 dd8:	c0 17       	cp	r28, r16
 dda:	d1 07       	cpc	r29, r17
 ddc:	c9 f7       	brne	.-14     	; 0xdd0 <nokia_lcd_render+0x1c>
		write_data(nokia_lcd.screen[i]);
}
 dde:	df 91       	pop	r29
 de0:	cf 91       	pop	r28
 de2:	1f 91       	pop	r17
 de4:	0f 91       	pop	r16
 de6:	08 95       	ret

00000de8 <__udivmodqi4>:
 de8:	99 1b       	sub	r25, r25
 dea:	79 e0       	ldi	r23, 0x09	; 9
 dec:	04 c0       	rjmp	.+8      	; 0xdf6 <__udivmodqi4_ep>

00000dee <__udivmodqi4_loop>:
 dee:	99 1f       	adc	r25, r25
 df0:	96 17       	cp	r25, r22
 df2:	08 f0       	brcs	.+2      	; 0xdf6 <__udivmodqi4_ep>
 df4:	96 1b       	sub	r25, r22

00000df6 <__udivmodqi4_ep>:
 df6:	88 1f       	adc	r24, r24
 df8:	7a 95       	dec	r23
 dfa:	c9 f7       	brne	.-14     	; 0xdee <__udivmodqi4_loop>
 dfc:	80 95       	com	r24
 dfe:	08 95       	ret

00000e00 <__tablejump2__>:
 e00:	ee 0f       	add	r30, r30
 e02:	ff 1f       	adc	r31, r31
 e04:	05 90       	lpm	r0, Z+
 e06:	f4 91       	lpm	r31, Z
 e08:	e0 2d       	mov	r30, r0
 e0a:	09 94       	ijmp

00000e0c <itoa>:
 e0c:	45 32       	cpi	r20, 0x25	; 37
 e0e:	51 05       	cpc	r21, r1
 e10:	20 f4       	brcc	.+8      	; 0xe1a <itoa+0xe>
 e12:	42 30       	cpi	r20, 0x02	; 2
 e14:	10 f0       	brcs	.+4      	; 0xe1a <itoa+0xe>
 e16:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__itoa_ncheck>
 e1a:	fb 01       	movw	r30, r22
 e1c:	10 82       	st	Z, r1
 e1e:	cb 01       	movw	r24, r22
 e20:	08 95       	ret

00000e22 <__itoa_ncheck>:
 e22:	bb 27       	eor	r27, r27
 e24:	4a 30       	cpi	r20, 0x0A	; 10
 e26:	31 f4       	brne	.+12     	; 0xe34 <__itoa_ncheck+0x12>
 e28:	99 23       	and	r25, r25
 e2a:	22 f4       	brpl	.+8      	; 0xe34 <__itoa_ncheck+0x12>
 e2c:	bd e2       	ldi	r27, 0x2D	; 45
 e2e:	90 95       	com	r25
 e30:	81 95       	neg	r24
 e32:	9f 4f       	sbci	r25, 0xFF	; 255
 e34:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__utoa_common>

00000e38 <__utoa_ncheck>:
 e38:	bb 27       	eor	r27, r27

00000e3a <__utoa_common>:
 e3a:	fb 01       	movw	r30, r22
 e3c:	55 27       	eor	r21, r21
 e3e:	aa 27       	eor	r26, r26
 e40:	88 0f       	add	r24, r24
 e42:	99 1f       	adc	r25, r25
 e44:	aa 1f       	adc	r26, r26
 e46:	a4 17       	cp	r26, r20
 e48:	10 f0       	brcs	.+4      	; 0xe4e <__utoa_common+0x14>
 e4a:	a4 1b       	sub	r26, r20
 e4c:	83 95       	inc	r24
 e4e:	50 51       	subi	r21, 0x10	; 16
 e50:	b9 f7       	brne	.-18     	; 0xe40 <__utoa_common+0x6>
 e52:	a0 5d       	subi	r26, 0xD0	; 208
 e54:	aa 33       	cpi	r26, 0x3A	; 58
 e56:	08 f0       	brcs	.+2      	; 0xe5a <__utoa_common+0x20>
 e58:	a9 5d       	subi	r26, 0xD9	; 217
 e5a:	a1 93       	st	Z+, r26
 e5c:	00 97       	sbiw	r24, 0x00	; 0
 e5e:	79 f7       	brne	.-34     	; 0xe3e <__utoa_common+0x4>
 e60:	b1 11       	cpse	r27, r1
 e62:	b1 93       	st	Z+, r27
 e64:	11 92       	st	Z+, r1
 e66:	cb 01       	movw	r24, r22
 e68:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <strrev>

00000e6c <strrev>:
 e6c:	dc 01       	movw	r26, r24
 e6e:	fc 01       	movw	r30, r24
 e70:	67 2f       	mov	r22, r23
 e72:	71 91       	ld	r23, Z+
 e74:	77 23       	and	r23, r23
 e76:	e1 f7       	brne	.-8      	; 0xe70 <strrev+0x4>
 e78:	32 97       	sbiw	r30, 0x02	; 2
 e7a:	04 c0       	rjmp	.+8      	; 0xe84 <strrev+0x18>
 e7c:	7c 91       	ld	r23, X
 e7e:	6d 93       	st	X+, r22
 e80:	70 83       	st	Z, r23
 e82:	62 91       	ld	r22, -Z
 e84:	ae 17       	cp	r26, r30
 e86:	bf 07       	cpc	r27, r31
 e88:	c8 f3       	brcs	.-14     	; 0xe7c <strrev+0x10>
 e8a:	08 95       	ret

00000e8c <_exit>:
 e8c:	f8 94       	cli

00000e8e <__stop_program>:
 e8e:	ff cf       	rjmp	.-2      	; 0xe8e <__stop_program>
