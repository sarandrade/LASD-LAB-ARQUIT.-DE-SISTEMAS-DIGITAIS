
Projeto_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  000014f8  0000158c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000334  008001d0  008001d0  0000165c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000016d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e16  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aaf  00000000  00000000  0000461e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000124f  00000000  00000000  000050cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  0000631c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077c  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016e0  00000000  00000000  00006ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000085ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 01 	jmp	0x256	; 0x256 <__ctors_end>
       4:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__vector_1>
       8:	0c 94 22 04 	jmp	0x844	; 0x844 <__vector_2>
       c:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_3>
      10:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      14:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      18:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      1c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_7>
      20:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      24:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      28:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      2c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      30:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      34:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      38:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      3c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      40:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      44:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      48:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_18>
      4c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      50:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      54:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      58:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      5c:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      60:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      64:	0c 94 48 01 	jmp	0x290	; 0x290 <__bad_interrupt>
      68:	22 07       	cpc	r18, r18
      6a:	29 07       	cpc	r18, r25
      6c:	2e 07       	cpc	r18, r30
      6e:	34 07       	cpc	r19, r20
      70:	38 07       	cpc	r19, r24
      72:	3e 07       	cpc	r19, r30
      74:	42 07       	cpc	r20, r18

00000076 <CHARSET>:
      76:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      86:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      96:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      a6:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      b6:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      c6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      d6:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      e6:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      f6:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     106:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     116:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     126:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     136:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     146:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     156:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     166:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     176:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     186:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     196:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1a6:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1b6:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1c6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1d6:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1e6:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1f6:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     206:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     216:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     226:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     236:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     246:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000256 <__ctors_end>:
     256:	11 24       	eor	r1, r1
     258:	1f be       	out	0x3f, r1	; 63
     25a:	cf ef       	ldi	r28, 0xFF	; 255
     25c:	d8 e0       	ldi	r29, 0x08	; 8
     25e:	de bf       	out	0x3e, r29	; 62
     260:	cd bf       	out	0x3d, r28	; 61

00000262 <__do_copy_data>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a0 e0       	ldi	r26, 0x00	; 0
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	e8 ef       	ldi	r30, 0xF8	; 248
     26a:	f4 e1       	ldi	r31, 0x14	; 20
     26c:	02 c0       	rjmp	.+4      	; 0x272 <__do_copy_data+0x10>
     26e:	05 90       	lpm	r0, Z+
     270:	0d 92       	st	X+, r0
     272:	a0 3d       	cpi	r26, 0xD0	; 208
     274:	b1 07       	cpc	r27, r17
     276:	d9 f7       	brne	.-10     	; 0x26e <__do_copy_data+0xc>

00000278 <__do_clear_bss>:
     278:	25 e0       	ldi	r18, 0x05	; 5
     27a:	a0 ed       	ldi	r26, 0xD0	; 208
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	01 c0       	rjmp	.+2      	; 0x282 <.do_clear_bss_start>

00000280 <.do_clear_bss_loop>:
     280:	1d 92       	st	X+, r1

00000282 <.do_clear_bss_start>:
     282:	a4 30       	cpi	r26, 0x04	; 4
     284:	b2 07       	cpc	r27, r18
     286:	e1 f7       	brne	.-8      	; 0x280 <.do_clear_bss_loop>
     288:	0e 94 02 08 	call	0x1004	; 0x1004 <main>
     28c:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <_exit>

00000290 <__bad_interrupt>:
     290:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000294 <define_porcentagem_PWM>:
// Função para recepção de um frame de 5 a 8 bits
unsigned char USART_Receive(void)
{
	while(!(UCSR0A & (1<<RXC0))); // Espera o dado ser recebido
	return UDR0; // Lê o dado recebido e retorna
}
     294:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <min>
     298:	89 31       	cpi	r24, 0x19	; 25
     29a:	89 f0       	breq	.+34     	; 0x2be <define_porcentagem_PWM+0x2a>
     29c:	2c f4       	brge	.+10     	; 0x2a8 <define_porcentagem_PWM+0x14>
     29e:	88 23       	and	r24, r24
     2a0:	41 f0       	breq	.+16     	; 0x2b2 <define_porcentagem_PWM+0x1e>
     2a2:	8d 30       	cpi	r24, 0x0D	; 13
     2a4:	49 f0       	breq	.+18     	; 0x2b8 <define_porcentagem_PWM+0x24>
     2a6:	08 95       	ret
     2a8:	85 32       	cpi	r24, 0x25	; 37
     2aa:	61 f0       	breq	.+24     	; 0x2c4 <define_porcentagem_PWM+0x30>
     2ac:	81 33       	cpi	r24, 0x31	; 49
     2ae:	69 f0       	breq	.+26     	; 0x2ca <define_porcentagem_PWM+0x36>
     2b0:	08 95       	ret
     2b2:	83 e3       	ldi	r24, 0x33	; 51
     2b4:	87 bd       	out	0x27, r24	; 39
     2b6:	08 95       	ret
     2b8:	86 e6       	ldi	r24, 0x66	; 102
     2ba:	87 bd       	out	0x27, r24	; 39
     2bc:	08 95       	ret
     2be:	89 e9       	ldi	r24, 0x99	; 153
     2c0:	87 bd       	out	0x27, r24	; 39
     2c2:	08 95       	ret
     2c4:	8c ec       	ldi	r24, 0xCC	; 204
     2c6:	87 bd       	out	0x27, r24	; 39
     2c8:	08 95       	ret
     2ca:	8a ef       	ldi	r24, 0xFA	; 250
     2cc:	87 bd       	out	0x27, r24	; 39
     2ce:	08 95       	ret

000002d0 <USART_Init>:
     2d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     2d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     2d8:	88 e9       	ldi	r24, 0x98	; 152
     2da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     2de:	8e e0       	ldi	r24, 0x0E	; 14
     2e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	87 b9       	out	0x07, r24	; 7
     2e8:	08 95       	ret

000002ea <USART_Transmit>:
     2ea:	e0 ec       	ldi	r30, 0xC0	; 192
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	90 81       	ld	r25, Z
     2f0:	95 ff       	sbrs	r25, 5
     2f2:	fd cf       	rjmp	.-6      	; 0x2ee <USART_Transmit+0x4>
     2f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     2f8:	08 95       	ret

000002fa <__vector_18>:
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	2f 93       	push	r18
     306:	3f 93       	push	r19
     308:	4f 93       	push	r20
     30a:	5f 93       	push	r21
     30c:	6f 93       	push	r22
     30e:	7f 93       	push	r23
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	af 93       	push	r26
     316:	bf 93       	push	r27
     318:	ef 93       	push	r30
     31a:	ff 93       	push	r31
     31c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     320:	80 53       	subi	r24, 0x30	; 48
     322:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <tarefas>
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <tarefa_atual>
     32c:	83 33       	cpi	r24, 0x33	; 51
     32e:	d8 f5       	brcc	.+118    	; 0x3a6 <__vector_18+0xac>
     330:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     33e:	6a e0       	ldi	r22, 0x0A	; 10
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	8f e0       	ldi	r24, 0x0F	; 15
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     350:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <tarefas>
     354:	4a e0       	ldi	r20, 0x0A	; 10
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	75 e0       	ldi	r23, 0x05	; 5
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
     360:	64 e1       	ldi	r22, 0x14	; 20
     362:	83 e2       	ldi	r24, 0x23	; 35
     364:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	95 e0       	ldi	r25, 0x05	; 5
     36e:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     372:	6e e1       	ldi	r22, 0x1E	; 30
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	8b e1       	ldi	r24, 0x1B	; 27
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     384:	68 e2       	ldi	r22, 0x28	; 40
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     396:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     39a:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <tarefas>
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_Transmit>
     3a4:	35 c0       	rjmp	.+106    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     3a6:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     3b4:	6a e0       	ldi	r22, 0x0A	; 10
     3b6:	8e e0       	ldi	r24, 0x0E	; 14
     3b8:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	86 e2       	ldi	r24, 0x26	; 38
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     3c6:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <tarefas>
     3ca:	4a e0       	ldi	r20, 0x0A	; 10
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	75 e0       	ldi	r23, 0x05	; 5
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
     3d6:	64 e1       	ldi	r22, 0x14	; 20
     3d8:	85 e1       	ldi	r24, 0x15	; 21
     3da:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	81 e3       	ldi	r24, 0x31	; 49
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     3e8:	6e e1       	ldi	r22, 0x1E	; 30
     3ea:	87 e0       	ldi	r24, 0x07	; 7
     3ec:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     3f0:	61 e0       	ldi	r22, 0x01	; 1
     3f2:	88 e3       	ldi	r24, 0x38	; 56
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     3fa:	68 e2       	ldi	r22, 0x28	; 40
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     40c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     410:	ff 91       	pop	r31
     412:	ef 91       	pop	r30
     414:	bf 91       	pop	r27
     416:	af 91       	pop	r26
     418:	9f 91       	pop	r25
     41a:	8f 91       	pop	r24
     41c:	7f 91       	pop	r23
     41e:	6f 91       	pop	r22
     420:	5f 91       	pop	r21
     422:	4f 91       	pop	r20
     424:	3f 91       	pop	r19
     426:	2f 91       	pop	r18
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	0f 90       	pop	r0
     42e:	1f 90       	pop	r1
     430:	18 95       	reti

00000432 <exibe_com_2digitos>:
	}
}

// Função que testa se tem um número tem casa decimal e concatena com "0" caso não tenha
void exibe_com_2digitos(int numero)
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	00 d0       	rcall	.+0      	; 0x438 <exibe_com_2digitos+0x6>
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
	if (numero < 10) // Caso o numero só tenha 1 dígito
     43c:	8a 30       	cpi	r24, 0x0A	; 10
     43e:	91 05       	cpc	r25, r1
     440:	ac f4       	brge	.+42     	; 0x46c <exibe_com_2digitos+0x3a>
	{
		char zero[] = "0"; // O "0" deve ser colocado na casa decimal
     442:	20 e3       	ldi	r18, 0x30	; 48
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	3a 83       	std	Y+2, r19	; 0x02
     448:	29 83       	std	Y+1, r18	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     44a:	4a e0       	ldi	r20, 0x0A	; 10
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	75 e0       	ldi	r23, 0x05	; 5
     450:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
		itoa(numero, snum, 10); // Funçaõ que converte tarefas (int) em string
		strcat(zero, snum); // Concatenação de zero e snum
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	75 e0       	ldi	r23, 0x05	; 5
     458:	ce 01       	movw	r24, r28
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	0e 94 24 0a 	call	0x1448	; 0x1448 <strcat>
		nokia_lcd_write_string(zero, 1);
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	ce 01       	movw	r24, r28
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     46a:	0a c0       	rjmp	.+20     	; 0x480 <exibe_com_2digitos+0x4e>
     46c:	4a e0       	ldi	r20, 0x0A	; 10
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	75 e0       	ldi	r23, 0x05	; 5
     472:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
	}
	else
	{
		itoa(numero, snum, 10); // Funçaõ que converte tarefas (int) em string
		nokia_lcd_write_string(snum, 1);
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	95 e0       	ldi	r25, 0x05	; 5
     47c:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
	}
}
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <atualizaDisplay>:


// ** Módulo funções para calcular e exibir ** //

// Função para atualização do display PCD8544-7
void atualizaDisplay(char entrada){
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	c8 2f       	mov	r28, r24
	
	if (entrada == 'l') // Mensagem: Ligando o programa
     49e:	8c 36       	cpi	r24, 0x6C	; 108
     4a0:	29 f5       	brne	.+74     	; 0x4ec <atualizaDisplay+0x62>
	{
		nokia_lcd_clear();
     4a2:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     4b0:	64 e1       	ldi	r22, 0x14	; 20
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("  Bem-vindo!!", 1);
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	85 e4       	ldi	r24, 0x45	; 69
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     4c2:	68 e2       	ldi	r22, 0x28	; 40
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_render();
     4d4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d8:	2f ef       	ldi	r18, 0xFF	; 255
     4da:	83 ed       	ldi	r24, 0xD3	; 211
     4dc:	90 e3       	ldi	r25, 0x30	; 48
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	80 40       	sbci	r24, 0x00	; 0
     4e2:	90 40       	sbci	r25, 0x00	; 0
     4e4:	e1 f7       	brne	.-8      	; 0x4de <atualizaDisplay+0x54>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <atualizaDisplay+0x5e>
     4e8:	00 00       	nop
     4ea:	51 c1       	rjmp	.+674    	; 0x78e <atualizaDisplay+0x304>
		
		_delay_ms(1000);
	}
	else if (entrada == 'd') // Mensagem: Desligando o programa
     4ec:	84 36       	cpi	r24, 0x64	; 100
     4ee:	49 f5       	brne	.+82     	; 0x542 <atualizaDisplay+0xb8>
	{
		nokia_lcd_clear();
     4f0:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     4fe:	64 e1       	ldi	r22, 0x14	; 20
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(" Desligando...", 1);
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	83 e5       	ldi	r24, 0x53	; 83
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     510:	68 e2       	ldi	r22, 0x28	; 40
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_render();
     522:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     526:	2f ef       	ldi	r18, 0xFF	; 255
     528:	83 ed       	ldi	r24, 0xD3	; 211
     52a:	90 e3       	ldi	r25, 0x30	; 48
     52c:	21 50       	subi	r18, 0x01	; 1
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	90 40       	sbci	r25, 0x00	; 0
     532:	e1 f7       	brne	.-8      	; 0x52c <atualizaDisplay+0xa2>
     534:	00 c0       	rjmp	.+0      	; 0x536 <atualizaDisplay+0xac>
     536:	00 00       	nop
		
		_delay_ms(1000);
		
		nokia_lcd_clear();
     538:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
		nokia_lcd_render();
     53c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     540:	26 c1       	rjmp	.+588    	; 0x78e <atualizaDisplay+0x304>
		
	}
	else if (entrada == 'f') // Mensagem: Finalizando tarefa atual
     542:	86 36       	cpi	r24, 0x66	; 102
     544:	09 f0       	breq	.+2      	; 0x548 <atualizaDisplay+0xbe>
     546:	3f c0       	rjmp	.+126    	; 0x5c6 <atualizaDisplay+0x13c>
	{
		nokia_lcd_clear();
     548:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     556:	6a e0       	ldi	r22, 0x0A	; 10
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("   Tarefa", 1);
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	82 e6       	ldi	r24, 0x62	; 98
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(35, 20);
     568:	64 e1       	ldi	r22, 0x14	; 20
     56a:	83 e2       	ldi	r24, 0x23	; 35
     56c:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     570:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     574:	4a e0       	ldi	r20, 0x0A	; 10
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	75 e0       	ldi	r23, 0x05	; 5
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
		itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefa_atual (int) em string (snum)
		nokia_lcd_write_string(snum, 1);
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	95 e0       	ldi	r25, 0x05	; 5
     586:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     58a:	6e e1       	ldi	r22, 0x1E	; 30
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("  Finalizada!", 1);
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	8c e6       	ldi	r24, 0x6C	; 108
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     59c:	68 e2       	ldi	r22, 0x28	; 40
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_render();
     5ae:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	83 ed       	ldi	r24, 0xD3	; 211
     5b6:	90 e3       	ldi	r25, 0x30	; 48
     5b8:	21 50       	subi	r18, 0x01	; 1
     5ba:	80 40       	sbci	r24, 0x00	; 0
     5bc:	90 40       	sbci	r25, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <atualizaDisplay+0x12e>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <atualizaDisplay+0x138>
     5c2:	00 00       	nop
     5c4:	e4 c0       	rjmp	.+456    	; 0x78e <atualizaDisplay+0x304>
		
		_delay_ms(1000);
	}
	else if (entrada == 'p') // Mensagem: Pausando o programa
     5c6:	80 37       	cpi	r24, 0x70	; 112
     5c8:	e1 f4       	brne	.+56     	; 0x602 <atualizaDisplay+0x178>
	{
		nokia_lcd_clear();
     5ca:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     5d8:	64 e1       	ldi	r22, 0x14	; 20
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Tarefa Pausada", 1);
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	8a e7       	ldi	r24, 0x7A	; 122
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     5ea:	68 e2       	ldi	r22, 0x28	; 40
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_render();
     5fc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     600:	c6 c0       	rjmp	.+396    	; 0x78e <atualizaDisplay+0x304>
		
	}
	else if (entrada == 'x') // Mensagem: Dados coletados durante as atividades
     602:	88 37       	cpi	r24, 0x78	; 120
     604:	09 f0       	breq	.+2      	; 0x608 <atualizaDisplay+0x17e>
     606:	8f c0       	rjmp	.+286    	; 0x726 <atualizaDisplay+0x29c>
	{
		nokia_lcd_clear();
     608:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
		nokia_lcd_write_string("T | h:min | %", 1);
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	89 e8       	ldi	r24, 0x89	; 137
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_render();
     616:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
		int leitura_hrs; 
		int leitura_min;
		int leitura_porcentagem;
		
		// Ler informações da memória EEPROM
		for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     61a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     61e:	08 2e       	mov	r0, r24
     620:	00 0c       	add	r0, r0
     622:	99 0b       	sbc	r25, r25
     624:	9c 01       	movw	r18, r24
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	99 23       	and	r25, r25
     630:	0c f4       	brge	.+2      	; 0x634 <atualizaDisplay+0x1aa>
     632:	ad c0       	rjmp	.+346    	; 0x78e <atualizaDisplay+0x304>
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	ca e0       	ldi	r28, 0x0A	; 10
     63a:	d0 e0       	ldi	r29, 0x00	; 0
     63c:	ee 24       	eor	r14, r14
     63e:	e3 94       	inc	r14
     640:	f1 2c       	mov	r15, r1
			_EEGET(leitura_hrs, iendereco); // Lê o conteúdo do endereço indicado por iendereco para a variável leitura_hrs
     642:	c8 01       	movw	r24, r16
     644:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <eeprom_read_byte>
     648:	b8 2e       	mov	r11, r24
			_EEGET(leitura_min, iendereco + 1); // Lê o conteúdo do endereço indicado por (iendereco + 1) para a variável leitura_min
     64a:	c8 01       	movw	r24, r16
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <eeprom_read_byte>
     652:	c8 2e       	mov	r12, r24
			_EEGET(leitura_porcentagem, iendereco + 2); // Lê o conteúdo do endereço indicado por (iendereco + 2) para a variável leitura_porcentagem
     654:	c8 01       	movw	r24, r16
     656:	02 96       	adiw	r24, 0x02	; 2
     658:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <eeprom_read_byte>
     65c:	d8 2e       	mov	r13, r24
			
			nokia_lcd_set_cursor(0, cursor);
     65e:	6c 2f       	mov	r22, r28
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     666:	4a e0       	ldi	r20, 0x0A	; 10
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	75 e0       	ldi	r23, 0x05	; 5
     66c:	c7 01       	movw	r24, r14
     66e:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
			itoa(tarefa, snum, 10); // Funçaõ que converte tarefa (int) em string (snum)
			nokia_lcd_write_string(snum, 1);
     672:	61 e0       	ldi	r22, 0x01	; 1
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	95 e0       	ldi	r25, 0x05	; 5
     678:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(24, cursor);
     67c:	6c 2f       	mov	r22, r28
     67e:	88 e1       	ldi	r24, 0x18	; 24
     680:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     684:	4a e0       	ldi	r20, 0x0A	; 10
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	75 e0       	ldi	r23, 0x05	; 5
     68a:	8b 2d       	mov	r24, r11
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
			itoa(leitura_hrs, snum, 10); // Funçaõ que converte leitura_hrs (int) em string (snum)
			nokia_lcd_write_string(snum, 1);
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	95 e0       	ldi	r25, 0x05	; 5
     698:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 10);
     69c:	6a e0       	ldi	r22, 0x0A	; 10
     69e:	8e e1       	ldi	r24, 0x1E	; 30
     6a0:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(":", 1);
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	87 e9       	ldi	r24, 0x97	; 151
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(34, cursor);
     6ae:	6c 2f       	mov	r22, r28
     6b0:	82 e2       	ldi	r24, 0x22	; 34
     6b2:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
			exibe_com_2digitos(leitura_min); // Chamada da função para exibir leitura_min sempre com 2 dígitos
     6b6:	8c 2d       	mov	r24, r12
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
			nokia_lcd_set_cursor(69, cursor);
     6be:	6c 2f       	mov	r22, r28
     6c0:	85 e4       	ldi	r24, 0x45	; 69
     6c2:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
			exibe_com_2digitos(leitura_porcentagem); // Chamada da função para exibir leitura_porcentagem sempre com 2 dígitos
     6c6:	8d 2d       	mov	r24, r13
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
			nokia_lcd_render();
     6ce:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
			
			tarefa++;
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	e2 1a       	sub	r14, r18
     6d6:	f2 0a       	sbc	r15, r18
			cursor += 10;
     6d8:	2a 96       	adiw	r28, 0x0a	; 10
			
			if (cursor == 50)
     6da:	c2 33       	cpi	r28, 0x32	; 50
     6dc:	d1 05       	cpc	r29, r1
     6de:	91 f4       	brne	.+36     	; 0x704 <atualizaDisplay+0x27a>
			{
				nokia_lcd_clear();
     6e0:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
				nokia_lcd_write_string("T | h:min | %", 1);
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	89 e8       	ldi	r24, 0x89	; 137
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
     6ee:	8f ef       	ldi	r24, 0xFF	; 255
     6f0:	93 e2       	ldi	r25, 0x23	; 35
     6f2:	24 ef       	ldi	r18, 0xF4	; 244
     6f4:	81 50       	subi	r24, 0x01	; 1
     6f6:	90 40       	sbci	r25, 0x00	; 0
     6f8:	20 40       	sbci	r18, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <atualizaDisplay+0x26a>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <atualizaDisplay+0x274>
     6fe:	00 00       	nop
				_delay_ms(5000);
				cursor = 10;
     700:	ca e0       	ldi	r28, 0x0A	; 10
     702:	d0 e0       	ldi	r29, 0x00	; 0
		int leitura_hrs; 
		int leitura_min;
		int leitura_porcentagem;
		
		// Ler informações da memória EEPROM
		for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     704:	0d 5f       	subi	r16, 0xFD	; 253
     706:	1f 4f       	sbci	r17, 0xFF	; 255
     708:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     70c:	08 2e       	mov	r0, r24
     70e:	00 0c       	add	r0, r0
     710:	99 0b       	sbc	r25, r25
     712:	9c 01       	movw	r18, r24
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	82 0f       	add	r24, r18
     71a:	93 1f       	adc	r25, r19
     71c:	80 17       	cp	r24, r16
     71e:	91 07       	cpc	r25, r17
     720:	0c f0       	brlt	.+2      	; 0x724 <atualizaDisplay+0x29a>
     722:	8f cf       	rjmp	.-226    	; 0x642 <atualizaDisplay+0x1b8>
     724:	34 c0       	rjmp	.+104    	; 0x78e <atualizaDisplay+0x304>
			}
		}
	}
	else // Mensagem: Atividade atual em andamento
	{
		nokia_lcd_clear();
     726:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
		nokia_lcd_write_string("--------------", 1);
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     734:	6a e0       	ldi	r22, 0x0A	; 10
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("   Tarefa", 1);
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	82 e6       	ldi	r24, 0x62	; 98
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(35, 20);
     746:	64 e1       	ldi	r22, 0x14	; 20
     748:	83 e2       	ldi	r24, 0x23	; 35
     74a:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     74e:	4a e0       	ldi	r20, 0x0A	; 10
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	75 e0       	ldi	r23, 0x05	; 5
     754:	8c 2f       	mov	r24, r28
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
		itoa(entrada, snum, 10); // Funçaõ que converte entrada (int) em string (snum)
		nokia_lcd_write_string(snum, 1);
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	95 e0       	ldi	r25, 0x05	; 5
     762:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     766:	6e e1       	ldi	r22, 0x1E	; 30
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(" Em Andamento", 1);
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	89 e9       	ldi	r24, 0x99	; 153
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     778:	68 e2       	ldi	r22, 0x28	; 40
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("--------------", 1);
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
		nokia_lcd_render();
     78a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
	}
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	bf 90       	pop	r11
     7a0:	08 95       	ret

000007a2 <__vector_1>:

// ** Módulo Interrupções ** //

// Interrupção externa 0, captura o Ligar/Desligar
ISR(INT0_vect)
{
     7a2:	1f 92       	push	r1
     7a4:	0f 92       	push	r0
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	0f 92       	push	r0
     7aa:	11 24       	eor	r1, r1
     7ac:	2f 93       	push	r18
     7ae:	3f 93       	push	r19
     7b0:	4f 93       	push	r20
     7b2:	5f 93       	push	r21
     7b4:	6f 93       	push	r22
     7b6:	7f 93       	push	r23
     7b8:	8f 93       	push	r24
     7ba:	9f 93       	push	r25
     7bc:	af 93       	push	r26
     7be:	bf 93       	push	r27
     7c0:	ef 93       	push	r30
     7c2:	ff 93       	push	r31
	if (liga == 1)
     7c4:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <liga>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	21 f5       	brne	.+72     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		atualizaDisplay('l'); // Chamada de função - Mensagem: Ligando o programa
     7cc:	8c e6       	ldi	r24, 0x6C	; 108
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
		liga = 0; // Inicia o Timer
     7d4:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <liga>
		
		if(finaliza == 0 && pausa == 0)
     7d8:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <finaliza>
     7dc:	81 11       	cpse	r24, r1
     7de:	0a c0       	rjmp	.+20     	; 0x7f4 <__vector_1+0x52>
     7e0:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <pausa>
     7e4:	81 11       	cpse	r24, r1
     7e6:	0d c0       	rjmp	.+26     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		{
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
     7e8:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
     7f2:	17 c0       	rjmp	.+46     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		}
		else if (finaliza == 1)
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	29 f4       	brne	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		{
			atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
     7f8:	88 e7       	ldi	r24, 0x78	; 120
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
     800:	10 c0       	rjmp	.+32     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		}
		else if (pausa == 1)
     802:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <pausa>
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	61 f4       	brne	.+24     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		{
			atualizaDisplay('p'); // Chamada de função - Mensagem: Pausando o programa
     80a:	80 e7       	ldi	r24, 0x70	; 112
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
     812:	07 c0       	rjmp	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		}
	}
	else
	{
		atualizaDisplay('d'); // Chamada de função - Mensagem: Desligando o programa
     814:	84 e6       	ldi	r24, 0x64	; 100
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
		liga = 1; // Pausa o Timer
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <liga>
	}
}
     822:	ff 91       	pop	r31
     824:	ef 91       	pop	r30
     826:	bf 91       	pop	r27
     828:	af 91       	pop	r26
     82a:	9f 91       	pop	r25
     82c:	8f 91       	pop	r24
     82e:	7f 91       	pop	r23
     830:	6f 91       	pop	r22
     832:	5f 91       	pop	r21
     834:	4f 91       	pop	r20
     836:	3f 91       	pop	r19
     838:	2f 91       	pop	r18
     83a:	0f 90       	pop	r0
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	0f 90       	pop	r0
     840:	1f 90       	pop	r1
     842:	18 95       	reti

00000844 <__vector_2>:

// Interrupção externa 1, captura o Play/Pause
ISR(INT1_vect)
{
     844:	1f 92       	push	r1
     846:	0f 92       	push	r0
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	0f 92       	push	r0
     84c:	11 24       	eor	r1, r1
     84e:	2f 93       	push	r18
     850:	3f 93       	push	r19
     852:	4f 93       	push	r20
     854:	5f 93       	push	r21
     856:	6f 93       	push	r22
     858:	7f 93       	push	r23
     85a:	8f 93       	push	r24
     85c:	9f 93       	push	r25
     85e:	af 93       	push	r26
     860:	bf 93       	push	r27
     862:	ef 93       	push	r30
     864:	ff 93       	push	r31
	if (finaliza == 0 && liga == 0)
     866:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <finaliza>
     86a:	81 11       	cpse	r24, r1
     86c:	17 c0       	rjmp	.+46     	; 0x89c <__vector_2+0x58>
     86e:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <liga>
     872:	81 11       	cpse	r24, r1
     874:	13 c0       	rjmp	.+38     	; 0x89c <__vector_2+0x58>
	{
		if(pausa == 1)
     876:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <pausa>
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	41 f4       	brne	.+16     	; 0x88e <__vector_2+0x4a>
		{
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
     87e:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
			pausa = 0; // Dá play no Timer
     888:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <pausa>
     88c:	07 c0       	rjmp	.+14     	; 0x89c <__vector_2+0x58>
		}
		else
		{
			atualizaDisplay('p'); // Chamada de função - Mensagem: Pausando o programa
     88e:	80 e7       	ldi	r24, 0x70	; 112
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
			pausa = 1; // Pausa o Timer
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <pausa>
		}
	}
}
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	bf 91       	pop	r27
     8a2:	af 91       	pop	r26
     8a4:	9f 91       	pop	r25
     8a6:	8f 91       	pop	r24
     8a8:	7f 91       	pop	r23
     8aa:	6f 91       	pop	r22
     8ac:	5f 91       	pop	r21
     8ae:	4f 91       	pop	r20
     8b0:	3f 91       	pop	r19
     8b2:	2f 91       	pop	r18
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0
     8ba:	1f 90       	pop	r1
     8bc:	18 95       	reti

000008be <calcula_porcentagem>:
}

// Função para calcular a porcentagem do tempo total gasto em cada tarefa
void calcula_porcentagem()
{
	int total_minutos = (vetor_hrs[contador_tarefa] * 60) + vetor_min[contador_tarefa]; // Total de minutos utilizados para realizar a tarefa atual
     8be:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     8c2:	08 2e       	mov	r0, r24
     8c4:	00 0c       	add	r0, r0
     8c6:	99 0b       	sbc	r25, r25
	vetor_porcentagem[contador_tarefa] = (total_minutos * 100) / 360; // Regra de 3 para definir a porcentagem de tempo gasto em cada tarefa, tendo que 6h = 100%
     8c8:	fc 01       	movw	r30, r24
     8ca:	e9 5c       	subi	r30, 0xC9	; 201
     8cc:	fb 4f       	sbci	r31, 0xFB	; 251
}

// Função para calcular a porcentagem do tempo total gasto em cada tarefa
void calcula_porcentagem()
{
	int total_minutos = (vetor_hrs[contador_tarefa] * 60) + vetor_min[contador_tarefa]; // Total de minutos utilizados para realizar a tarefa atual
     8ce:	dc 01       	movw	r26, r24
     8d0:	ad 52       	subi	r26, 0x2D	; 45
     8d2:	bc 4f       	sbci	r27, 0xFC	; 252
	vetor_porcentagem[contador_tarefa] = (total_minutos * 100) / 360; // Regra de 3 para definir a porcentagem de tempo gasto em cada tarefa, tendo que 6h = 100%
     8d4:	4c 91       	ld	r20, X
}

// Função para calcular a porcentagem do tempo total gasto em cada tarefa
void calcula_porcentagem()
{
	int total_minutos = (vetor_hrs[contador_tarefa] * 60) + vetor_min[contador_tarefa]; // Total de minutos utilizados para realizar a tarefa atual
     8d6:	dc 01       	movw	r26, r24
     8d8:	a3 56       	subi	r26, 0x63	; 99
     8da:	bb 4f       	sbci	r27, 0xFB	; 251
	vetor_porcentagem[contador_tarefa] = (total_minutos * 100) / 360; // Regra de 3 para definir a porcentagem de tempo gasto em cada tarefa, tendo que 6h = 100%
     8dc:	2c 91       	ld	r18, X
     8de:	02 2e       	mov	r0, r18
     8e0:	00 0c       	add	r0, r0
     8e2:	33 0b       	sbc	r19, r19
     8e4:	8c e3       	ldi	r24, 0x3C	; 60
     8e6:	48 02       	muls	r20, r24
     8e8:	20 0d       	add	r18, r0
     8ea:	31 1d       	adc	r19, r1
     8ec:	11 24       	eor	r1, r1
     8ee:	44 e6       	ldi	r20, 0x64	; 100
     8f0:	42 9f       	mul	r20, r18
     8f2:	c0 01       	movw	r24, r0
     8f4:	43 9f       	mul	r20, r19
     8f6:	90 0d       	add	r25, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	68 e6       	ldi	r22, 0x68	; 104
     8fc:	71 e0       	ldi	r23, 0x01	; 1
     8fe:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divmodhi4>
     902:	60 83       	st	Z, r22
     904:	08 95       	ret

00000906 <calcula_tempo_da_tarefa>:
}

// Função que calcula o tempo em que cada tarefa foi realizada
void calcula_tempo_da_tarefa()
{
     906:	1f 93       	push	r17
	int teste = hrs - vetor_hrs[contador_tarefa - 1]; // Variável para testar se a atividade anterior e a atual ocorreram na mesma hora
     908:	40 91 d0 03 	lds	r20, 0x03D0	; 0x8003d0 <hrs>
     90c:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <__data_end>
     910:	02 2e       	mov	r0, r18
     912:	00 0c       	add	r0, r0
     914:	33 0b       	sbc	r19, r19
     916:	b9 01       	movw	r22, r18
     918:	61 50       	subi	r22, 0x01	; 1
     91a:	71 09       	sbc	r23, r1
     91c:	fb 01       	movw	r30, r22
     91e:	ed 52       	subi	r30, 0x2D	; 45
     920:	fc 4f       	sbci	r31, 0xFC	; 252
     922:	10 81       	ld	r17, Z
	if (teste == 0)
     924:	41 13       	cpse	r20, r17
     926:	10 c0       	rjmp	.+32     	; 0x948 <calcula_tempo_da_tarefa+0x42>
	{
		// Faz as subtrações dos valores de hrs e min atuais pelo valores referentes ao fim da última tarefa
		vetor_hrs[contador_tarefa] = hrs - vetor_hrs[contador_tarefa - 1];
     928:	f9 01       	movw	r30, r18
     92a:	ed 52       	subi	r30, 0x2D	; 45
     92c:	fc 4f       	sbci	r31, 0xFC	; 252
     92e:	10 82       	st	Z, r1
		vetor_min[contador_tarefa] = min - vetor_min[contador_tarefa - 1];
     930:	f9 01       	movw	r30, r18
     932:	e3 56       	subi	r30, 0x63	; 99
     934:	fb 4f       	sbci	r31, 0xFB	; 251
     936:	db 01       	movw	r26, r22
     938:	a3 56       	subi	r26, 0x63	; 99
     93a:	bb 4f       	sbci	r27, 0xFB	; 251
     93c:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <min>
     940:	9c 91       	ld	r25, X
     942:	89 1b       	sub	r24, r25
     944:	80 83       	st	Z, r24
     946:	23 c0       	rjmp	.+70     	; 0x98e <calcula_tempo_da_tarefa+0x88>
	}
	else
	{
		int min_abs_totais = (hrs * 60) + min; // Total de minutos desde o início do Timer
		int min_abs_tarefa_anterior = (vetor_hrs[contador_tarefa - 1] * 60) + vetor_min[contador_tarefa - 1]; // Minutos absolutos da última tarefa
		int min_abs_tarefa_atual = min_abs_totais - min_abs_tarefa_anterior; // Minutos absolutos da tarefa atual
     948:	5c e3       	ldi	r21, 0x3C	; 60
     94a:	45 03       	mulsu	r20, r21
     94c:	c0 01       	movw	r24, r0
     94e:	11 24       	eor	r1, r1
     950:	40 91 9b 04 	lds	r20, 0x049B	; 0x80049b <min>
     954:	84 0f       	add	r24, r20
     956:	91 1d       	adc	r25, r1
     958:	47 fd       	sbrc	r20, 7
     95a:	9a 95       	dec	r25
     95c:	15 03       	mulsu	r17, r21
     95e:	a0 01       	movw	r20, r0
     960:	11 24       	eor	r1, r1
		vetor_min[contador_tarefa] = min - vetor_min[contador_tarefa - 1];
	}
	else
	{
		int min_abs_totais = (hrs * 60) + min; // Total de minutos desde o início do Timer
		int min_abs_tarefa_anterior = (vetor_hrs[contador_tarefa - 1] * 60) + vetor_min[contador_tarefa - 1]; // Minutos absolutos da última tarefa
     962:	fb 01       	movw	r30, r22
     964:	e3 56       	subi	r30, 0x63	; 99
     966:	fb 4f       	sbci	r31, 0xFB	; 251
		int min_abs_tarefa_atual = min_abs_totais - min_abs_tarefa_anterior; // Minutos absolutos da tarefa atual
     968:	60 81       	ld	r22, Z
     96a:	46 0f       	add	r20, r22
     96c:	51 1d       	adc	r21, r1
     96e:	67 fd       	sbrc	r22, 7
     970:	5a 95       	dec	r21
     972:	84 1b       	sub	r24, r20
     974:	95 0b       	sbc	r25, r21
		
		// Salvar hrs e min da tarefa atual nos arrays vetor_hrs[] e vetor_min[]
		vetor_hrs[contador_tarefa] = min_abs_tarefa_atual / 60;
     976:	f9 01       	movw	r30, r18
     978:	ed 52       	subi	r30, 0x2D	; 45
     97a:	fc 4f       	sbci	r31, 0xFC	; 252
     97c:	6c e3       	ldi	r22, 0x3C	; 60
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divmodhi4>
     984:	60 83       	st	Z, r22
		vetor_min[contador_tarefa] = min_abs_tarefa_atual % 60;
     986:	f9 01       	movw	r30, r18
     988:	e3 56       	subi	r30, 0x63	; 99
     98a:	fb 4f       	sbci	r31, 0xFB	; 251
     98c:	80 83       	st	Z, r24
	}
}
     98e:	1f 91       	pop	r17
     990:	08 95       	ret

00000992 <__vector_3>:
	}
}

// Interrupção 0 por mudança de pino, captura o Finalizar Tarefa
ISR(PCINT0_vect)
{
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	2f 93       	push	r18
     9aa:	3f 93       	push	r19
     9ac:	4f 93       	push	r20
     9ae:	5f 93       	push	r21
     9b0:	6f 93       	push	r22
     9b2:	7f 93       	push	r23
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ef 93       	push	r30
     9c2:	ff 93       	push	r31
	if (pcint0_int == 0 && pausa == 0 && liga == 0)
     9c4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <pcint0_int>
     9c8:	81 11       	cpse	r24, r1
     9ca:	07 c2       	rjmp	.+1038   	; 0xdda <__vector_3+0x448>
     9cc:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <pausa>
     9d0:	81 11       	cpse	r24, r1
     9d2:	07 c2       	rjmp	.+1038   	; 0xde2 <__vector_3+0x450>
     9d4:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <liga>
     9d8:	81 11       	cpse	r24, r1
     9da:	03 c2       	rjmp	.+1030   	; 0xde2 <__vector_3+0x450>
	{
		pcint0_int ++;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <pcint0_int>
		
		if (tarefa_atual == tarefas) // Não há mais tarefas para realizar
     9e2:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     9e6:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <tarefas>
     9ea:	89 13       	cpse	r24, r25
     9ec:	a5 c0       	rjmp	.+330    	; 0xb38 <__vector_3+0x1a6>
		{	
			if (tarefa_atual == 4)
     9ee:	84 30       	cpi	r24, 0x04	; 4
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__vector_3+0x62>
     9f2:	54 c0       	rjmp	.+168    	; 0xa9c <__vector_3+0x10a>
			{
				int t4_hrs = hrs;
     9f4:	00 91 d0 03 	lds	r16, 0x03D0	; 0x8003d0 <hrs>
     9f8:	00 2e       	mov	r0, r16
     9fa:	00 0c       	add	r0, r0
     9fc:	11 0b       	sbc	r17, r17
				int t4_min = min;
     9fe:	c0 91 9b 04 	lds	r28, 0x049B	; 0x80049b <min>
     a02:	0c 2e       	mov	r0, r28
     a04:	00 0c       	add	r0, r0
     a06:	dd 0b       	sbc	r29, r29
				int t4_porcen = 25;
				
				nokia_lcd_clear();
     a08:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
				nokia_lcd_write_string("T | h:min | %", 1);
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	89 e8       	ldi	r24, 0x89	; 137
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(0, 10);
     a16:	6a e0       	ldi	r22, 0x0A	; 10
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     a1e:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     a22:	4a e0       	ldi	r20, 0x0A	; 10
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	75 e0       	ldi	r23, 0x05	; 5
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
				itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefas (int) em string
				nokia_lcd_write_string(snum, 1);
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	95 e0       	ldi	r25, 0x05	; 5
     a34:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(24, 10);
     a38:	6a e0       	ldi	r22, 0x0A	; 10
     a3a:	88 e1       	ldi	r24, 0x18	; 24
     a3c:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     a40:	4a e0       	ldi	r20, 0x0A	; 10
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	75 e0       	ldi	r23, 0x05	; 5
     a46:	c8 01       	movw	r24, r16
     a48:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
				itoa(t4_hrs, snum, 10); // Funçaõ que converte tarefas (int) em string
				nokia_lcd_write_string(snum, 1);
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	95 e0       	ldi	r25, 0x05	; 5
     a52:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(30, 10);
     a56:	6a e0       	ldi	r22, 0x0A	; 10
     a58:	8e e1       	ldi	r24, 0x1E	; 30
     a5a:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				nokia_lcd_write_string(":", 1);
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	87 e9       	ldi	r24, 0x97	; 151
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(34, 10);
     a68:	6a e0       	ldi	r22, 0x0A	; 10
     a6a:	82 e2       	ldi	r24, 0x22	; 34
     a6c:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				exibe_com_2digitos(t4_min);
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
				nokia_lcd_set_cursor(69, 10);
     a76:	6a e0       	ldi	r22, 0x0A	; 10
     a78:	85 e4       	ldi	r24, 0x45	; 69
     a7a:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				exibe_com_2digitos(t4_porcen);
     a7e:	89 e1       	ldi	r24, 0x19	; 25
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
				nokia_lcd_render();
     a86:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     a8a:	2f ef       	ldi	r18, 0xFF	; 255
     a8c:	8f e4       	ldi	r24, 0x4F	; 79
     a8e:	93 ec       	ldi	r25, 0xC3	; 195
     a90:	21 50       	subi	r18, 0x01	; 1
     a92:	80 40       	sbci	r24, 0x00	; 0
     a94:	90 40       	sbci	r25, 0x00	; 0
     a96:	e1 f7       	brne	.-8      	; 0xa90 <__vector_3+0xfe>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <__vector_3+0x108>
     a9a:	00 00       	nop
				_delay_ms(4000);
				
			}
					
			calcula_tempo_da_tarefa(); // Chamada da função que calcula o tempo em que cada tarefa foi realizada
     a9c:	0e 94 83 04 	call	0x906	; 0x906 <calcula_tempo_da_tarefa>
			calcula_porcentagem(); // Chamada da função que calcula a porcentagem do tempo total gasto em cada tarefa
     aa0:	0e 94 5f 04 	call	0x8be	; 0x8be <calcula_porcentagem>
			
			int contador = 0; // Contador dos vetores vetor_hrs[] e vetor_min[]
			
			// Salvar os arrays vetor_hrs[], vetor_min[] e vetor_porcentagem[] na EEPROM
			for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     aa4:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     aa8:	08 2e       	mov	r0, r24
     aaa:	00 0c       	add	r0, r0
     aac:	99 0b       	sbc	r25, r25
     aae:	9c 01       	movw	r18, r24
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	82 0f       	add	r24, r18
     ab6:	93 1f       	adc	r25, r19
     ab8:	99 23       	and	r25, r25
     aba:	94 f1       	brlt	.+100    	; 0xb20 <__vector_3+0x18e>
     abc:	0f 2e       	mov	r0, r31
     abe:	f3 ed       	ldi	r31, 0xD3	; 211
     ac0:	cf 2e       	mov	r12, r31
     ac2:	f3 e0       	ldi	r31, 0x03	; 3
     ac4:	df 2e       	mov	r13, r31
     ac6:	f0 2d       	mov	r31, r0
     ac8:	0f 2e       	mov	r0, r31
     aca:	fd e9       	ldi	r31, 0x9D	; 157
     acc:	ef 2e       	mov	r14, r31
     ace:	f4 e0       	ldi	r31, 0x04	; 4
     ad0:	ff 2e       	mov	r15, r31
     ad2:	f0 2d       	mov	r31, r0
     ad4:	07 e3       	ldi	r16, 0x37	; 55
     ad6:	14 e0       	ldi	r17, 0x04	; 4
     ad8:	c0 e0       	ldi	r28, 0x00	; 0
     ada:	d0 e0       	ldi	r29, 0x00	; 0
				_EEPUT(iendereco, vetor_hrs[contador]); // Gravando o conteúdo de vetor_hrs[contador] no endereço iendereco da EEPROM
     adc:	f6 01       	movw	r30, r12
     ade:	61 91       	ld	r22, Z+
     ae0:	6f 01       	movw	r12, r30
     ae2:	ce 01       	movw	r24, r28
     ae4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <eeprom_write_byte>
				_EEPUT(iendereco + 1, vetor_min[contador]); // Gravando o conteúdo de vetor_min[contador] no endereço (iendereco + 1) da EEPROM
     ae8:	f7 01       	movw	r30, r14
     aea:	61 91       	ld	r22, Z+
     aec:	7f 01       	movw	r14, r30
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <eeprom_write_byte>
				_EEPUT(iendereco + 2, vetor_porcentagem[contador]); // Gravando o conteúdo de vetor_porcentagem[contador] no endereço (iendereco + 2) da EEPROM
     af6:	f8 01       	movw	r30, r16
     af8:	61 91       	ld	r22, Z+
     afa:	8f 01       	movw	r16, r30
     afc:	ce 01       	movw	r24, r28
     afe:	02 96       	adiw	r24, 0x02	; 2
     b00:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <eeprom_write_byte>
			calcula_porcentagem(); // Chamada da função que calcula a porcentagem do tempo total gasto em cada tarefa
			
			int contador = 0; // Contador dos vetores vetor_hrs[] e vetor_min[]
			
			// Salvar os arrays vetor_hrs[], vetor_min[] e vetor_porcentagem[] na EEPROM
			for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     b04:	23 96       	adiw	r28, 0x03	; 3
     b06:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     b0a:	08 2e       	mov	r0, r24
     b0c:	00 0c       	add	r0, r0
     b0e:	99 0b       	sbc	r25, r25
     b10:	9c 01       	movw	r18, r24
     b12:	22 0f       	add	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	8c 17       	cp	r24, r28
     b1c:	9d 07       	cpc	r25, r29
     b1e:	f4 f6       	brge	.-68     	; 0xadc <__vector_3+0x14a>
				_EEPUT(iendereco + 1, vetor_min[contador]); // Gravando o conteúdo de vetor_min[contador] no endereço (iendereco + 1) da EEPROM
				_EEPUT(iendereco + 2, vetor_porcentagem[contador]); // Gravando o conteúdo de vetor_porcentagem[contador] no endereço (iendereco + 2) da EEPROM
				contador++; // Incrementa o contador
			}
			
			atualizaDisplay('f'); // Chamada de função - Mensagem: Finalizando tarefa atual
     b20:	86 e6       	ldi	r24, 0x66	; 102
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
			atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
     b28:	88 e7       	ldi	r24, 0x78	; 120
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
			finaliza = 1; // Finaliza contagem do Timer
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <finaliza>
     b36:	55 c1       	rjmp	.+682    	; 0xde2 <__vector_3+0x450>
		}
		else
		{
			if (tarefa_atual == 1)
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	09 f0       	breq	.+2      	; 0xb3e <__vector_3+0x1ac>
     b3c:	54 c0       	rjmp	.+168    	; 0xbe6 <__vector_3+0x254>
			{
				int t1_hrs = hrs;
     b3e:	00 91 d0 03 	lds	r16, 0x03D0	; 0x8003d0 <hrs>
     b42:	00 2e       	mov	r0, r16
     b44:	00 0c       	add	r0, r0
     b46:	11 0b       	sbc	r17, r17
				int t1_min = min;
     b48:	c0 91 9b 04 	lds	r28, 0x049B	; 0x80049b <min>
     b4c:	0c 2e       	mov	r0, r28
     b4e:	00 0c       	add	r0, r0
     b50:	dd 0b       	sbc	r29, r29
				int t1_porcen = 5;				
				
				nokia_lcd_clear();
     b52:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
				nokia_lcd_write_string("T | h:min | %", 1);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	89 e8       	ldi	r24, 0x89	; 137
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(0, 10);
     b60:	6a e0       	ldi	r22, 0x0A	; 10
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     b68:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     b6c:	4a e0       	ldi	r20, 0x0A	; 10
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	75 e0       	ldi	r23, 0x05	; 5
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
				itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefas (int) em string
				nokia_lcd_write_string(snum, 1);
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	95 e0       	ldi	r25, 0x05	; 5
     b7e:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(24, 10);
     b82:	6a e0       	ldi	r22, 0x0A	; 10
     b84:	88 e1       	ldi	r24, 0x18	; 24
     b86:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     b8a:	4a e0       	ldi	r20, 0x0A	; 10
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	75 e0       	ldi	r23, 0x05	; 5
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
				itoa(t1_hrs, snum, 10); // Funçaõ que converte tarefas (int) em string
				nokia_lcd_write_string(snum, 1);
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	95 e0       	ldi	r25, 0x05	; 5
     b9c:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(30, 10);
     ba0:	6a e0       	ldi	r22, 0x0A	; 10
     ba2:	8e e1       	ldi	r24, 0x1E	; 30
     ba4:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				nokia_lcd_write_string(":", 1);
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	87 e9       	ldi	r24, 0x97	; 151
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(34, 10);
     bb2:	6a e0       	ldi	r22, 0x0A	; 10
     bb4:	82 e2       	ldi	r24, 0x22	; 34
     bb6:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				exibe_com_2digitos(t1_min);
     bba:	ce 01       	movw	r24, r28
     bbc:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
				nokia_lcd_set_cursor(69, 10);
     bc0:	6a e0       	ldi	r22, 0x0A	; 10
     bc2:	85 e4       	ldi	r24, 0x45	; 69
     bc4:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				exibe_com_2digitos(t1_porcen);
     bc8:	85 e0       	ldi	r24, 0x05	; 5
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
				nokia_lcd_render();
     bd0:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     bd4:	ff ef       	ldi	r31, 0xFF	; 255
     bd6:	2f e4       	ldi	r18, 0x4F	; 79
     bd8:	83 ec       	ldi	r24, 0xC3	; 195
     bda:	f1 50       	subi	r31, 0x01	; 1
     bdc:	20 40       	sbci	r18, 0x00	; 0
     bde:	80 40       	sbci	r24, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <__vector_3+0x248>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <__vector_3+0x252>
     be4:	00 00       	nop
				_delay_ms(4000);
								
			}
			if (tarefa_atual == 2)
     be6:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     bea:	82 30       	cpi	r24, 0x02	; 2
     bec:	09 f0       	breq	.+2      	; 0xbf0 <__vector_3+0x25e>
     bee:	54 c0       	rjmp	.+168    	; 0xc98 <__vector_3+0x306>
			{
				int t2_hrs = hrs;
     bf0:	00 91 d0 03 	lds	r16, 0x03D0	; 0x8003d0 <hrs>
     bf4:	00 2e       	mov	r0, r16
     bf6:	00 0c       	add	r0, r0
     bf8:	11 0b       	sbc	r17, r17
				int t2_min = min;
     bfa:	c0 91 9b 04 	lds	r28, 0x049B	; 0x80049b <min>
     bfe:	0c 2e       	mov	r0, r28
     c00:	00 0c       	add	r0, r0
     c02:	dd 0b       	sbc	r29, r29
				int t2_porcen = 5;
				
				nokia_lcd_clear();
     c04:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
				nokia_lcd_write_string("T | h:min | %", 1);
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	89 e8       	ldi	r24, 0x89	; 137
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(0, 10);
     c12:	6a e0       	ldi	r22, 0x0A	; 10
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     c1a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     c1e:	4a e0       	ldi	r20, 0x0A	; 10
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	75 e0       	ldi	r23, 0x05	; 5
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
				itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefas (int) em string
				nokia_lcd_write_string(snum, 1);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	95 e0       	ldi	r25, 0x05	; 5
     c30:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(24, 10);
     c34:	6a e0       	ldi	r22, 0x0A	; 10
     c36:	88 e1       	ldi	r24, 0x18	; 24
     c38:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     c3c:	4a e0       	ldi	r20, 0x0A	; 10
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	75 e0       	ldi	r23, 0x05	; 5
     c42:	c8 01       	movw	r24, r16
     c44:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
				itoa(t2_hrs, snum, 10); // Funçaõ que converte tarefas (int) em string
				nokia_lcd_write_string(snum, 1);
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	95 e0       	ldi	r25, 0x05	; 5
     c4e:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(30, 10);
     c52:	6a e0       	ldi	r22, 0x0A	; 10
     c54:	8e e1       	ldi	r24, 0x1E	; 30
     c56:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				nokia_lcd_write_string(":", 1);
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	87 e9       	ldi	r24, 0x97	; 151
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(34, 10);
     c64:	6a e0       	ldi	r22, 0x0A	; 10
     c66:	82 e2       	ldi	r24, 0x22	; 34
     c68:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				exibe_com_2digitos(t2_min);
     c6c:	ce 01       	movw	r24, r28
     c6e:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
				nokia_lcd_set_cursor(69, 10);
     c72:	6a e0       	ldi	r22, 0x0A	; 10
     c74:	85 e4       	ldi	r24, 0x45	; 69
     c76:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				exibe_com_2digitos(t2_porcen);
     c7a:	85 e0       	ldi	r24, 0x05	; 5
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
				nokia_lcd_render();
     c82:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     c86:	9f ef       	ldi	r25, 0xFF	; 255
     c88:	ef e4       	ldi	r30, 0x4F	; 79
     c8a:	f3 ec       	ldi	r31, 0xC3	; 195
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	e0 40       	sbci	r30, 0x00	; 0
     c90:	f0 40       	sbci	r31, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <__vector_3+0x2fa>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <__vector_3+0x304>
     c96:	00 00       	nop
				_delay_ms(4000);
				
			}
			if (tarefa_atual == 3)
     c98:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	09 f0       	breq	.+2      	; 0xca2 <__vector_3+0x310>
     ca0:	54 c0       	rjmp	.+168    	; 0xd4a <__vector_3+0x3b8>
			{
				int t3_hrs = hrs;
     ca2:	00 91 d0 03 	lds	r16, 0x03D0	; 0x8003d0 <hrs>
     ca6:	00 2e       	mov	r0, r16
     ca8:	00 0c       	add	r0, r0
     caa:	11 0b       	sbc	r17, r17
				int t3_min = min;
     cac:	c0 91 9b 04 	lds	r28, 0x049B	; 0x80049b <min>
     cb0:	0c 2e       	mov	r0, r28
     cb2:	00 0c       	add	r0, r0
     cb4:	dd 0b       	sbc	r29, r29
				int t3_porcen = 15;
				
				nokia_lcd_clear();
     cb6:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
				nokia_lcd_write_string("T | h:min | %", 1);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	89 e8       	ldi	r24, 0x89	; 137
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(0, 10);
     cc4:	6a e0       	ldi	r22, 0x0A	; 10
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     ccc:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     cd0:	4a e0       	ldi	r20, 0x0A	; 10
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	75 e0       	ldi	r23, 0x05	; 5
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
				itoa(tarefa_atual, snum, 10); // Funçaõ que converte tarefas (int) em string
				nokia_lcd_write_string(snum, 1);
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	95 e0       	ldi	r25, 0x05	; 5
     ce2:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(24, 10);
     ce6:	6a e0       	ldi	r22, 0x0A	; 10
     ce8:	88 e1       	ldi	r24, 0x18	; 24
     cea:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
     cee:	4a e0       	ldi	r20, 0x0A	; 10
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	75 e0       	ldi	r23, 0x05	; 5
     cf4:	c8 01       	movw	r24, r16
     cf6:	0e 94 2f 0a 	call	0x145e	; 0x145e <__itoa_ncheck>
				itoa(t3_hrs, snum, 10); // Funçaõ que converte tarefas (int) em string
				nokia_lcd_write_string(snum, 1);
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	95 e0       	ldi	r25, 0x05	; 5
     d00:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(30, 10);
     d04:	6a e0       	ldi	r22, 0x0A	; 10
     d06:	8e e1       	ldi	r24, 0x1E	; 30
     d08:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				nokia_lcd_write_string(":", 1);
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	87 e9       	ldi	r24, 0x97	; 151
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(34, 10);
     d16:	6a e0       	ldi	r22, 0x0A	; 10
     d18:	82 e2       	ldi	r24, 0x22	; 34
     d1a:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				exibe_com_2digitos(t3_min);
     d1e:	ce 01       	movw	r24, r28
     d20:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
				nokia_lcd_set_cursor(69, 10);
     d24:	6a e0       	ldi	r22, 0x0A	; 10
     d26:	85 e4       	ldi	r24, 0x45	; 69
     d28:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
				exibe_com_2digitos(t3_porcen);
     d2c:	8f e0       	ldi	r24, 0x0F	; 15
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 19 02 	call	0x432	; 0x432 <exibe_com_2digitos>
				nokia_lcd_render();
     d34:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
     d38:	2f ef       	ldi	r18, 0xFF	; 255
     d3a:	8f e4       	ldi	r24, 0x4F	; 79
     d3c:	93 ec       	ldi	r25, 0xC3	; 195
     d3e:	21 50       	subi	r18, 0x01	; 1
     d40:	80 40       	sbci	r24, 0x00	; 0
     d42:	90 40       	sbci	r25, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <__vector_3+0x3ac>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <__vector_3+0x3b6>
     d48:	00 00       	nop
				_delay_ms(4000);
				
			}
			
			// Salvar hrs e min da tarefa atual nos arrays vetor_hrs[] e vetor_min[]
			if (tarefa_atual == 1)
     d4a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 f4       	brne	.+36     	; 0xd76 <__vector_3+0x3e4>
			{
				vetor_hrs[contador_tarefa] = hrs;
     d52:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     d56:	08 2e       	mov	r0, r24
     d58:	00 0c       	add	r0, r0
     d5a:	99 0b       	sbc	r25, r25
     d5c:	fc 01       	movw	r30, r24
     d5e:	ed 52       	subi	r30, 0x2D	; 45
     d60:	fc 4f       	sbci	r31, 0xFC	; 252
     d62:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <hrs>
     d66:	20 83       	st	Z, r18
				vetor_min[contador_tarefa] = min;
     d68:	fc 01       	movw	r30, r24
     d6a:	e3 56       	subi	r30, 0x63	; 99
     d6c:	fb 4f       	sbci	r31, 0xFB	; 251
     d6e:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <min>
     d72:	20 83       	st	Z, r18
     d74:	1e c0       	rjmp	.+60     	; 0xdb2 <__vector_3+0x420>
			}
			else
			{
				vetor_hrs[contador_tarefa] = hrs - vetor_hrs[contador_tarefa - 1];
     d76:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     d7a:	08 2e       	mov	r0, r24
     d7c:	00 0c       	add	r0, r0
     d7e:	99 0b       	sbc	r25, r25
     d80:	9c 01       	movw	r18, r24
     d82:	21 50       	subi	r18, 0x01	; 1
     d84:	31 09       	sbc	r19, r1
     d86:	fc 01       	movw	r30, r24
     d88:	ed 52       	subi	r30, 0x2D	; 45
     d8a:	fc 4f       	sbci	r31, 0xFC	; 252
     d8c:	d9 01       	movw	r26, r18
     d8e:	ad 52       	subi	r26, 0x2D	; 45
     d90:	bc 4f       	sbci	r27, 0xFC	; 252
     d92:	40 91 d0 03 	lds	r20, 0x03D0	; 0x8003d0 <hrs>
     d96:	5c 91       	ld	r21, X
     d98:	45 1b       	sub	r20, r21
     d9a:	40 83       	st	Z, r20
				vetor_min[contador_tarefa] = min - vetor_min[contador_tarefa - 1];
     d9c:	fc 01       	movw	r30, r24
     d9e:	e3 56       	subi	r30, 0x63	; 99
     da0:	fb 4f       	sbci	r31, 0xFB	; 251
     da2:	d9 01       	movw	r26, r18
     da4:	a3 56       	subi	r26, 0x63	; 99
     da6:	bb 4f       	sbci	r27, 0xFB	; 251
     da8:	40 91 9b 04 	lds	r20, 0x049B	; 0x80049b <min>
     dac:	2c 91       	ld	r18, X
     dae:	42 1b       	sub	r20, r18
     db0:	40 83       	st	Z, r20
			}	
			calcula_porcentagem();	
     db2:	0e 94 5f 04 	call	0x8be	; 0x8be <calcula_porcentagem>
			contador_tarefa++;
     db6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
						
			atualizaDisplay('f'); // Chamada de função - Mensagem: Finalizando tarefa atual
     dc0:	86 e6       	ldi	r24, 0x66	; 102
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
			tarefa_atual++; // Passa para a próxima tarefa
     dc8:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tarefa_atual>
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <tarefa_atual>
			atualizaDisplay(tarefa_atual); // Chamada de função - Mensagem: Atividade atual em andamento
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__vector_3+0x450>
		}
	}
	else if (pcint0_int == 1)
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	11 f4       	brne	.+4      	; 0xde2 <__vector_3+0x450>
	{
		pcint0_int = 0;
     dde:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <pcint0_int>
	}
}
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <seleciona_saida_demux>:

// ** Módulo funções LED ** //

// Função que seleciona a saída do DEMUX
void seleciona_saida_demux()
{
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
	switch(hrs)
     e24:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <hrs>
     e28:	8e 2f       	mov	r24, r30
     e2a:	ee 0f       	add	r30, r30
     e2c:	99 0b       	sbc	r25, r25
     e2e:	aa 0b       	sbc	r26, r26
     e30:	bb 0b       	sbc	r27, r27
     e32:	87 30       	cpi	r24, 0x07	; 7
     e34:	91 05       	cpc	r25, r1
     e36:	08 f0       	brcs	.+2      	; 0xe3a <seleciona_saida_demux+0x26>
     e38:	74 c0       	rjmp	.+232    	; 0xf22 <seleciona_saida_demux+0x10e>
     e3a:	fc 01       	movw	r30, r24
     e3c:	ec 5c       	subi	r30, 0xCC	; 204
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__tablejump2__>
	{
		case 0:
			// Seleciona a saída do DEMUX: 00
			PORTC &= 0b0111111; // S0 = PC6 = 0
     e44:	88 b1       	in	r24, 0x08	; 8
     e46:	8f 73       	andi	r24, 0x3F	; 63
     e48:	88 b9       	out	0x08, r24	; 8
			PORTD &= 0b11111100; // S1 = PD0 = 0 | S2 = PD1 = 0
     e4a:	8b b1       	in	r24, 0x0b	; 11
     e4c:	8c 7f       	andi	r24, 0xFC	; 252
     e4e:	8b b9       	out	0x0b, r24	; 11
			break;
     e50:	68 c0       	rjmp	.+208    	; 0xf22 <seleciona_saida_demux+0x10e>
		case 1:
			// Seleciona a saída do DEMUX: 01
			PORTC |= 0b1000000; // S0 = PC6 = 1
     e52:	46 9a       	sbi	0x08, 6	; 8
			PORTD &= 0b11111100; // S1 = PD0 = 0 | S2 = PD1 = 0
     e54:	8b b1       	in	r24, 0x0b	; 11
     e56:	8c 7f       	andi	r24, 0xFC	; 252
     e58:	8b b9       	out	0x0b, r24	; 11
		
			// PORTC |= 0b0000001; // Aciona o primeiro LED (PC0)
			break;
     e5a:	63 c0       	rjmp	.+198    	; 0xf22 <seleciona_saida_demux+0x10e>
		case 2:
			// Seleciona a saída do DEMUX: 02
			PORTC &= 0b0111111; // S0 = PC6 = 0
     e5c:	88 b1       	in	r24, 0x08	; 8
     e5e:	8f 73       	andi	r24, 0x3F	; 63
     e60:	88 b9       	out	0x08, r24	; 8
			PORTD |= 0b00000001;  // S1 = PD0 = 1
     e62:	58 9a       	sbi	0x0b, 0	; 11
			PORTD &= 0b11111101; // S2 = PD1 = 0
     e64:	59 98       	cbi	0x0b, 1	; 11
		
			// PORTC |= 0b0000010; // Aciona o segundo LED (PC1)
			break;
     e66:	5d c0       	rjmp	.+186    	; 0xf22 <seleciona_saida_demux+0x10e>
		case 3:
			// Seleciona a saída do DEMUX: 03
			PORTC |= 0b1000000; // S0 = PC6 = 1
     e68:	46 9a       	sbi	0x08, 6	; 8
			PORTD |= 0b00000001; // S1 = PD0 = 1
     e6a:	58 9a       	sbi	0x0b, 0	; 11
			PORTD &= 0b11111101; // S2 = PD1 = 0
     e6c:	59 98       	cbi	0x0b, 1	; 11
		
			// PORTC |= 0b0000100; // Aciona o terceiro LED (PC2)
			break;
     e6e:	59 c0       	rjmp	.+178    	; 0xf22 <seleciona_saida_demux+0x10e>
		case 4:
			// Seleciona a saída do DEMUX: 04
			PORTC &= 0b0111111; // S0 = PC6 = 0
     e70:	88 b1       	in	r24, 0x08	; 8
     e72:	8f 73       	andi	r24, 0x3F	; 63
     e74:	88 b9       	out	0x08, r24	; 8
			PORTD &= 0b11111110; // S1 = PD0 = 0
     e76:	58 98       	cbi	0x0b, 0	; 11
			PORTD |= 0b00000010; // S2 = PD1 = 1
     e78:	59 9a       	sbi	0x0b, 1	; 11
		
			// PORTC |= 0b0001000; // Aciona o quarto LED (PC3)
			break;
     e7a:	53 c0       	rjmp	.+166    	; 0xf22 <seleciona_saida_demux+0x10e>
		case 5:
			// Seleciona a saída do DEMUX: 05
			PORTC |= 0b1000000; // S0 = PC6 = 1
     e7c:	46 9a       	sbi	0x08, 6	; 8
			PORTD &= 0b11111110; // S1 = PD0 = 0
     e7e:	58 98       	cbi	0x0b, 0	; 11
			PORTD |= 0b00000010; // S2 = PD1 = 1
     e80:	59 9a       	sbi	0x0b, 1	; 11
		
			// PORTC |= 0b0010000; // Aciona o quinto LED (PC4)
			break;
     e82:	4f c0       	rjmp	.+158    	; 0xf22 <seleciona_saida_demux+0x10e>
		case 6:
			// Seleciona a saída do DEMUX: 06
			PORTC &= 0b0111111; // S0 = PC6 = 0
     e84:	88 b1       	in	r24, 0x08	; 8
     e86:	8f 73       	andi	r24, 0x3F	; 63
     e88:	88 b9       	out	0x08, r24	; 8
			PORTD |= 0b00000011; // S1 = PD0 = 1 | S2 = PD1 = 1
     e8a:	8b b1       	in	r24, 0x0b	; 11
     e8c:	83 60       	ori	r24, 0x03	; 3
     e8e:	8b b9       	out	0x0b, r24	; 11
		
			// PORTC |= 0b0100000; // Aciona o sexto LED (PC5)
			
			calcula_tempo_da_tarefa(); // Chamada da função que calcula o tempo em que cada tarefa foi realizada
     e90:	0e 94 83 04 	call	0x906	; 0x906 <calcula_tempo_da_tarefa>
			calcula_porcentagem(); // Chamada da função que calcula a porcentagem do tempo total gasto em cada tarefa
     e94:	0e 94 5f 04 	call	0x8be	; 0x8be <calcula_porcentagem>
			
			int contador = 0; // Contador dos vetores vetor_hrs[] e vetor_min[]
			
			// Salvar os arrays vetor_hrs[], vetor_min[] e vetor_porcentagem[] na EEPROM
			for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     e98:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     e9c:	08 2e       	mov	r0, r24
     e9e:	00 0c       	add	r0, r0
     ea0:	99 0b       	sbc	r25, r25
     ea2:	9c 01       	movw	r18, r24
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	82 0f       	add	r24, r18
     eaa:	93 1f       	adc	r25, r19
     eac:	99 23       	and	r25, r25
     eae:	94 f1       	brlt	.+100    	; 0xf14 <seleciona_saida_demux+0x100>
     eb0:	0f 2e       	mov	r0, r31
     eb2:	f3 ed       	ldi	r31, 0xD3	; 211
     eb4:	cf 2e       	mov	r12, r31
     eb6:	f3 e0       	ldi	r31, 0x03	; 3
     eb8:	df 2e       	mov	r13, r31
     eba:	f0 2d       	mov	r31, r0
     ebc:	0f 2e       	mov	r0, r31
     ebe:	fd e9       	ldi	r31, 0x9D	; 157
     ec0:	ef 2e       	mov	r14, r31
     ec2:	f4 e0       	ldi	r31, 0x04	; 4
     ec4:	ff 2e       	mov	r15, r31
     ec6:	f0 2d       	mov	r31, r0
     ec8:	07 e3       	ldi	r16, 0x37	; 55
     eca:	14 e0       	ldi	r17, 0x04	; 4
     ecc:	c0 e0       	ldi	r28, 0x00	; 0
     ece:	d0 e0       	ldi	r29, 0x00	; 0
				_EEPUT(iendereco, vetor_hrs[contador]); // Gravando o conteúdo de vetor_hrs[contador] no endereço iendereco da EEPROM
     ed0:	f6 01       	movw	r30, r12
     ed2:	61 91       	ld	r22, Z+
     ed4:	6f 01       	movw	r12, r30
     ed6:	ce 01       	movw	r24, r28
     ed8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <eeprom_write_byte>
				_EEPUT(iendereco + 1, vetor_min[contador]); // Gravando o conteúdo de vetor_min[contador] no endereço (iendereco + 1) da EEPROM
     edc:	f7 01       	movw	r30, r14
     ede:	61 91       	ld	r22, Z+
     ee0:	7f 01       	movw	r14, r30
     ee2:	ce 01       	movw	r24, r28
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <eeprom_write_byte>
				_EEPUT(iendereco + 2, vetor_porcentagem[contador]); // Gravando o conteúdo de vetor_porcentagem[contador] no endereço (iendereco + 2) da EEPROM
     eea:	f8 01       	movw	r30, r16
     eec:	61 91       	ld	r22, Z+
     eee:	8f 01       	movw	r16, r30
     ef0:	ce 01       	movw	r24, r28
     ef2:	02 96       	adiw	r24, 0x02	; 2
     ef4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <eeprom_write_byte>
			calcula_porcentagem(); // Chamada da função que calcula a porcentagem do tempo total gasto em cada tarefa
			
			int contador = 0; // Contador dos vetores vetor_hrs[] e vetor_min[]
			
			// Salvar os arrays vetor_hrs[], vetor_min[] e vetor_porcentagem[] na EEPROM
			for (int iendereco = 0; iendereco <= 3 * contador_tarefa; iendereco += 3){
     ef8:	23 96       	adiw	r28, 0x03	; 3
     efa:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     efe:	08 2e       	mov	r0, r24
     f00:	00 0c       	add	r0, r0
     f02:	99 0b       	sbc	r25, r25
     f04:	9c 01       	movw	r18, r24
     f06:	22 0f       	add	r18, r18
     f08:	33 1f       	adc	r19, r19
     f0a:	82 0f       	add	r24, r18
     f0c:	93 1f       	adc	r25, r19
     f0e:	8c 17       	cp	r24, r28
     f10:	9d 07       	cpc	r25, r29
     f12:	f4 f6       	brge	.-68     	; 0xed0 <seleciona_saida_demux+0xbc>
				_EEPUT(iendereco + 1, vetor_min[contador]); // Gravando o conteúdo de vetor_min[contador] no endereço (iendereco + 1) da EEPROM
				_EEPUT(iendereco + 2, vetor_porcentagem[contador]); // Gravando o conteúdo de vetor_porcentagem[contador] no endereço (iendereco + 2) da EEPROM
				contador++; // Incrementa o contador
			}
			
			finaliza = 1; // Finaliza contagem do Timer
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <finaliza>
			atualizaDisplay('x'); // Chamada de função - Mensagem: Dados coletados durante as atividades
     f1a:	88 e7       	ldi	r24, 0x78	; 120
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 45 02 	call	0x48a	; 0x48a <atualizaDisplay>
			break;
		default:
			break;
	}
}
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	08 95       	ret

00000f34 <__vector_7>:
	}
}

// Interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
ISR(TIMER2_COMPA_vect)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
	if (pausa != 1 && finaliza != 1 && liga != 1) // Incrementa o timer se as flags: pausa = 0; finaliza = 0; e liga = 0;
     f56:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <pausa>
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <__vector_7+0x2c>
     f5e:	41 c0       	rjmp	.+130    	; 0xfe2 <__vector_7+0xae>
     f60:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <finaliza>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	e9 f1       	breq	.+122    	; 0xfe2 <__vector_7+0xae>
     f68:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <liga>
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	c9 f1       	breq	.+114    	; 0xfe2 <__vector_7+0xae>
	{
		mili += 100; // Incrementa os milissegundos
     f70:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <mili>
     f74:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <mili+0x1>
     f78:	8c 59       	subi	r24, 0x9C	; 156
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
		
		if (mili >= 1000)
     f7c:	88 3e       	cpi	r24, 0xE8	; 232
     f7e:	23 e0       	ldi	r18, 0x03	; 3
     f80:	92 07       	cpc	r25, r18
     f82:	2c f4       	brge	.+10     	; 0xf8e <__vector_7+0x5a>
// Interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
ISR(TIMER2_COMPA_vect)
{
	if (pausa != 1 && finaliza != 1 && liga != 1) // Incrementa o timer se as flags: pausa = 0; finaliza = 0; e liga = 0;
	{
		mili += 100; // Incrementa os milissegundos
     f84:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <mili+0x1>
     f88:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <mili>
     f8c:	09 c0       	rjmp	.+18     	; 0xfa0 <__vector_7+0x6c>
		
		if (mili >= 1000)
		{
			mili = 0;
     f8e:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <mili+0x1>
     f92:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <mili>
			seg++; // Incrementa os segundos
     f96:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <seg>
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <seg>
		}
		if (seg >= 60)
     fa0:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <seg>
     fa4:	8c 33       	cpi	r24, 0x3C	; 60
     fa6:	4c f0       	brlt	.+18     	; 0xfba <__vector_7+0x86>
		{
			seg = 0;
     fa8:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <seg>
			min++; // Incrementa os minutos
     fac:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <min>
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <min>
			define_porcentagem_PWM(); // Chamada para função que define a porcentagem do sinal PWM
     fb6:	0e 94 4a 01 	call	0x294	; 0x294 <define_porcentagem_PWM>
		}		
		if (min >= 60)
     fba:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <min>
     fbe:	8c 33       	cpi	r24, 0x3C	; 60
     fc0:	84 f0       	brlt	.+32     	; 0xfe2 <__vector_7+0xae>
		{
			min = 0;
     fc2:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <min>
			hrs++; // Incrementa as horas
     fc6:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <hrs>
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <hrs>
			
			OCR0A = 0; // Reseta PWM
     fd0:	17 bc       	out	0x27, r1	; 39
     fd2:	8f e3       	ldi	r24, 0x3F	; 63
     fd4:	9c e9       	ldi	r25, 0x9C	; 156
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <__vector_7+0xa2>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <__vector_7+0xa8>
     fdc:	00 00       	nop
			_delay_ms(10);
			seleciona_saida_demux(); // Chamada para função que seleciona a saída do DEMUX
     fde:	0e 94 0a 07 	call	0xe14	; 0xe14 <seleciona_saida_demux>
		}
	}
}
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <main>:
}


int main(void)
{
	DDRB = 0b11111110; // Define todos os pinos da porta B como saída (exceto B0)
    1004:	8e ef       	ldi	r24, 0xFE	; 254
    1006:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001; // Habilita pull-up do pino PB0
    1008:	c1 e0       	ldi	r28, 0x01	; 1
    100a:	c5 b9       	out	0x05, r28	; 5
	DDRD = 0b11110011; // Define os pinos da porta D: D0-D3 como entradas; D4-D7 como saída
    100c:	83 ef       	ldi	r24, 0xF3	; 243
    100e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00001100; // Habilita pull-ups dos pinos PD2 e PD3
    1010:	8c e0       	ldi	r24, 0x0C	; 12
    1012:	8b b9       	out	0x0b, r24	; 11
	
	// Variáveis inicializadas
	mili = 0;
    1014:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <mili+0x1>
    1018:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <mili>
	seg = 0;
    101c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <seg>
	min = 0;
    1020:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <min>
	hrs = 0;
    1024:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <hrs>
	liga = 1;
    1028:	c0 93 d1 03 	sts	0x03D1, r28	; 0x8003d1 <liga>
	pausa = 0;
    102c:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <pausa>
	finaliza = 0;
    1030:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <finaliza>
	seleciona_saida_demux(); // Chamada para função que seleciona a saída do DEMUX
    1034:	0e 94 0a 07 	call	0xe14	; 0xe14 <seleciona_saida_demux>
	
	USART_Init(MYUBRR); // Chamada para função que inicializa a USART
    1038:	87 e6       	ldi	r24, 0x67	; 103
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <USART_Init>
	
	// Fast PWM, TOP = 0xFF, OC0A habilitado
	TCCR0A = 0b10000011; // PWM não invertido no pino OC0A
    1040:	83 e8       	ldi	r24, 0x83	; 131
    1042:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101; // Liga TC0, prescaler = 1024, fpwm = f0sc/(256*prescaler) = 16MHz/(256*1024) = 61Hz
    1044:	85 e0       	ldi	r24, 0x05	; 5
    1046:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0; // Controle do ciclo ativo do PWM 0C0A
    1048:	17 bc       	out	0x27, r1	; 39
	
	// Configuração das Interrupções Externas
	EICRA = 0b00001010;// Interrupções externas INT0 e INT1 na borda de descida
    104a:	8a e0       	ldi	r24, 0x0A	; 10
    104c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011;// Habilita as interrupções externas INT0 e INT1
    1050:	93 e0       	ldi	r25, 0x03	; 3
    1052:	9d bb       	out	0x1d, r25	; 29
	
	// Configuração da Interrupção 0 por mudança de pino
	PCICR = 0b00000001; // Enable pin change interrupt 0
    1054:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = 0b00000001; // Pin change enable mask 0
    1058:	c0 93 6b 00 	sts	0x006B, r28	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
	// ** Conferir comentários do Timer **
	// Configuração dos Timers
	TCCR2A = 0b00000010; // Habilita modo CTC do TC0
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000011; // Liga TC0 com prescaler = 64
    1062:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 249;		 // Ajusta o comparador para o TC0 contar até 249
    1066:	99 ef       	ldi	r25, 0xF9	; 249
    1068:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = 0b00000010; // Habilita a interrupção na igualdade de comparação com OCR0A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
    106c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	sei(); // Habilita interrupções globais, ativando o bit I do SREG
    1070:	78 94       	sei
	
	nokia_lcd_init(); // Inicializa o LCD
    1072:	0e 94 8b 08 	call	0x1116	; 0x1116 <nokia_lcd_init>
	nokia_lcd_clear();  // Limpa o display
    1076:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
	nokia_lcd_write_string("--------------", 1);  // Informação que será exibida no display e tamanho da fonte
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 10); // Move o cursor
    1084:	6a e0       	ldi	r22, 0x0A	; 10
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Digite quantas", 1);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	87 ea       	ldi	r24, 0xA7	; 167
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 20);
    1096:	64 e1       	ldi	r22, 0x14	; 20
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(" tarefas vai", 1);
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	86 eb       	ldi	r24, 0xB6	; 182
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 30);
    10a8:	6e e1       	ldi	r22, 0x1E	; 30
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("   realizar", 1);
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	83 ec       	ldi	r24, 0xC3	; 195
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 40);
    10ba:	68 e2       	ldi	r22, 0x28	; 40
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 cb 09 	call	0x1396	; 0x1396 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("--------------", 1);
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 b8 09 	call	0x1370	; 0x1370 <nokia_lcd_write_string>
	nokia_lcd_render(); // Exibe as informações apresentadas acima no display
    10cc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <nokia_lcd_render>
    10d0:	ff cf       	rjmp	.-2      	; 0x10d0 <main+0xcc>

000010d2 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
    10d2:	29 98       	cbi	0x05, 1	; 5
    10d4:	66 23       	and	r22, r22
    10d6:	11 f0       	breq	.+4      	; 0x10dc <write+0xa>
    10d8:	2b 9a       	sbi	0x05, 3	; 5
    10da:	15 c0       	rjmp	.+42     	; 0x1106 <write+0x34>
    10dc:	2b 98       	cbi	0x05, 3	; 5
    10de:	13 c0       	rjmp	.+38     	; 0x1106 <write+0x34>
    10e0:	ac 01       	movw	r20, r24
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <write+0x18>
    10e6:	55 95       	asr	r21
    10e8:	47 95       	ror	r20
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <write+0x14>
    10ee:	40 ff       	sbrs	r20, 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <write+0x24>
    10f2:	2c 9a       	sbi	0x05, 4	; 5
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <write+0x26>
    10f6:	2c 98       	cbi	0x05, 4	; 5
    10f8:	2d 9a       	sbi	0x05, 5	; 5
    10fa:	2d 98       	cbi	0x05, 5	; 5
    10fc:	21 50       	subi	r18, 0x01	; 1
    10fe:	31 09       	sbc	r19, r1
    1100:	78 f7       	brcc	.-34     	; 0x10e0 <write+0xe>
    1102:	29 9a       	sbi	0x05, 1	; 5
    1104:	08 95       	ret
    1106:	27 e0       	ldi	r18, 0x07	; 7
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	e9 cf       	rjmp	.-46     	; 0x10e0 <write+0xe>

0000110e <write_cmd>:
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	0e 94 69 08 	call	0x10d2	; 0x10d2 <write>
    1114:	08 95       	ret

00001116 <nokia_lcd_init>:
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	21 9a       	sbi	0x04, 1	; 4
    111c:	22 9a       	sbi	0x04, 2	; 4
    111e:	23 9a       	sbi	0x04, 3	; 4
    1120:	24 9a       	sbi	0x04, 4	; 4
    1122:	25 9a       	sbi	0x04, 5	; 4
    1124:	2a 9a       	sbi	0x05, 2	; 5
    1126:	29 9a       	sbi	0x05, 1	; 5
    1128:	83 ec       	ldi	r24, 0xC3	; 195
    112a:	99 e0       	ldi	r25, 0x09	; 9
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <nokia_lcd_init+0x16>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <nokia_lcd_init+0x1c>
    1132:	00 00       	nop
    1134:	2a 98       	cbi	0x05, 2	; 5
    1136:	8b e5       	ldi	r24, 0x5B	; 91
    1138:	94 e4       	ldi	r25, 0x44	; 68
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <nokia_lcd_init+0x24>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <nokia_lcd_init+0x2a>
    1140:	00 00       	nop
    1142:	2a 9a       	sbi	0x05, 2	; 5
    1144:	29 98       	cbi	0x05, 1	; 5
    1146:	81 e2       	ldi	r24, 0x21	; 33
    1148:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    114c:	83 e1       	ldi	r24, 0x13	; 19
    114e:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    1152:	86 e0       	ldi	r24, 0x06	; 6
    1154:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    1158:	82 ec       	ldi	r24, 0xC2	; 194
    115a:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    115e:	80 e2       	ldi	r24, 0x20	; 32
    1160:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    1164:	89 e0       	ldi	r24, 0x09	; 9
    1166:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    116a:	80 e8       	ldi	r24, 0x80	; 128
    116c:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    1170:	80 e4       	ldi	r24, 0x40	; 64
    1172:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    1176:	c8 ef       	ldi	r28, 0xF8	; 248
    1178:	d1 e0       	ldi	r29, 0x01	; 1
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <write>
    1182:	21 97       	sbiw	r28, 0x01	; 1
    1184:	d1 f7       	brne	.-12     	; 0x117a <nokia_lcd_init+0x64>
    1186:	88 e0       	ldi	r24, 0x08	; 8
    1188:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    118c:	8c e0       	ldi	r24, 0x0C	; 12
    118e:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <nokia_lcd_clear>:
    1198:	80 e8       	ldi	r24, 0x80	; 128
    119a:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    119e:	80 e4       	ldi	r24, 0x40	; 64
    11a0:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    11a4:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <nokia_lcd+0x1f8>
    11a8:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <nokia_lcd+0x1f9>
    11ac:	e2 ed       	ldi	r30, 0xD2	; 210
    11ae:	f1 e0       	ldi	r31, 0x01	; 1
    11b0:	8a ec       	ldi	r24, 0xCA	; 202
    11b2:	93 e0       	ldi	r25, 0x03	; 3
    11b4:	11 92       	st	Z+, r1
    11b6:	e8 17       	cp	r30, r24
    11b8:	f9 07       	cpc	r31, r25
    11ba:	e1 f7       	brne	.-8      	; 0x11b4 <nokia_lcd_clear+0x1c>
    11bc:	08 95       	ret

000011be <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    11be:	26 2f       	mov	r18, r22
    11c0:	26 95       	lsr	r18
    11c2:	26 95       	lsr	r18
    11c4:	26 95       	lsr	r18
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	34 e5       	ldi	r19, 0x54	; 84
    11ca:	23 9f       	mul	r18, r19
    11cc:	80 0d       	add	r24, r0
    11ce:	91 1d       	adc	r25, r1
    11d0:	11 24       	eor	r1, r1
	if (value)
    11d2:	44 23       	and	r20, r20
    11d4:	79 f0       	breq	.+30     	; 0x11f4 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
    11d6:	fc 01       	movw	r30, r24
    11d8:	ee 52       	subi	r30, 0x2E	; 46
    11da:	fe 4f       	sbci	r31, 0xFE	; 254
    11dc:	67 70       	andi	r22, 0x07	; 7
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <nokia_lcd_set_pixel+0x2a>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	6a 95       	dec	r22
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <nokia_lcd_set_pixel+0x26>
    11ec:	90 81       	ld	r25, Z
    11ee:	89 2b       	or	r24, r25
    11f0:	80 83       	st	Z, r24
    11f2:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
    11f4:	fc 01       	movw	r30, r24
    11f6:	ee 52       	subi	r30, 0x2E	; 46
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	67 70       	andi	r22, 0x07	; 7
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <nokia_lcd_set_pixel+0x48>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	6a 95       	dec	r22
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <nokia_lcd_set_pixel+0x44>
    120a:	80 95       	com	r24
    120c:	90 81       	ld	r25, Z
    120e:	89 23       	and	r24, r25
    1210:	80 83       	st	Z, r24
    1212:	08 95       	ret

00001214 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1214:	5f 92       	push	r5
    1216:	6f 92       	push	r6
    1218:	7f 92       	push	r7
    121a:	8f 92       	push	r8
    121c:	9f 92       	push	r9
    121e:	af 92       	push	r10
    1220:	bf 92       	push	r11
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1234:	26 2f       	mov	r18, r22
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	49 01       	movw	r8, r18
    123a:	88 0c       	add	r8, r8
    123c:	99 1c       	adc	r9, r9
    123e:	88 0c       	add	r8, r8
    1240:	99 1c       	adc	r9, r9
    1242:	82 0e       	add	r8, r18
    1244:	93 1e       	adc	r9, r19
    1246:	18 14       	cp	r1, r8
    1248:	19 04       	cpc	r1, r9
    124a:	0c f0       	brlt	.+2      	; 0x124e <nokia_lcd_write_char+0x3a>
    124c:	5d c0       	rjmp	.+186    	; 0x1308 <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
    124e:	89 01       	movw	r16, r18
    1250:	00 0f       	add	r16, r16
    1252:	11 1f       	adc	r17, r17
    1254:	00 0f       	add	r16, r16
    1256:	11 1f       	adc	r17, r17
    1258:	00 0f       	add	r16, r16
    125a:	11 1f       	adc	r17, r17
    125c:	02 1b       	sub	r16, r18
    125e:	13 0b       	sbc	r17, r19
    1260:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1262:	a8 2e       	mov	r10, r24
    1264:	b1 2c       	mov	r11, r1
    1266:	c5 01       	movw	r24, r10
    1268:	80 97       	sbiw	r24, 0x20	; 32
    126a:	5c 01       	movw	r10, r24
    126c:	aa 0c       	add	r10, r10
    126e:	bb 1c       	adc	r11, r11
    1270:	aa 0c       	add	r10, r10
    1272:	bb 1c       	adc	r11, r11
    1274:	a8 0e       	add	r10, r24
    1276:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1278:	0f 2e       	mov	r0, r31
    127a:	fb ec       	ldi	r31, 0xCB	; 203
    127c:	cf 2e       	mov	r12, r31
    127e:	f3 e0       	ldi	r31, 0x03	; 3
    1280:	df 2e       	mov	r13, r31
    1282:	f0 2d       	mov	r31, r0
    1284:	0f 2e       	mov	r0, r31
    1286:	fa ec       	ldi	r31, 0xCA	; 202
    1288:	ef 2e       	mov	r14, r31
    128a:	f3 e0       	ldi	r31, 0x03	; 3
    128c:	ff 2e       	mov	r15, r31
    128e:	f0 2d       	mov	r31, r0
    1290:	2d c0       	rjmp	.+90     	; 0x12ec <nokia_lcd_write_char+0xd8>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1292:	fe 01       	movw	r30, r28
    1294:	24 91       	lpm	r18, Z
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	87 2d       	mov	r24, r7
    129a:	65 2d       	mov	r22, r5
    129c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__udivmodqi4>
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <nokia_lcd_write_char+0x92>
    12a2:	35 95       	asr	r19
    12a4:	27 95       	ror	r18
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <nokia_lcd_write_char+0x8e>
    12aa:	20 ff       	sbrs	r18, 0
    12ac:	0a c0       	rjmp	.+20     	; 0x12c2 <nokia_lcd_write_char+0xae>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    12ae:	f6 01       	movw	r30, r12
    12b0:	60 81       	ld	r22, Z
    12b2:	67 0d       	add	r22, r7
    12b4:	f7 01       	movw	r30, r14
    12b6:	80 81       	ld	r24, Z
    12b8:	41 e0       	ldi	r20, 0x01	; 1
    12ba:	86 0d       	add	r24, r6
    12bc:	0e 94 df 08 	call	0x11be	; 0x11be <nokia_lcd_set_pixel>
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <nokia_lcd_write_char+0xc0>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    12c2:	f6 01       	movw	r30, r12
    12c4:	60 81       	ld	r22, Z
    12c6:	67 0d       	add	r22, r7
    12c8:	f7 01       	movw	r30, r14
    12ca:	80 81       	ld	r24, Z
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	86 0d       	add	r24, r6
    12d0:	0e 94 df 08 	call	0x11be	; 0x11be <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    12d4:	73 94       	inc	r7
    12d6:	87 2d       	mov	r24, r7
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	80 17       	cp	r24, r16
    12dc:	91 07       	cpc	r25, r17
    12de:	cc f2       	brlt	.-78     	; 0x1292 <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    12e0:	63 94       	inc	r6
    12e2:	86 2d       	mov	r24, r6
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	88 15       	cp	r24, r8
    12e8:	99 05       	cpc	r25, r9
    12ea:	74 f4       	brge	.+28     	; 0x1308 <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
    12ec:	10 16       	cp	r1, r16
    12ee:	11 06       	cpc	r1, r17
    12f0:	bc f7       	brge	.-18     	; 0x12e0 <nokia_lcd_write_char+0xcc>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    12f2:	86 2d       	mov	r24, r6
    12f4:	65 2d       	mov	r22, r5
    12f6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__udivmodqi4>
    12fa:	e5 01       	movw	r28, r10
    12fc:	c8 0f       	add	r28, r24
    12fe:	d1 1d       	adc	r29, r1
    1300:	ca 58       	subi	r28, 0x8A	; 138
    1302:	df 4f       	sbci	r29, 0xFF	; 255
    1304:	71 2c       	mov	r7, r1
    1306:	c5 cf       	rjmp	.-118    	; 0x1292 <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1308:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <nokia_lcd+0x1f8>
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	98 0f       	add	r25, r24
    1310:	85 2d       	mov	r24, r5
    1312:	88 0f       	add	r24, r24
    1314:	88 0f       	add	r24, r24
    1316:	85 0d       	add	r24, r5
    1318:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
    131a:	84 35       	cpi	r24, 0x54	; 84
    131c:	18 f4       	brcc	.+6      	; 0x1324 <nokia_lcd_write_char+0x110>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    131e:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <nokia_lcd+0x1f8>
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <nokia_lcd_write_char+0x12c>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
    1324:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    1328:	eb ec       	ldi	r30, 0xCB	; 203
    132a:	f3 e0       	ldi	r31, 0x03	; 3
    132c:	80 81       	ld	r24, Z
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	98 0f       	add	r25, r24
    1332:	85 2d       	mov	r24, r5
    1334:	88 0f       	add	r24, r24
    1336:	88 0f       	add	r24, r24
    1338:	88 0f       	add	r24, r24
    133a:	85 19       	sub	r24, r5
    133c:	89 0f       	add	r24, r25
    133e:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    1340:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <nokia_lcd+0x1f9>
    1344:	80 33       	cpi	r24, 0x30	; 48
    1346:	20 f0       	brcs	.+8      	; 0x1350 <nokia_lcd_write_char+0x13c>
		nokia_lcd.cursor_x = 0;
    1348:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    134c:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <nokia_lcd+0x1f9>
	}
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	9f 90       	pop	r9
    1366:	8f 90       	pop	r8
    1368:	7f 90       	pop	r7
    136a:	6f 90       	pop	r6
    136c:	5f 90       	pop	r5
    136e:	08 95       	ret

00001370 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	ec 01       	movw	r28, r24
	while(*str)
    1378:	88 81       	ld	r24, Y
    137a:	88 23       	and	r24, r24
    137c:	41 f0       	breq	.+16     	; 0x138e <nokia_lcd_write_string+0x1e>
    137e:	16 2f       	mov	r17, r22
    1380:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
    1382:	61 2f       	mov	r22, r17
    1384:	0e 94 0a 09 	call	0x1214	; 0x1214 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    1388:	89 91       	ld	r24, Y+
    138a:	81 11       	cpse	r24, r1
    138c:	fa cf       	rjmp	.-12     	; 0x1382 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	08 95       	ret

00001396 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1396:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    139a:	60 93 cb 03 	sts	0x03CB, r22	; 0x8003cb <nokia_lcd+0x1f9>
    139e:	08 95       	ret

000013a0 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    13a8:	80 e8       	ldi	r24, 0x80	; 128
    13aa:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
	write_cmd(0x40);
    13ae:	80 e4       	ldi	r24, 0x40	; 64
    13b0:	0e 94 87 08 	call	0x110e	; 0x110e <write_cmd>
    13b4:	c2 ed       	ldi	r28, 0xD2	; 210
    13b6:	d1 e0       	ldi	r29, 0x01	; 1
    13b8:	0a ec       	ldi	r16, 0xCA	; 202
    13ba:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	89 91       	ld	r24, Y+
    13c0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    13c4:	c0 17       	cp	r28, r16
    13c6:	d1 07       	cpc	r29, r17
    13c8:	c9 f7       	brne	.-14     	; 0x13bc <nokia_lcd_render+0x1c>
		write_data(nokia_lcd.screen[i]);
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	08 95       	ret

000013d4 <__udivmodqi4>:
    13d4:	99 1b       	sub	r25, r25
    13d6:	79 e0       	ldi	r23, 0x09	; 9
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <__udivmodqi4_ep>

000013da <__udivmodqi4_loop>:
    13da:	99 1f       	adc	r25, r25
    13dc:	96 17       	cp	r25, r22
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <__udivmodqi4_ep>
    13e0:	96 1b       	sub	r25, r22

000013e2 <__udivmodqi4_ep>:
    13e2:	88 1f       	adc	r24, r24
    13e4:	7a 95       	dec	r23
    13e6:	c9 f7       	brne	.-14     	; 0x13da <__udivmodqi4_loop>
    13e8:	80 95       	com	r24
    13ea:	08 95       	ret

000013ec <__divmodhi4>:
    13ec:	97 fb       	bst	r25, 7
    13ee:	07 2e       	mov	r0, r23
    13f0:	16 f4       	brtc	.+4      	; 0x13f6 <__divmodhi4+0xa>
    13f2:	00 94       	com	r0
    13f4:	07 d0       	rcall	.+14     	; 0x1404 <__divmodhi4_neg1>
    13f6:	77 fd       	sbrc	r23, 7
    13f8:	09 d0       	rcall	.+18     	; 0x140c <__divmodhi4_neg2>
    13fa:	0e 94 10 0a 	call	0x1420	; 0x1420 <__udivmodhi4>
    13fe:	07 fc       	sbrc	r0, 7
    1400:	05 d0       	rcall	.+10     	; 0x140c <__divmodhi4_neg2>
    1402:	3e f4       	brtc	.+14     	; 0x1412 <__divmodhi4_exit>

00001404 <__divmodhi4_neg1>:
    1404:	90 95       	com	r25
    1406:	81 95       	neg	r24
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__divmodhi4_neg2>:
    140c:	70 95       	com	r23
    140e:	61 95       	neg	r22
    1410:	7f 4f       	sbci	r23, 0xFF	; 255

00001412 <__divmodhi4_exit>:
    1412:	08 95       	ret

00001414 <__tablejump2__>:
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	05 90       	lpm	r0, Z+
    141a:	f4 91       	lpm	r31, Z
    141c:	e0 2d       	mov	r30, r0
    141e:	09 94       	ijmp

00001420 <__udivmodhi4>:
    1420:	aa 1b       	sub	r26, r26
    1422:	bb 1b       	sub	r27, r27
    1424:	51 e1       	ldi	r21, 0x11	; 17
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <__udivmodhi4_ep>

00001428 <__udivmodhi4_loop>:
    1428:	aa 1f       	adc	r26, r26
    142a:	bb 1f       	adc	r27, r27
    142c:	a6 17       	cp	r26, r22
    142e:	b7 07       	cpc	r27, r23
    1430:	10 f0       	brcs	.+4      	; 0x1436 <__udivmodhi4_ep>
    1432:	a6 1b       	sub	r26, r22
    1434:	b7 0b       	sbc	r27, r23

00001436 <__udivmodhi4_ep>:
    1436:	88 1f       	adc	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	5a 95       	dec	r21
    143c:	a9 f7       	brne	.-22     	; 0x1428 <__udivmodhi4_loop>
    143e:	80 95       	com	r24
    1440:	90 95       	com	r25
    1442:	bc 01       	movw	r22, r24
    1444:	cd 01       	movw	r24, r26
    1446:	08 95       	ret

00001448 <strcat>:
    1448:	fb 01       	movw	r30, r22
    144a:	dc 01       	movw	r26, r24
    144c:	0d 90       	ld	r0, X+
    144e:	00 20       	and	r0, r0
    1450:	e9 f7       	brne	.-6      	; 0x144c <strcat+0x4>
    1452:	11 97       	sbiw	r26, 0x01	; 1
    1454:	01 90       	ld	r0, Z+
    1456:	0d 92       	st	X+, r0
    1458:	00 20       	and	r0, r0
    145a:	e1 f7       	brne	.-8      	; 0x1454 <strcat+0xc>
    145c:	08 95       	ret

0000145e <__itoa_ncheck>:
    145e:	bb 27       	eor	r27, r27
    1460:	4a 30       	cpi	r20, 0x0A	; 10
    1462:	31 f4       	brne	.+12     	; 0x1470 <__itoa_ncheck+0x12>
    1464:	99 23       	and	r25, r25
    1466:	22 f4       	brpl	.+8      	; 0x1470 <__itoa_ncheck+0x12>
    1468:	bd e2       	ldi	r27, 0x2D	; 45
    146a:	90 95       	com	r25
    146c:	81 95       	neg	r24
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__utoa_common>

00001474 <__utoa_ncheck>:
    1474:	bb 27       	eor	r27, r27

00001476 <__utoa_common>:
    1476:	fb 01       	movw	r30, r22
    1478:	55 27       	eor	r21, r21
    147a:	aa 27       	eor	r26, r26
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	aa 1f       	adc	r26, r26
    1482:	a4 17       	cp	r26, r20
    1484:	10 f0       	brcs	.+4      	; 0x148a <__utoa_common+0x14>
    1486:	a4 1b       	sub	r26, r20
    1488:	83 95       	inc	r24
    148a:	50 51       	subi	r21, 0x10	; 16
    148c:	b9 f7       	brne	.-18     	; 0x147c <__utoa_common+0x6>
    148e:	a0 5d       	subi	r26, 0xD0	; 208
    1490:	aa 33       	cpi	r26, 0x3A	; 58
    1492:	08 f0       	brcs	.+2      	; 0x1496 <__utoa_common+0x20>
    1494:	a9 5d       	subi	r26, 0xD9	; 217
    1496:	a1 93       	st	Z+, r26
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	79 f7       	brne	.-34     	; 0x147a <__utoa_common+0x4>
    149c:	b1 11       	cpse	r27, r1
    149e:	b1 93       	st	Z+, r27
    14a0:	11 92       	st	Z+, r1
    14a2:	cb 01       	movw	r24, r22
    14a4:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <strrev>

000014a8 <strrev>:
    14a8:	dc 01       	movw	r26, r24
    14aa:	fc 01       	movw	r30, r24
    14ac:	67 2f       	mov	r22, r23
    14ae:	71 91       	ld	r23, Z+
    14b0:	77 23       	and	r23, r23
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <strrev+0x4>
    14b4:	32 97       	sbiw	r30, 0x02	; 2
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <strrev+0x18>
    14b8:	7c 91       	ld	r23, X
    14ba:	6d 93       	st	X+, r22
    14bc:	70 83       	st	Z, r23
    14be:	62 91       	ld	r22, -Z
    14c0:	ae 17       	cp	r26, r30
    14c2:	bf 07       	cpc	r27, r31
    14c4:	c8 f3       	brcs	.-14     	; 0x14b8 <strrev+0x10>
    14c6:	08 95       	ret

000014c8 <eeprom_read_byte>:
    14c8:	f9 99       	sbic	0x1f, 1	; 31
    14ca:	fe cf       	rjmp	.-4      	; 0x14c8 <eeprom_read_byte>
    14cc:	92 bd       	out	0x22, r25	; 34
    14ce:	81 bd       	out	0x21, r24	; 33
    14d0:	f8 9a       	sbi	0x1f, 0	; 31
    14d2:	99 27       	eor	r25, r25
    14d4:	80 b5       	in	r24, 0x20	; 32
    14d6:	08 95       	ret

000014d8 <eeprom_write_byte>:
    14d8:	26 2f       	mov	r18, r22

000014da <eeprom_write_r18>:
    14da:	f9 99       	sbic	0x1f, 1	; 31
    14dc:	fe cf       	rjmp	.-4      	; 0x14da <eeprom_write_r18>
    14de:	1f ba       	out	0x1f, r1	; 31
    14e0:	92 bd       	out	0x22, r25	; 34
    14e2:	81 bd       	out	0x21, r24	; 33
    14e4:	20 bd       	out	0x20, r18	; 32
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	fa 9a       	sbi	0x1f, 2	; 31
    14ec:	f9 9a       	sbi	0x1f, 1	; 31
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	08 95       	ret

000014f4 <_exit>:
    14f4:	f8 94       	cli

000014f6 <__stop_program>:
    14f6:	ff cf       	rjmp	.-2      	; 0x14f6 <__stop_program>
